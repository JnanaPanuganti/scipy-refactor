#cython: ccomplex=True

"""The flapack module was generated with Fwrap v0.2.0dev_90fff3a.

Below is a listing of functions and data types.
For usage information see the function docstrings.

Functions
---------
cgbbrd(...)
cgees(...)
cgeesx(...)
cgeev(...)
cgeevx(...)
cgegs(...)
cgegv(...)
cgelsd(...)
cgelss(...)
cgelsx(...)
cgelsy(...)
cgeqp3(...)
cgeqpf(...)
cgesdd(...)
cgesvd(...)
cgges(...)
cggesx(...)
cggev(...)
cggevx(...)
cggsvd(...)
cggsvp(...)
cgtcon(...)
chbev, zhbev(...)
chbevd, zhbevd(...)
chbevx, zhbevx(...)
chbgst, zhbgst(...)
chbgv, zhbgv(...)
chbgvd, zhbgvd(...)
chbgvx, zhbgvx(...)
chbtrd, zhbtrd(...)
checon, zhecon(...)
cheequb, zheequb(...)
cheev, zheev(...)
cheevd, zheevd(...)
cheevr, zheevr(...)
cheevx, zheevx(...)
chegs2, zhegs2(...)
chegst, zhegst(...)
chegv, zhegv(...)
chegvd, zhegvd(...)
chegvx, zhegvx(...)
cherfs, zherfs(...)
cherfsx, zherfsx(...)
chesv, zhesv(...)
chesvx, zhesvx(...)
chesvxx, zhesvxx(...)
chetd2, zhetd2(...)
chetf2, zhetf2(...)
chetrd, zhetrd(...)
chetrf, zhetrf(...)
chetri, zhetri(...)
chetrs, zhetrs(...)
chetrs2, zhetrs2(...)
chfrk, zhfrk(...)
chgeqz(...)
chla_transtype(...)
chpcon, zhpcon(...)
chpev, zhpev(...)
chpevd, zhpevd(...)
chpevx, zhpevx(...)
chpgst, zhpgst(...)
chpgv, zhpgv(...)
chpgvd, zhpgvd(...)
chpgvx, zhpgvx(...)
chprfs, zhprfs(...)
chpsv, zhpsv(...)
chpsvx, zhpsvx(...)
chptrd, zhptrd(...)
chptrf, zhptrf(...)
chptri, zhptri(...)
chptrs, zhptrs(...)
chsein(...)
chseqr(...)
cla_gbrcond_c, zla_gbrcond_c(...)
cla_gbrcond_x, zla_gbrcond_x(...)
cla_gercond_c, zla_gercond_c(...)
cla_gercond_x, zla_gercond_x(...)
cla_heamv, zla_heamv(...)
cla_hercond_c, zla_hercond_c(...)
cla_hercond_x, zla_hercond_x(...)
cla_herfsx_extended, zla_herfsx_extended(...)
cla_herpvgrw, zla_herpvgrw(...)
cla_porcond_c, zla_porcond_c(...)
cla_porcond_x, zla_porcond_x(...)
cla_syrcond_c, zla_syrcond_c(...)
cla_syrcond_x, zla_syrcond_x(...)
clacgv, zlacgv(...)
clacn2(...)
clacon(...)
clacp2, zlacp2(...)
clacrm, zlacrm(...)
clacrt, zlacrt(...)
cladiv(...)
claed0(...)
claed7(...)
claed8(...)
claein(...)
claesy, zlaesy(...)
clag2z(...)
clahef, zlahef(...)
clahqr(...)
clalsd(...)
clanhb, zlanhb(...)
clanhe, zlanhe(...)
clanhf, zlanhf(...)
clanhp, zlanhp(...)
clanht, zlanht(...)
claqhb, zlaqhb(...)
claqhe, zlaqhe(...)
claqhp, zlaqhp(...)
claqr0(...)
claqr1(...)
claqr2(...)
claqr3(...)
claqr4(...)
claqr5(...)
clarcm, zlarcm(...)
cptrfs(...)
cptsvx(...)
cpttrs(...)
cptts2(...)
crot, zrot(...)
cspcon(...)
cspmv, zspmv(...)
cspr, zspr(...)
csrscl(...)
cstedc(...)
csycon(...)
csymv, zsymv(...)
csyr, zsyr(...)
ctgevc(...)
ctgex2(...)
ctgexc(...)
ctgsen(...)
ctgsy2(...)
ctrevc(...)
ctrexc(...)
ctrsen(...)
cunbdb, zunbdb(...)
cuncsd, zuncsd(...)
cung2l, zung2l(...)
cung2r, zung2r(...)
cungbr, zungbr(...)
cunghr, zunghr(...)
cungl2, zungl2(...)
cunglq, zunglq(...)
cungql, zungql(...)
cungqr, zungqr(...)
cungr2, zungr2(...)
cungrq, zungrq(...)
cungtr, zungtr(...)
cunm2l, zunm2l(...)
cunm2r, zunm2r(...)
cunmbr, zunmbr(...)
cunmhr, zunmhr(...)
cunml2, zunml2(...)
cunmlq, zunmlq(...)
cunmql, zunmql(...)
cunmqr, zunmqr(...)
cunmr2, zunmr2(...)
cunmr3, zunmr3(...)
cunmrq, zunmrq(...)
cunmrz, zunmrz(...)
cunmtr, zunmtr(...)
cupgtr, zupgtr(...)
cupmtr, zupmtr(...)
dgbbrd(...)
dgees(...)
dgeesx(...)
dgeev(...)
dgeevx(...)
dgegs(...)
dgegv(...)
dgelsd(...)
dgelss(...)
dgelsx(...)
dgelsy(...)
dgeqp3(...)
dgeqpf(...)
dgesdd(...)
dgesvd(...)
dgges(...)
dggesx(...)
dggev(...)
dggevx(...)
dggsvd(...)
dggsvp(...)
dgtcon(...)
dhgeqz(...)
dhsein(...)
dhseqr(...)
dlacn2(...)
dlacon(...)
dladiv(...)
dlaed0(...)
dlaed7(...)
dlaed8(...)
dlaein(...)
dlag2(...)
dlag2s(...)
dlahqr(...)
dlalsd(...)
dlaqr0(...)
dlaqr1(...)
dlaqr2(...)
dlaqr3(...)
dlaqr4(...)
dlaqr5(...)
dlat2s(...)
dptrfs(...)
dptsvx(...)
dpttrs(...)
dptts2(...)
dsgesv(...)
dspcon(...)
dsposv(...)
dstedc(...)
dsycon(...)
dtgevc(...)
dtgex2(...)
dtgexc(...)
dtgsen(...)
dtgsy2(...)
dtrevc(...)
dtrexc(...)
dtrsen(...)
dzsum1(...)
icmax1(...)
ieeeck(...)
ilaclc(...)
ilaclr(...)
iladiag(...)
iladlc(...)
iladlr(...)
ilaenv(...)
ilaprec(...)
ilaslc(...)
ilaslr(...)
ilatrans(...)
ilauplo(...)
ilaver(...)
ilazlc(...)
ilazlr(...)
iparmq(...)
izmax1(...)
lsamen(...)
sbbcsd, dbbcsd, cbbcsd, zbbcsd(...)
sbdsdc, dbdsdc(...)
sbdsqr, dbdsqr, cbdsqr, zbdsqr(...)
scsum1(...)
sdisna, ddisna(...)
sgbbrd(...)
sgbcon, dgbcon, cgbcon, zgbcon(...)
sgbequ, dgbequ, cgbequ, zgbequ(...)
sgbequb, dgbequb, cgbequb, zgbequb(...)
sgbrfs, dgbrfs, cgbrfs, zgbrfs(...)
sgbrfsx, dgbrfsx, cgbrfsx, zgbrfsx(...)
sgbsv, dgbsv, cgbsv, zgbsv(...)
sgbsvx, dgbsvx, cgbsvx, zgbsvx(...)
sgbsvxx, dgbsvxx, cgbsvxx, zgbsvxx(...)
sgbtf2, dgbtf2, cgbtf2, zgbtf2(...)
sgbtrf, dgbtrf, cgbtrf, zgbtrf(...)
sgbtrs, dgbtrs, cgbtrs, zgbtrs(...)
sgebak, dgebak, cgebak, zgebak(...)
sgebal, dgebal, cgebal, zgebal(...)
sgebd2, dgebd2, cgebd2, zgebd2(...)
sgebrd, dgebrd, cgebrd, zgebrd(...)
sgecon, dgecon, cgecon, zgecon(...)
sgeequ, dgeequ, cgeequ, zgeequ(...)
sgeequb, dgeequb, cgeequb, zgeequb(...)
sgees(...)
sgeesx(...)
sgeev(...)
sgeevx(...)
sgegs(...)
sgegv(...)
sgehd2, dgehd2, cgehd2, zgehd2(...)
sgehrd, dgehrd, cgehrd, zgehrd(...)
sgejsv, dgejsv(...)
sgelq2, dgelq2, cgelq2, zgelq2(...)
sgelqf, dgelqf, cgelqf, zgelqf(...)
sgels, dgels, cgels, zgels(...)
sgelsd(...)
sgelss(...)
sgelsx(...)
sgelsy(...)
sgeql2, dgeql2, cgeql2, zgeql2(...)
sgeqlf, dgeqlf, cgeqlf, zgeqlf(...)
sgeqp3(...)
sgeqpf(...)
sgeqr2, dgeqr2, cgeqr2, zgeqr2(...)
sgeqr2p, dgeqr2p, cgeqr2p, zgeqr2p(...)
sgeqrf, dgeqrf, cgeqrf, zgeqrf(...)
sgeqrfp, dgeqrfp, cgeqrfp, zgeqrfp(...)
sgerfs, dgerfs, cgerfs, zgerfs(...)
sgerfsx, dgerfsx, cgerfsx, zgerfsx(...)
sgerq2, dgerq2, cgerq2, zgerq2(...)
sgerqf, dgerqf, cgerqf, zgerqf(...)
sgesc2, dgesc2, cgesc2, zgesc2(...)
sgesdd(...)
sgesv, dgesv, cgesv, zgesv(...)
sgesvd(...)
sgesvj, dgesvj(...)
sgesvx, dgesvx, cgesvx, zgesvx(...)
sgesvxx, dgesvxx, cgesvxx, zgesvxx(...)
sgetc2, dgetc2, cgetc2, zgetc2(...)
sgetf2, dgetf2, cgetf2, zgetf2(...)
sgetrf, dgetrf, cgetrf, zgetrf(...)
sgetri, dgetri, cgetri, zgetri(...)
sgetrs, dgetrs, cgetrs, zgetrs(...)
sggbak, dggbak, cggbak, zggbak(...)
sggbal, dggbal, cggbal, zggbal(...)
sgges(...)
sggesx(...)
sggev(...)
sggevx(...)
sggglm, dggglm, cggglm, zggglm(...)
sgghrd, dgghrd, cgghrd, zgghrd(...)
sgglse, dgglse, cgglse, zgglse(...)
sggqrf, dggqrf, cggqrf, zggqrf(...)
sggrqf, dggrqf, cggrqf, zggrqf(...)
sggsvd(...)
sggsvp(...)
sgsvj0, dgsvj0(...)
sgsvj1, dgsvj1(...)
sgtcon(...)
sgtrfs, dgtrfs, cgtrfs, zgtrfs(...)
sgtsv, dgtsv, cgtsv, zgtsv(...)
sgtsvx, dgtsvx, cgtsvx, zgtsvx(...)
sgttrf, dgttrf, cgttrf, zgttrf(...)
sgttrs, dgttrs, cgttrs, zgttrs(...)
sgtts2, dgtts2, cgtts2, zgtts2(...)
shgeqz(...)
shsein(...)
shseqr(...)
sisnan, disnan(...)
sla_gbamv, dla_gbamv, cla_gbamv, zla_gbamv(...)
sla_gbrcond, dla_gbrcond(...)
sla_gbrfsx_extended, dla_gbrfsx_extended, cla_gbrfsx_extended, zla_gbrfsx_extended(...)
sla_gbrpvgrw, dla_gbrpvgrw, cla_gbrpvgrw, zla_gbrpvgrw(...)
sla_geamv, dla_geamv, cla_geamv, zla_geamv(...)
sla_gercond, dla_gercond(...)
sla_gerfsx_extended, dla_gerfsx_extended, cla_gerfsx_extended, zla_gerfsx_extended(...)
sla_lin_berr, dla_lin_berr, cla_lin_berr, zla_lin_berr(...)
sla_porcond, dla_porcond(...)
sla_porfsx_extended, dla_porfsx_extended, cla_porfsx_extended, zla_porfsx_extended(...)
sla_porpvgrw, dla_porpvgrw, cla_porpvgrw, zla_porpvgrw(...)
sla_rpvgrw, dla_rpvgrw, cla_rpvgrw, zla_rpvgrw(...)
sla_syamv, dla_syamv, cla_syamv, zla_syamv(...)
sla_syrcond, dla_syrcond(...)
sla_syrfsx_extended, dla_syrfsx_extended, cla_syrfsx_extended, zla_syrfsx_extended(...)
sla_syrpvgrw, dla_syrpvgrw, cla_syrpvgrw, zla_syrpvgrw(...)
sla_wwaddw, dla_wwaddw, cla_wwaddw, zla_wwaddw(...)
slabad, dlabad(...)
slabrd, dlabrd, clabrd, zlabrd(...)
slacn2(...)
slacon(...)
slacpy, dlacpy, clacpy, zlacpy(...)
sladiv(...)
slae2, dlae2(...)
slaebz, dlaebz(...)
slaed0(...)
slaed1, dlaed1(...)
slaed2, dlaed2(...)
slaed3, dlaed3(...)
slaed4, dlaed4(...)
slaed5, dlaed5(...)
slaed6, dlaed6(...)
slaed7(...)
slaed8(...)
slaed9, dlaed9(...)
slaeda, dlaeda(...)
slaein(...)
slaev2, dlaev2, claev2, zlaev2(...)
slaexc, dlaexc(...)
slag2(...)
slag2d(...)
slags2, dlags2, clags2, zlags2(...)
slagtf, dlagtf(...)
slagtm, dlagtm, clagtm, zlagtm(...)
slagts, dlagts(...)
slagv2, dlagv2(...)
slahqr(...)
slahr2, dlahr2, clahr2, zlahr2(...)
slahrd, dlahrd, clahrd, zlahrd(...)
slaic1, dlaic1, claic1, zlaic1(...)
slaisnan, dlaisnan(...)
slaln2, dlaln2(...)
slals0, dlals0, clals0, zlals0(...)
slalsa, dlalsa, clalsa, zlalsa(...)
slalsd(...)
slamrg, dlamrg(...)
slaneg, dlaneg(...)
slangb, dlangb, clangb, zlangb(...)
slange, dlange, clange, zlange(...)
slangt, dlangt, clangt, zlangt(...)
slanhs, dlanhs, clanhs, zlanhs(...)
slansb, dlansb, clansb, zlansb(...)
slansf, dlansf(...)
slansp, dlansp, clansp, zlansp(...)
slanst, dlanst(...)
slansy, dlansy, clansy, zlansy(...)
slantb, dlantb, clantb, zlantb(...)
slantp, dlantp, clantp, zlantp(...)
slantr, dlantr, clantr, zlantr(...)
slanv2, dlanv2(...)
slapll, dlapll, clapll, zlapll(...)
slapmr, dlapmr, clapmr, zlapmr(...)
slapmt, dlapmt, clapmt, zlapmt(...)
slapy2, dlapy2(...)
slapy3, dlapy3(...)
slaqgb, dlaqgb, claqgb, zlaqgb(...)
slaqge, dlaqge, claqge, zlaqge(...)
slaqp2, dlaqp2, claqp2, zlaqp2(...)
slaqps, dlaqps, claqps, zlaqps(...)
slaqr0(...)
slaqr1(...)
slaqr2(...)
slaqr3(...)
slaqr4(...)
slaqr5(...)
slaqsb, dlaqsb, claqsb, zlaqsb(...)
slaqsp, dlaqsp, claqsp, zlaqsp(...)
slaqsy, dlaqsy, claqsy, zlaqsy(...)
slaqtr, dlaqtr(...)
slar1v, dlar1v, clar1v, zlar1v(...)
slar2v, dlar2v, clar2v, zlar2v(...)
slarf, dlarf, clarf, zlarf(...)
slarfb, dlarfb, clarfb, zlarfb(...)
slarfg, dlarfg, clarfg, zlarfg(...)
slarfgp, dlarfgp, clarfgp, zlarfgp(...)
slarft, dlarft, clarft, zlarft(...)
slarfx, dlarfx, clarfx, zlarfx(...)
slargv, dlargv, clargv, zlargv(...)
slarnv, dlarnv, clarnv, zlarnv(...)
slarra, dlarra(...)
slarrb, dlarrb(...)
slarrc, dlarrc(...)
slarrd, dlarrd(...)
slarre, dlarre(...)
slarrf, dlarrf(...)
slarrj, dlarrj(...)
slarrk, dlarrk(...)
slarrr, dlarrr(...)
slarrv, dlarrv, clarrv, zlarrv(...)
slarscl2, dlarscl2, clarscl2, zlarscl2(...)
slartg, dlartg, clartg, zlartg(...)
slartgp, dlartgp(...)
slartgs, dlartgs(...)
slartv, dlartv, clartv, zlartv(...)
slaruv, dlaruv(...)
slarz, dlarz, clarz, zlarz(...)
slarzb, dlarzb, clarzb, zlarzb(...)
slarzt, dlarzt, clarzt, zlarzt(...)
slas2, dlas2(...)
slascl, dlascl, clascl, zlascl(...)
slascl2, dlascl2, clascl2, zlascl2(...)
slasd0, dlasd0(...)
slasd1, dlasd1(...)
slasd2, dlasd2(...)
slasd3, dlasd3(...)
slasd4, dlasd4(...)
slasd5, dlasd5(...)
slasd6, dlasd6(...)
slasd7, dlasd7(...)
slasd8, dlasd8(...)
slasda, dlasda(...)
slasdq, dlasdq(...)
slasdt, dlasdt(...)
slaset, dlaset, claset, zlaset(...)
slasq1, dlasq1(...)
slasq2, dlasq2(...)
slasq3, dlasq3(...)
slasq4, dlasq4(...)
slasq5, dlasq5(...)
slasq6, dlasq6(...)
slasr, dlasr, clasr, zlasr(...)
slasrt, dlasrt(...)
slassq, dlassq, classq, zlassq(...)
slasv2, dlasv2(...)
slaswp, dlaswp, claswp, zlaswp(...)
slasy2, dlasy2(...)
slasyf, dlasyf, clasyf, zlasyf(...)
slatbs, dlatbs, clatbs, zlatbs(...)
slatdf, dlatdf, clatdf, zlatdf(...)
slatps, dlatps, clatps, zlatps(...)
slatrd, dlatrd, clatrd, zlatrd(...)
slatrs, dlatrs, clatrs, zlatrs(...)
slatrz, dlatrz, clatrz, zlatrz(...)
slatzm, dlatzm, clatzm, zlatzm(...)
slauu2, dlauu2, clauu2, zlauu2(...)
slauum, dlauum, clauum, zlauum(...)
sopgtr, dopgtr(...)
sopmtr, dopmtr(...)
sorbdb, dorbdb(...)
sorcsd, dorcsd(...)
sorg2l, dorg2l(...)
sorg2r, dorg2r(...)
sorgbr, dorgbr(...)
sorghr, dorghr(...)
sorgl2, dorgl2(...)
sorglq, dorglq(...)
sorgql, dorgql(...)
sorgqr, dorgqr(...)
sorgr2, dorgr2(...)
sorgrq, dorgrq(...)
sorgtr, dorgtr(...)
sorm2l, dorm2l(...)
sorm2r, dorm2r(...)
sormbr, dormbr(...)
sormhr, dormhr(...)
sorml2, dorml2(...)
sormlq, dormlq(...)
sormql, dormql(...)
sormqr, dormqr(...)
sormr2, dormr2(...)
sormr3, dormr3(...)
sormrq, dormrq(...)
sormrz, dormrz(...)
sormtr, dormtr(...)
spbcon, dpbcon, cpbcon, zpbcon(...)
spbequ, dpbequ, cpbequ, zpbequ(...)
spbrfs, dpbrfs, cpbrfs, zpbrfs(...)
spbstf, dpbstf, cpbstf, zpbstf(...)
spbsv, dpbsv, cpbsv, zpbsv(...)
spbsvx, dpbsvx, cpbsvx, zpbsvx(...)
spbtf2, dpbtf2, cpbtf2, zpbtf2(...)
spbtrf, dpbtrf, cpbtrf, zpbtrf(...)
spbtrs, dpbtrs, cpbtrs, zpbtrs(...)
spftrf, dpftrf, cpftrf, zpftrf(...)
spftri, dpftri, cpftri, zpftri(...)
spftrs, dpftrs, cpftrs, zpftrs(...)
spocon, dpocon, cpocon, zpocon(...)
spoequ, dpoequ, cpoequ, zpoequ(...)
spoequb, dpoequb, cpoequb, zpoequb(...)
sporfs, dporfs, cporfs, zporfs(...)
sporfsx, dporfsx, cporfsx, zporfsx(...)
sposv, dposv, cposv, zposv(...)
sposvx, dposvx, cposvx, zposvx(...)
sposvxx, dposvxx, cposvxx, zposvxx(...)
spotf2, dpotf2, cpotf2, zpotf2(...)
spotrf, dpotrf, cpotrf, zpotrf(...)
spotri, dpotri, cpotri, zpotri(...)
spotrs, dpotrs, cpotrs, zpotrs(...)
sppcon, dppcon, cppcon, zppcon(...)
sppequ, dppequ, cppequ, zppequ(...)
spprfs, dpprfs, cpprfs, zpprfs(...)
sppsv, dppsv, cppsv, zppsv(...)
sppsvx, dppsvx, cppsvx, zppsvx(...)
spptrf, dpptrf, cpptrf, zpptrf(...)
spptri, dpptri, cpptri, zpptri(...)
spptrs, dpptrs, cpptrs, zpptrs(...)
spstf2, dpstf2, cpstf2, zpstf2(...)
spstrf, dpstrf, cpstrf, zpstrf(...)
sptcon, dptcon, cptcon, zptcon(...)
spteqr, dpteqr, cpteqr, zpteqr(...)
sptrfs(...)
sptsv, dptsv, cptsv, zptsv(...)
sptsvx(...)
spttrf, dpttrf, cpttrf, zpttrf(...)
spttrs(...)
sptts2(...)
srscl, drscl(...)
ssbev, dsbev(...)
ssbevd, dsbevd(...)
ssbevx, dsbevx(...)
ssbgst, dsbgst(...)
ssbgv, dsbgv(...)
ssbgvd, dsbgvd(...)
ssbgvx, dsbgvx(...)
ssbtrd, dsbtrd(...)
ssfrk, dsfrk(...)
sspcon(...)
sspev, dspev(...)
sspevd, dspevd(...)
sspevx, dspevx(...)
sspgst, dspgst(...)
sspgv, dspgv(...)
sspgvd, dspgvd(...)
sspgvx, dspgvx(...)
ssprfs, dsprfs, csprfs, zsprfs(...)
sspsv, dspsv, cspsv, zspsv(...)
sspsvx, dspsvx, cspsvx, zspsvx(...)
ssptrd, dsptrd(...)
ssptrf, dsptrf, csptrf, zsptrf(...)
ssptri, dsptri, csptri, zsptri(...)
ssptrs, dsptrs, csptrs, zsptrs(...)
sstebz, dstebz(...)
sstedc(...)
sstegr, dstegr, cstegr, zstegr(...)
sstein, dstein, cstein, zstein(...)
sstemr, dstemr, cstemr, zstemr(...)
ssteqr, dsteqr, csteqr, zsteqr(...)
ssterf, dsterf(...)
sstev, dstev(...)
sstevd, dstevd(...)
sstevr, dstevr(...)
sstevx, dstevx(...)
ssycon(...)
ssyconv, dsyconv, csyconv, zsyconv(...)
ssyequb, dsyequb, csyequb, zsyequb(...)
ssyev, dsyev(...)
ssyevd, dsyevd(...)
ssyevr, dsyevr(...)
ssyevx, dsyevx(...)
ssygs2, dsygs2(...)
ssygst, dsygst(...)
ssygv, dsygv(...)
ssygvd, dsygvd(...)
ssygvx, dsygvx(...)
ssyrfs, dsyrfs, csyrfs, zsyrfs(...)
ssyrfsx, dsyrfsx, csyrfsx, zsyrfsx(...)
ssysv, dsysv, csysv, zsysv(...)
ssysvx, dsysvx, csysvx, zsysvx(...)
ssysvxx, dsysvxx, csysvxx, zsysvxx(...)
ssyswapr, dsyswapr, csyswapr, zsyswapr(...)
ssytd2, dsytd2(...)
ssytf2, dsytf2, csytf2, zsytf2(...)
ssytrd, dsytrd(...)
ssytrf, dsytrf, csytrf, zsytrf(...)
ssytri, dsytri, csytri, zsytri(...)
ssytri2, dsytri2, csytri2, zsytri2(...)
ssytri2x, dsytri2x, csytri2x, zsytri2x(...)
ssytrs, dsytrs, csytrs, zsytrs(...)
ssytrs2, dsytrs2, csytrs2, zsytrs2(...)
stbcon, dtbcon, ctbcon, ztbcon(...)
stbrfs, dtbrfs, ctbrfs, ztbrfs(...)
stbtrs, dtbtrs, ctbtrs, ztbtrs(...)
stfsm, dtfsm, ctfsm, ztfsm(...)
stftri, dtftri, ctftri, ztftri(...)
stfttp, dtfttp, ctfttp, ztfttp(...)
stfttr, dtfttr, ctfttr, ztfttr(...)
stgevc(...)
stgex2(...)
stgexc(...)
stgsen(...)
stgsja, dtgsja, ctgsja, ztgsja(...)
stgsna, dtgsna, ctgsna, ztgsna(...)
stgsy2(...)
stgsyl, dtgsyl, ctgsyl, ztgsyl(...)
stpcon, dtpcon, ctpcon, ztpcon(...)
stprfs, dtprfs, ctprfs, ztprfs(...)
stptri, dtptri, ctptri, ztptri(...)
stptrs, dtptrs, ctptrs, ztptrs(...)
stpttf, dtpttf, ctpttf, ztpttf(...)
stpttr, dtpttr, ctpttr, ztpttr(...)
strcon, dtrcon, ctrcon, ztrcon(...)
strevc(...)
strexc(...)
strrfs, dtrrfs, ctrrfs, ztrrfs(...)
strsen(...)
strsna, dtrsna, ctrsna, ztrsna(...)
strsyl, dtrsyl, ctrsyl, ztrsyl(...)
strti2, dtrti2, ctrti2, ztrti2(...)
strtri, dtrtri, ctrtri, ztrtri(...)
strtrs, dtrtrs, ctrtrs, ztrtrs(...)
strttf, dtrttf, ctrttf, ztrttf(...)
strttp, dtrttp, ctrttp, ztrttp(...)
stzrqf, dtzrqf, ctzrqf, ztzrqf(...)
stzrzf, dtzrzf, ctzrzf, ztzrzf(...)
zcgesv(...)
zcposv(...)
zdrscl(...)
zgbbrd(...)
zgees(...)
zgeesx(...)
zgeev(...)
zgeevx(...)
zgegs(...)
zgegv(...)
zgelsd(...)
zgelss(...)
zgelsx(...)
zgelsy(...)
zgeqp3(...)
zgeqpf(...)
zgesdd(...)
zgesvd(...)
zgges(...)
zggesx(...)
zggev(...)
zggevx(...)
zggsvd(...)
zggsvp(...)
zgtcon(...)
zhgeqz(...)
zhsein(...)
zhseqr(...)
zlacn2(...)
zlacon(...)
zladiv(...)
zlaed0(...)
zlaed7(...)
zlaed8(...)
zlaein(...)
zlag2c(...)
zlahqr(...)
zlalsd(...)
zlaqr0(...)
zlaqr1(...)
zlaqr2(...)
zlaqr3(...)
zlaqr4(...)
zlaqr5(...)
zlat2c(...)
zptrfs(...)
zptsvx(...)
zpttrs(...)
zptts2(...)
zspcon(...)
zstedc(...)
zsycon(...)
ztgevc(...)
ztgex2(...)
ztgexc(...)
ztgsen(...)
ztgsy2(...)
ztrevc(...)
ztrexc(...)
ztrsen(...)

Data Types
----------
fw_character
fw_character_x1
fw_character_xX
fw_shape
fwc_complex
fwc_complex_x16
fwc_dbl_complex
fwi_integer
fwl_logical
fwr_dbl
fwr_real

"""
np.import_array()
include 'fwrap_ktp.pxi'
cdef extern from "string.h":
    void *memcpy(void *dest, void *src, size_t n)
cpdef api object cgbbrd(object vect, fwi_integer_t m, fwi_integer_t n, fwi_integer_t ncc, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object d, object e, object q, fwi_integer_t ldq, object pt, fwi_integer_t ldpt, object c, fwi_integer_t ldc, object work, object rwork, fwi_integer_t info):
    """cgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info[, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info]) -> (vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwc_complex, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwc_complex, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwc_complex, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwc_complex, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwc_complex, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwc_complex, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray pt_
    cdef fw_shape_t pt_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, fwc_complex_t_enum, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    pt_, pt = fw_asfortranarray(pt, fwc_complex_t_enum, 2, False)
    fw_copyshape(pt_shape_, np.PyArray_DIMS(pt_), 2)
    if ldpt != pt_shape_[0]:
        raise ValueError("(ldpt == pt.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwc_complex_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    cgbbrd_c(fw_vect, &m, &n, &ncc, &kl, &ku, ab_shape_, <fwc_complex_t*>np.PyArray_DATA(ab_), &ldab, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, pt_shape_, <fwc_complex_t*>np.PyArray_DATA(pt_), &ldpt, c_shape_, <fwc_complex_t*>np.PyArray_DATA(c_), &ldc, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgbbrd' wrapper.")
    return (fw_vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info,)


cpdef api object cgees(object jobvs, object sort, bint select, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object w, object vs, fwi_integer_t ldvs, object work, fwi_integer_t lwork, object rwork, object bwork, fwi_integer_t info):
    """cgees(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info[, jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info]) -> (jobvs, sort, select_, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vs : fwc_complex, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vs : fwc_complex, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vs_, vs = fw_asfortranarray(vs, fwc_complex_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    cgees_c(fw_jobvs, fw_sort, &select_, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, &sdim, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), vs_shape_, <fwc_complex_t*>np.PyArray_DATA(vs_), &ldvs, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgees' wrapper.")
    return (fw_jobvs, fw_sort, select_, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info,)


cpdef api object cgeesx(object jobvs, object sort, bint select, object sense, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object w, object vs, fwi_integer_t ldvs, fwr_real_t rconde, fwr_real_t rcondv, object work, fwi_integer_t lwork, object rwork, object bwork, fwi_integer_t info):
    """cgeesx(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info[, jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info]) -> (jobvs, sort, select_, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vs : fwc_complex, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_real, intent inout
    rcondv : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vs : fwc_complex, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_real, intent inout
    rcondv : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vs_, vs = fw_asfortranarray(vs, fwc_complex_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    cgeesx_c(fw_jobvs, fw_sort, &select_, fw_sense, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, &sdim, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), vs_shape_, <fwc_complex_t*>np.PyArray_DATA(vs_), &ldvs, &rconde, &rcondv, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgeesx' wrapper.")
    return (fw_jobvs, fw_sort, select_, fw_sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info,)


cpdef api object cgeev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object w, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgeev(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info[, jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info]) -> (jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    cgeev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgeev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info,)


cpdef api object cgeevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object w, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object scale, fwr_real_t abnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgeevx(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray scale_
    cdef fw_shape_t scale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    scale_, scale = fw_asfortranarray(scale, fwr_real_t_enum, 1, False)
    fw_copyshape(scale_shape_, np.PyArray_DIMS(scale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_real_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_real_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    cgeevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, scale_shape_, <fwr_real_t*>np.PyArray_DATA(scale_), &abnrm, rconde_shape_, <fwr_real_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_real_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgeevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info,)


cpdef api object cgegs(object jobvsl, object jobvsr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info[, jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info]) -> (jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vsl : fwc_complex, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vsl : fwc_complex, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    cgegs_c(fw_jobvsl, fw_jobvsr, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwc_complex_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwc_complex_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgegs' wrapper.")
    return (fw_jobvsl, fw_jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info,)


cpdef api object cgegv(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgegv(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    cgegv_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgegv' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info,)


cpdef api object cgelsd(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object rwork, object iwork, fwi_integer_t info):
    """cgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    cgelsd_c(&m, &n, &nrhs, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgelsd' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info,)


cpdef api object cgelss(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    cgelss_c(&m, &n, &nrhs, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgelss' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info,)


cpdef api object cgelsx(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_real_t rcond, fwi_integer_t rank, object work, object rwork, fwi_integer_t info):
    """cgelsx(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    cgelsx_c(&m, &n, &nrhs, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgelsx' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info,)


cpdef api object cgelsy(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    cgelsy_c(&m, &n, &nrhs, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgelsy' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info,)


cpdef api object cgeqp3(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgeqp3(m, n, a, lda, jpvt, tau, work, lwork, rwork, info[, m, n, a, lda, jpvt, tau, work, lwork, rwork, info]) -> (m, n, a, lda, jpvt, tau, work, lwork, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwc_complex_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    cgeqp3_c(&m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwc_complex_t*>np.PyArray_DATA(tau_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgeqp3' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, lwork, rwork, info,)


cpdef api object cgeqpf(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, object rwork, fwi_integer_t info):
    """cgeqpf(m, n, a, lda, jpvt, tau, work, rwork, info[, m, n, a, lda, jpvt, tau, work, rwork, info]) -> (m, n, a, lda, jpvt, tau, work, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwc_complex_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    cgeqpf_c(&m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwc_complex_t*>np.PyArray_DATA(tau_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgeqpf' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, rwork, info,)


cpdef api object cgesdd(object jobz, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, object rwork, object iwork, fwi_integer_t info):
    """cgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info[, jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info]) -> (jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwc_complex_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwc_complex_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    cgesdd_c(fw_jobz, &m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), u_shape_, <fwc_complex_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwc_complex_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgesdd' wrapper.")
    return (fw_jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info,)


cpdef api object cgesvd(object jobu, object jobvt, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info[, jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info]) -> (jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobvt = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwc_complex_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwc_complex_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobvt[0] = fw_aschar(jobvt)
    if fw_jobvt[0] == 0:
        raise ValueError("len(jobvt) != 1")
    cgesvd_c(fw_jobu, fw_jobvt, &m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), u_shape_, <fwc_complex_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwc_complex_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgesvd' wrapper.")
    return (fw_jobu, fw_jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info,)


cpdef api object cgges(object jobvsl, object jobvsr, object sort, bint selctg, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alpha, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, object rwork, object bwork, fwi_integer_t info):
    """cgges(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info[, jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vsl : fwc_complex, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vsl : fwc_complex, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    cgges_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, &sdim, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwc_complex_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwc_complex_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgges' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info,)


cpdef api object cggesx(object jobvsl, object jobvsr, object sort, bint selctg, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alpha, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object rconde, object rcondv, object work, fwi_integer_t lwork, object rwork, object iwork, fwi_integer_t liwork, object bwork, fwi_integer_t info):
    """cggesx(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info[, jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vsl : fwc_complex, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_real, 1D array, dimension(2), intent inout
    rcondv : fwr_real, 1D array, dimension(2), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vsl : fwc_complex, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_real, 1D array, dimension(2), intent inout
    rcondv : fwr_real, 1D array, dimension(2), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    rconde_, rconde = fw_asfortranarray(rconde, fwr_real_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    if not (0 <= 2 <= rconde_shape_[0]):
        raise ValueError("(0 <= 2 <= rconde.shape[0]) not satisifed")
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_real_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    if not (0 <= 2 <= rcondv_shape_[0]):
        raise ValueError("(0 <= 2 <= rcondv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    cggesx_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, fw_sense, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, &sdim, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwc_complex_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwc_complex_t*>np.PyArray_DATA(vsr_), &ldvsr, rconde_shape_, <fwr_real_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_real_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cggesx' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, fw_sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info,)


cpdef api object cggev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """cggev(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    cggev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cggev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info,)


cpdef api object cggevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object lscale, object rscale, fwr_real_t abnrm, fwr_real_t bbnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object rwork, object iwork, object bwork, fwi_integer_t info):
    """cggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_real, 1D array, dimension(*), intent inout
    rscale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    bbnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_real, 1D array, dimension(*), intent inout
    rscale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    bbnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray lscale_
    cdef fw_shape_t lscale_shape_[1]
    cdef np.ndarray rscale_
    cdef fw_shape_t rscale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    lscale_, lscale = fw_asfortranarray(lscale, fwr_real_t_enum, 1, False)
    fw_copyshape(lscale_shape_, np.PyArray_DIMS(lscale_), 1)
    rscale_, rscale = fw_asfortranarray(rscale, fwr_real_t_enum, 1, False)
    fw_copyshape(rscale_shape_, np.PyArray_DIMS(rscale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_real_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_real_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    cggevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, lscale_shape_, <fwr_real_t*>np.PyArray_DATA(lscale_), rscale_shape_, <fwr_real_t*>np.PyArray_DATA(rscale_), &abnrm, &bbnrm, rconde_shape_, <fwr_real_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_real_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cggevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info,)


cpdef api object cggsvd(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t n, fwi_integer_t p, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object work, object rwork, object iwork, fwi_integer_t info):
    """cggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info[, jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info]) -> (jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwr_real_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    u_, u = fw_asfortranarray(u, fwc_complex_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    cggsvd_c(fw_jobu, fw_jobv, fw_jobq, &m, &n, &p, &k, &l, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwr_real_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), u_shape_, <fwc_complex_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cggsvd' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info,)


cpdef api object cggsvp(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t p, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwr_real_t tola, fwr_real_t tolb, fwi_integer_t k, fwi_integer_t l, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object iwork, object rwork, object tau, object work, fwi_integer_t info):
    """cggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info[, jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info]) -> (jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_real, intent inout
    tolb : fwr_real, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    tau : fwc_complex, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_real, intent inout
    tolb : fwr_real, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    tau : fwc_complex, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwc_complex_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    tau_, tau = fw_asfortranarray(tau, fwc_complex_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    cggsvp_c(fw_jobu, fw_jobv, fw_jobq, &m, &p, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, &tola, &tolb, &k, &l, u_shape_, <fwc_complex_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), tau_shape_, <fwc_complex_t*>np.PyArray_DATA(tau_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cggsvp' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info,)


cpdef api object cgtcon(object norm, fwi_integer_t n, object dl, object d, object du, object du2, object ipiv, fwr_real_t anorm, fwr_real_t rcond, object work, fwi_integer_t info):
    """cgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info[, norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info]) -> (norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwc_complex, 1D array, dimension(*), intent inout
    d : fwc_complex, 1D array, dimension(*), intent inout
    du : fwc_complex, 1D array, dimension(*), intent inout
    du2 : fwc_complex, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwc_complex, 1D array, dimension(*), intent inout
    d : fwc_complex, 1D array, dimension(*), intent inout
    du : fwc_complex, 1D array, dimension(*), intent inout
    du2 : fwc_complex, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, fwc_complex_t_enum, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, fwc_complex_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, fwc_complex_t_enum, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, fwc_complex_t_enum, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    cgtcon_c(fw_norm, &n, dl_shape_, <fwc_complex_t*>np.PyArray_DATA(dl_), d_shape_, <fwc_complex_t*>np.PyArray_DATA(d_), du_shape_, <fwc_complex_t*>np.PyArray_DATA(du_), du2_shape_, <fwc_complex_t*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cgtcon' wrapper.")
    return (fw_norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbev_c', 'zhbev_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbev', 'zhbev'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object w, object z, fwi_integer_t ldz, object work, object rwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info[, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info]) -> (jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbevd_c', 'zhbevd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbevd', 'zhbevd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info[, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbevx_c', 'zhbevx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbevx', 'zhbevx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object q, fwi_integer_t ldq, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object rwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info[, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info]) -> (jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbgst_c', 'zhbgst_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbgst', 'zhbgst'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object vect, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object x, fwi_integer_t ldx, object work, object rwork, fwi_integer_t info):
    """{{name}}(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info[, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info]) -> (vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_vect, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbgv_c', 'zhbgv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbgv', 'zhbgv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object w, object z, fwi_integer_t ldz, object work, object rwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info[, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info]) -> (jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbgvd_c', 'zhbgvd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbgvd', 'zhbgvd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info[, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbgvx_c', 'zhbgvx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbgvx', 'zhbgvx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object q, fwi_integer_t ldq, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object rwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info[, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info]) -> (jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chbtrd_c', 'zhbtrd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chbtrd', 'zhbtrd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object vect, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object d, object e, object q, fwi_integer_t ldq, object work, fwi_integer_t info):
    """{{name}}(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info[, vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info]) -> (vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info)

    Parameters
    ----------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_vect, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, fw_uplo, n, kd, ab, ldab, d, e, q, ldq, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['checon_c', 'zhecon_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['checon', 'zhecon'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, {{ktp2}} anorm, {{ktp2}} rcond, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, anorm, rcond, work, info[, uplo, n, a, lda, ipiv, anorm, rcond, work, info]) -> (uplo, n, a, lda, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, anorm, rcond, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cheequb_c', 'zheequb_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cheequb', 'zheequb'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object s, {{ktp2}} scond, {{ktp2}} amax, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, s, scond, amax, work, info[, uplo, n, a, lda, s, scond, amax, work, info]) -> (uplo, n, a, lda, s, scond, amax, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, s, scond, amax, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cheev_c', 'zheev_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cheev', 'zheev'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object w, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, a, lda, w, work, lwork, rwork, info[, jobz, uplo, n, a, lda, w, work, lwork, rwork, info]) -> (jobz, uplo, n, a, lda, w, work, lwork, rwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, a, lda, w, work, lwork, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cheevd_c', 'zheevd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cheevd', 'zheevd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object w, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info[, jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cheevr_c', 'zheevr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cheevr', 'zheevr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object isuppz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info[, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cheevx_c', 'zheevx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cheevx', 'zheevx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info[, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info]) -> (jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chegs2_c', 'zhegs2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chegs2', 'zhegs2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(itype, uplo, n, a, lda, b, ldb, info[, itype, uplo, n, a, lda, b, ldb, info]) -> (itype, uplo, n, a, lda, b, ldb, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_uplo, n, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chegst_c', 'zhegst_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chegst', 'zhegst'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(itype, uplo, n, a, lda, b, ldb, info[, itype, uplo, n, a, lda, b, ldb, info]) -> (itype, uplo, n, a, lda, b, ldb, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_uplo, n, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chegv_c', 'zhegv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chegv', 'zhegv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object w, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info[, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info]) -> (itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chegvd_c', 'zhegvd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chegvd', 'zhegvd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object w, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info[, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chegvx_c', 'zhegvx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chegvx', 'zhegvx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object range, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info[, itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info]) -> (itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_range, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_range, fw_uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cherfs_c', 'zherfs_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cherfs', 'zherfs'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info[, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info]) -> (uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cherfsx_c', 'zherfsx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cherfsx', 'zherfsx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object equed, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object rwork, fwi_integer_t info):
    """{{name}}(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info[, uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info]) -> (uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, fw_equed, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chesv_c', 'zhesv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chesv', 'zhesv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info[, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info]) -> (uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chesvx_c', 'zhesvx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chesvx', 'zhesvx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info[, fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info]) -> (fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chesvxx_c', 'zhesvxx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chesvxx', 'zhesvxx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object equed, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, {{ktp2}} rpvgrw, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object rwork, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info[, fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info]) -> (fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), fw_equed, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, &rpvgrw, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, fw_equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chetd2_c', 'zhetd2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chetd2', 'zhetd2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object d, object e, object tau, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, d, e, tau, info[, uplo, n, a, lda, d, e, tau, info]) -> (uplo, n, a, lda, d, e, tau, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, d, e, tau, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chetf2_c', 'zhetf2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chetf2', 'zhetf2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, info[, uplo, n, a, lda, ipiv, info]) -> (uplo, n, a, lda, ipiv, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chetrd_c', 'zhetrd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chetrd', 'zhetrd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object d, object e, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, d, e, tau, work, lwork, info[, uplo, n, a, lda, d, e, tau, work, lwork, info]) -> (uplo, n, a, lda, d, e, tau, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, d, e, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chetrf_c', 'zhetrf_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chetrf', 'zhetrf'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, work, lwork, info[, uplo, n, a, lda, ipiv, work, lwork, info]) -> (uplo, n, a, lda, ipiv, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chetri_c', 'zhetri_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chetri', 'zhetri'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, work, info[, uplo, n, a, lda, ipiv, work, info]) -> (uplo, n, a, lda, ipiv, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chetrs_c', 'zhetrs_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chetrs', 'zhetrs'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, ipiv, b, ldb, info[, uplo, n, nrhs, a, lda, ipiv, b, ldb, info]) -> (uplo, n, nrhs, a, lda, ipiv, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chetrs2_c', 'zhetrs2_c'],
             ['fwc_complex_t', 'fwc_dbl_complex_t'],
             ['chetrs2', 'zhetrs2'],
             ['fwc_complex_t_enum', 'fwc_dbl_complex_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, object work, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info[, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info]) -> (uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['chfrk_c', 'zhfrk_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chfrk', 'zhfrk'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, object trans, fwi_integer_t n, fwi_integer_t k, {{ktp}} alpha, object a, fwi_integer_t lda, {{ktp}} beta, object c):
    """{{name}}(transr, uplo, trans, n, k, alpha, a, lda, beta, c[, transr, uplo, trans, n, k, alpha, a, lda, beta, c]) -> (transr, uplo, trans, n, k, alpha, a, lda, beta, c)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_transr, fw_uplo, fw_trans, &n, &k, &alpha, a_shape_, <{{ktp2}}*>np.PyArray_DATA(a_), &lda, &beta, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, fw_trans, n, k, alpha, a, lda, beta, c,)
{{endfor}}


cpdef api object chgeqz(object job, object compq, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object t, fwi_integer_t ldt, object alpha, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """chgeqz(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info[, job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info]) -> (job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwc_complex_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    chgeqz_c(fw_job, fw_compq, fw_compz, &n, &ilo, &ihi, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, t_shape_, <fwc_complex_t*>np.PyArray_DATA(t_), &ldt, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'chgeqz' wrapper.")
    return (fw_job, fw_compq, fw_compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info,)


cpdef api object chla_transtype(fwi_integer_t trans):
    """chla_transtype(trans[, trans]) -> (fw_ret_arg, trans)

    Parameters
    ----------
    trans : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : object_, intent out
    trans : fwi_integer, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef char *fw_fw_ret_arg = [0, 0]
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    chla_transtype_c(fw_fw_ret_arg, &trans, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'chla_transtype' wrapper.")
    return (fw_fw_ret_arg, trans,)


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['chpcon_c', 'zhpcon_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpcon', 'zhpcon'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object ipiv, {{ktp2}} anorm, {{ktp2}} rcond, object work, fwi_integer_t info):
    """{{name}}(uplo, n, ap, ipiv, anorm, rcond, work, info[, uplo, n, ap, ipiv, anorm, rcond, work, info]) -> (uplo, n, ap, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, ipiv, anorm, rcond, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpev_c', 'zhpev_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpev', 'zhpev'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object ap, object w, object z, fwi_integer_t ldz, object work, object rwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ap, w, z, ldz, work, rwork, info[, jobz, uplo, n, ap, w, z, ldz, work, rwork, info]) -> (jobz, uplo, n, ap, w, z, ldz, work, rwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ap, w, z, ldz, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpevd_c', 'zhpevd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpevd', 'zhpevd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object ap, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info[, jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpevx_c', 'zhpevx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpevx', 'zhpevx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, object ap, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object rwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info[, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info]) -> (jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chpgst_c', 'zhpgst_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chpgst', 'zhpgst'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object uplo, fwi_integer_t n, object ap, object bp, fwi_integer_t info):
    """{{name}}(itype, uplo, n, ap, bp, info[, itype, uplo, n, ap, bp, info]) -> (itype, uplo, n, ap, bp, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_uplo, n, ap, bp, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpgv_c', 'zhpgv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpgv', 'zhpgv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object ap, object bp, object w, object z, fwi_integer_t ldz, object work, object rwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info[, itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info]) -> (itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, ap, bp, w, z, ldz, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpgvd_c', 'zhpgvd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpgvd', 'zhpgvd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object ap, object bp, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info[, itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpgvx_c', 'zhpgvx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpgvx', 'zhpgvx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object range, object uplo, fwi_integer_t n, object ap, object bp, {{ktp2}} vl, {{ktp2}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp2}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object rwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info[, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info]) -> (itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp2}}_, intent inout
    vu : {{ktp2}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp2}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp2}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum2}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_range, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp2}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_range, fw_uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chprfs_c', 'zhprfs_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chprfs', 'zhprfs'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object afp, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info[, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info]) -> (uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray afp_
    cdef fw_shape_t afp_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    afp_, afp = fw_asfortranarray(afp, {{npy_enum}}, 1, False)
    fw_copyshape(afp_shape_, np.PyArray_DIMS(afp_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), afp_shape_, <{{ktp}}*>np.PyArray_DATA(afp_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chpsv_c', 'zhpsv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chpsv', 'zhpsv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, ipiv, b, ldb, info[, uplo, n, nrhs, ap, ipiv, b, ldb, info]) -> (uplo, n, nrhs, ap, ipiv, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chpsvx_c', 'zhpsvx_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chpsvx', 'zhpsvx'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object afp, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info[, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info]) -> (fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray afp_
    cdef fw_shape_t afp_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    afp_, afp = fw_asfortranarray(afp, {{npy_enum}}, 1, False)
    fw_copyshape(afp_shape_, np.PyArray_DIMS(afp_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), afp_shape_, <{{ktp}}*>np.PyArray_DATA(afp_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['chptrd_c', 'zhptrd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['chptrd', 'zhptrd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object d, object e, object tau, fwi_integer_t info):
    """{{name}}(uplo, n, ap, d, e, tau, info[, uplo, n, ap, d, e, tau, info]) -> (uplo, n, ap, d, e, tau, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, d, e, tau, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chptrf_c', 'zhptrf_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chptrf', 'zhptrf'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object ipiv, fwi_integer_t info):
    """{{name}}(uplo, n, ap, ipiv, info[, uplo, n, ap, ipiv, info]) -> (uplo, n, ap, ipiv, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chptri_c', 'zhptri_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chptri', 'zhptri'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object ipiv, object work, fwi_integer_t info):
    """{{name}}(uplo, n, ap, ipiv, work, info[, uplo, n, ap, ipiv, work, info]) -> (uplo, n, ap, ipiv, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, ipiv, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['chptrs_c', 'zhptrs_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['chptrs', 'zhptrs'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, ipiv, b, ldb, info[, uplo, n, nrhs, ap, ipiv, b, ldb, info]) -> (uplo, n, nrhs, ap, ipiv, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, ipiv, b, ldb, info,)
{{endfor}}


cpdef api object chsein(object side, object eigsrc, object initv, object select, fwi_integer_t n, object h, fwi_integer_t ldh, object w, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object rwork, object ifaill, object ifailr, fwi_integer_t info):
    """chsein(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info[, side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info]) -> (side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info)

    Parameters
    ----------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_eigsrc = [0, 0]
    cdef char *fw_initv = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray ifaill_
    cdef fw_shape_t ifaill_shape_[1]
    cdef np.ndarray ifailr_
    cdef fw_shape_t ifailr_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    ifaill_, ifaill = fw_asfortranarray(ifaill, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifaill_shape_, np.PyArray_DIMS(ifaill_), 1)
    ifailr_, ifailr = fw_asfortranarray(ifailr, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifailr_shape_, np.PyArray_DIMS(ifailr_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_eigsrc[0] = fw_aschar(eigsrc)
    if fw_eigsrc[0] == 0:
        raise ValueError("len(eigsrc) != 1")
    fw_initv[0] = fw_aschar(initv)
    if fw_initv[0] == 0:
        raise ValueError("len(initv) != 1")
    chsein_c(fw_side, fw_eigsrc, fw_initv, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), ifaill_shape_, <fwi_integer_t*>np.PyArray_DATA(ifaill_), ifailr_shape_, <fwi_integer_t*>np.PyArray_DATA(ifailr_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'chsein' wrapper.")
    return (fw_side, fw_eigsrc, fw_initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info,)


cpdef api object chseqr(object job, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """chseqr(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info[, job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info]) -> (job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    chseqr_c(fw_job, fw_compz, &n, &ilo, &ihi, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'chseqr' wrapper.")
    return (fw_job, fw_compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_gbrcond_c_c', 'zla_gbrcond_c_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_gbrcond_c', 'zla_gbrcond_c'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, object c, fwl_logical_t capply, fwi_integer_t info, object work, object rwork):
    """{{name}}(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork[, trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork]) -> (fw_ret_arg, trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(&fw_ret_arg, fw_trans, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &capply, &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_gbrcond_x_c', 'zla_gbrcond_x_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_gbrcond_x', 'zla_gbrcond_x'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, object x, fwi_integer_t info, object work, object rwork):
    """{{name}}(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork[, trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork]) -> (fw_ret_arg, trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(&fw_ret_arg, fw_trans, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_gercond_c_c', 'zla_gercond_c_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_gercond_c', 'zla_gercond_c'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object c, fwl_logical_t capply, fwi_integer_t info, object work, object rwork):
    """{{name}}(trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork[, trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork]) -> (fw_ret_arg, trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    trans : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(&fw_ret_arg, fw_trans, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &capply, &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_gercond_x_c', 'zla_gercond_x_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_gercond_x', 'zla_gercond_x'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object x, fwi_integer_t info, object work, object rwork):
    """{{name}}(trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork[, trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork]) -> (fw_ret_arg, trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    trans : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(&fw_ret_arg, fw_trans, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_heamv_c', 'zla_heamv_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cla_heamv', 'zla_heamv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t uplo, fwi_integer_t n, {{ktp}} alpha, object a, fwi_integer_t lda, object x, fwi_integer_t incx, {{ktp}} beta, object y, fwi_integer_t incy):
    """{{name}}(uplo, n, alpha, a, lda, x, incx, beta, y, incy[, uplo, n, alpha, a, lda, x, incx, beta, y, incy]) -> (uplo, n, alpha, a, lda, x, incx, beta, y, incy)

    Parameters
    ----------
    uplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    Returns
    -------
    uplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum2}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    {{fc_name}}(&uplo, &n, &alpha, a_shape_, <{{ktp2}}*>np.PyArray_DATA(a_), &lda, x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &incx, &beta, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (uplo, n, alpha, a, lda, x, incx, beta, y, incy,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_hercond_c_c', 'zla_hercond_c_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_hercond_c', 'zla_hercond_c'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object c, fwl_logical_t capply, fwi_integer_t info, object work, object rwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork[, uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &capply, &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_hercond_x_c', 'zla_hercond_x_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_hercond_x', 'zla_hercond_x'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object x, fwi_integer_t info, object work, object rwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork[, uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_herfsx_extended_c', 'zla_herfsx_extended_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_herfsx_extended', 'zla_herfsx_extended'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t prec_type, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, fwl_logical_t colequ, object c, object b, fwi_integer_t ldb, object y, fwi_integer_t ldy, object berr_out, fwi_integer_t n_norms, object err_bnds_norm, object err_bnds_comp, object res, object ayb, object dy, object y_tail, {{ktp2}} rcond, fwi_integer_t ithresh, {{ktp2}} rthresh, {{ktp2}} dz_ub, fwl_logical_t ignore_cwise, fwi_integer_t info):
    """{{name}}(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info[, prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info]) -> (prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)

    Parameters
    ----------
    prec_type : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    prec_type : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef np.ndarray berr_out_
    cdef fw_shape_t berr_out_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray res_
    cdef fw_shape_t res_shape_[1]
    cdef np.ndarray ayb_
    cdef fw_shape_t ayb_shape_[1]
    cdef np.ndarray dy_
    cdef fw_shape_t dy_shape_[1]
    cdef np.ndarray y_tail_
    cdef fw_shape_t y_tail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    berr_out_, berr_out = fw_asfortranarray(berr_out, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_out_shape_, np.PyArray_DIMS(berr_out_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    res_, res = fw_asfortranarray(res, {{npy_enum}}, 1, False)
    fw_copyshape(res_shape_, np.PyArray_DIMS(res_), 1)
    ayb_, ayb = fw_asfortranarray(ayb, {{npy_enum2}}, 1, False)
    fw_copyshape(ayb_shape_, np.PyArray_DIMS(ayb_), 1)
    dy_, dy = fw_asfortranarray(dy, {{npy_enum}}, 1, False)
    fw_copyshape(dy_shape_, np.PyArray_DIMS(dy_), 1)
    y_tail_, y_tail = fw_asfortranarray(y_tail, {{npy_enum}}, 1, False)
    fw_copyshape(y_tail_shape_, np.PyArray_DIMS(y_tail_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&prec_type, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &colequ, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, berr_out_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_out_), &n_norms, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), res_shape_, <{{ktp}}*>np.PyArray_DATA(res_), ayb_shape_, <{{ktp2}}*>np.PyArray_DATA(ayb_), dy_shape_, <{{ktp}}*>np.PyArray_DATA(dy_), y_tail_shape_, <{{ktp}}*>np.PyArray_DATA(y_tail_), &rcond, &ithresh, &rthresh, &dz_ub, &ignore_cwise, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (prec_type, fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_herpvgrw_c', 'zla_herpvgrw_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_herpvgrw', 'zla_herpvgrw'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t info, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object work):
    """{{name}}(uplo, n, info, a, lda, af, ldaf, ipiv, work[, uplo, n, info, a, lda, af, ldaf, ipiv, work]) -> (fw_ret_arg, uplo, n, info, a, lda, af, ldaf, ipiv, work)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    info : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    info : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, &info, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, info, a, lda, af, ldaf, ipiv, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_porcond_c_c', 'zla_porcond_c_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_porcond_c', 'zla_porcond_c'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object c, fwl_logical_t capply, fwi_integer_t info, object work, object rwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork[, uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &capply, &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_porcond_x_c', 'zla_porcond_x_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_porcond_x', 'zla_porcond_x'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object x, fwi_integer_t info, object work, object rwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, x, info, work, rwork[, uplo, n, a, lda, af, ldaf, x, info, work, rwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, x, info, work, rwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, x, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_syrcond_c_c', 'zla_syrcond_c_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_syrcond_c', 'zla_syrcond_c'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object c, fwl_logical_t capply, fwi_integer_t info, object work, object rwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork[, uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    capply : fwl_logical, intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &capply, &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cla_syrcond_x_c', 'zla_syrcond_x_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cla_syrcond_x', 'zla_syrcond_x'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object x, fwi_integer_t info, object work, object rwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork[, uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['clacgv_c', 'zlacgv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['clacgv', 'zlacgv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, fwi_integer_t incx):
    """{{name}}(n, x, incx[, n, x, incx]) -> (n, x, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, incx,)
{{endfor}}


cpdef api object clacn2(fwi_integer_t n, object v, object x, fwr_real_t est, fwi_integer_t kase, object isave):
    """clacn2(n, v, x, est, kase, isave[, n, v, x, est, kase, isave]) -> (n, v, x, est, kase, isave)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwc_complex, 1D array, dimension(*), intent inout
    x : fwc_complex, 1D array, dimension(*), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwc_complex, 1D array, dimension(*), intent inout
    x : fwc_complex, 1D array, dimension(*), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray isave_
    cdef fw_shape_t isave_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    x_, x = fw_asfortranarray(x, fwc_complex_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    isave_, isave = fw_asfortranarray(isave, fwi_integer_t_enum, 1, False)
    fw_copyshape(isave_shape_, np.PyArray_DIMS(isave_), 1)
    if not (0 <= 3 <= isave_shape_[0]):
        raise ValueError("(0 <= 3 <= isave.shape[0]) not satisifed")
    clacn2_c(&n, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), x_shape_, <fwc_complex_t*>np.PyArray_DATA(x_), &est, &kase, isave_shape_, <fwi_integer_t*>np.PyArray_DATA(isave_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'clacn2' wrapper.")
    return (n, v, x, est, kase, isave,)


cpdef api object clacon(fwi_integer_t n, object v, object x, fwr_real_t est, fwi_integer_t kase):
    """clacon(n, v, x, est, kase[, n, v, x, est, kase]) -> (n, v, x, est, kase)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwc_complex, 1D array, dimension(n), intent inout
    x : fwc_complex, 1D array, dimension(n), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwc_complex, 1D array, dimension(n), intent inout
    x : fwc_complex, 1D array, dimension(n), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    if not (0 <= n <= v_shape_[0]):
        raise ValueError("(0 <= n <= v.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    if not (0 <= n <= x_shape_[0]):
        raise ValueError("(0 <= n <= x.shape[0]) not satisifed")
    clacon_c(&n, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), x_shape_, <fwc_complex_t*>np.PyArray_DATA(x_), &est, &kase, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'clacon' wrapper.")
    return (n, v, x, est, kase,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clacp2_c', 'zlacp2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['clacp2', 'zlacp2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb):
    """{{name}}(uplo, m, n, a, lda, b, ldb[, uplo, m, n, a, lda, b, ldb]) -> (uplo, m, n, a, lda, b, ldb)

    Parameters
    ----------
    uplo : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum2}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp2}}*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, m, n, a, lda, b, ldb,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clacrm_c', 'zlacrm_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['clacrm', 'zlacrm'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object rwork):
    """{{name}}(m, n, a, lda, b, ldb, c, ldc, rwork[, m, n, a, lda, b, ldb, c, ldc, rwork]) -> (m, n, a, lda, b, ldb, c, ldc, rwork)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum2}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp2}}*>np.PyArray_DATA(b_), &ldb, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, b, ldb, c, ldc, rwork,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['clacrt_c', 'zlacrt_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['clacrt', 'zlacrt'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object cx, fwi_integer_t incx, object cy, fwi_integer_t incy, {{ktp}} c, {{ktp}} s):
    """{{name}}(n, cx, incx, cy, incy, c, s[, n, cx, incx, cy, incy, c, s]) -> (n, cx, incx, cy, incy, c, s)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cx : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    cy : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp}}_, intent inout
    s : {{ktp}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    cx : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    cy : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp}}_, intent inout
    s : {{ktp}}_, intent inout

    """
    cdef np.ndarray cx_
    cdef fw_shape_t cx_shape_[1]
    cdef np.ndarray cy_
    cdef fw_shape_t cy_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cx_, cx = fw_asfortranarray(cx, {{npy_enum}}, 1, False)
    fw_copyshape(cx_shape_, np.PyArray_DIMS(cx_), 1)
    cy_, cy = fw_asfortranarray(cy, {{npy_enum}}, 1, False)
    fw_copyshape(cy_shape_, np.PyArray_DIMS(cy_), 1)
    {{fc_name}}(&n, cx_shape_, <{{ktp}}*>np.PyArray_DATA(cx_), &incx, cy_shape_, <{{ktp}}*>np.PyArray_DATA(cy_), &incy, &c, &s, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, cx, incx, cy, incy, c, s,)
{{endfor}}


cpdef api object cladiv(fwc_complex_t x, fwc_complex_t y):
    """cladiv(x, y[, x, y]) -> (fw_ret_arg, x, y)

    Parameters
    ----------
    x : fwc_complex, intent inout
    y : fwc_complex, intent inout

    Returns
    -------
    fw_ret_arg : fwc_complex, intent out
    x : fwc_complex, intent inout
    y : fwc_complex, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fwc_complex_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cladiv_c(&fw_ret_arg, &x, &y, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cladiv' wrapper.")
    return (fw_ret_arg, x, y,)


cpdef api object claed0(fwi_integer_t qsiz, fwi_integer_t n, object d, object e, object q, fwi_integer_t ldq, object qstore, fwi_integer_t ldqs, object rwork, object iwork, fwi_integer_t info):
    """claed0(qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info[, qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info]) -> (qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info)

    Parameters
    ----------
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwc_complex, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwc_complex, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[2]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    qstore_, qstore = fw_asfortranarray(qstore, fwc_complex_t_enum, 2, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 2)
    if ldqs != qstore_shape_[0]:
        raise ValueError("(ldqs == qstore.shape[0]) not satisifed")
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    claed0_c(&qsiz, &n, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, qstore_shape_, <fwc_complex_t*>np.PyArray_DATA(qstore_), &ldqs, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claed0' wrapper.")
    return (qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info,)


cpdef api object claed7(fwi_integer_t n, fwi_integer_t cutpnt, fwi_integer_t qsiz, fwi_integer_t tlvls, fwi_integer_t curlvl, fwi_integer_t curpbm, object d, object q, fwi_integer_t ldq, fwr_real_t rho, object indxq, object qstore, object qptr, object prmptr, object perm, object givptr, object givcol, object givnum, object work, object rwork, object iwork, fwi_integer_t info):
    """claed7(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info[, n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info]) -> (n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cutpnt : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : fwr_real, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    qstore : fwr_real, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    cutpnt : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : fwr_real, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    qstore : fwr_real, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[1]
    cdef np.ndarray qptr_
    cdef fw_shape_t qptr_shape_[1]
    cdef np.ndarray prmptr_
    cdef fw_shape_t prmptr_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    qstore_, qstore = fw_asfortranarray(qstore, fwr_real_t_enum, 1, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 1)
    qptr_, qptr = fw_asfortranarray(qptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(qptr_shape_, np.PyArray_DIMS(qptr_), 1)
    prmptr_, prmptr = fw_asfortranarray(prmptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(prmptr_shape_, np.PyArray_DIMS(prmptr_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_real_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    claed7_c(&n, &cutpnt, &qsiz, &tlvls, &curlvl, &curpbm, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, &rho, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), qstore_shape_, <fwr_real_t*>np.PyArray_DATA(qstore_), qptr_shape_, <fwi_integer_t*>np.PyArray_DATA(qptr_), prmptr_shape_, <fwi_integer_t*>np.PyArray_DATA(prmptr_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_real_t*>np.PyArray_DATA(givnum_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claed7' wrapper.")
    return (n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info,)


cpdef api object claed8(fwi_integer_t k, fwi_integer_t n, fwi_integer_t qsiz, object q, fwi_integer_t ldq, object d, fwr_real_t rho, fwi_integer_t cutpnt, object z, object dlamda, object q2, fwi_integer_t ldq2, object w, object indxp, object indx, object indxq, object perm, fwi_integer_t givptr, object givcol, object givnum, fwi_integer_t info):
    """claed8(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info[, k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info]) -> (k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info)

    Parameters
    ----------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    rho : fwr_real, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_real, 1D array, dimension(*), intent inout
    dlamda : fwr_real, 1D array, dimension(*), intent inout
    q2 : fwc_complex, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_real, 1D array, dimension(*), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    rho : fwr_real, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_real, 1D array, dimension(*), intent inout
    dlamda : fwr_real, 1D array, dimension(*), intent inout
    q2 : fwc_complex, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_real, 1D array, dimension(*), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray q2_
    cdef fw_shape_t q2_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray indxp_
    cdef fw_shape_t indxp_shape_[1]
    cdef np.ndarray indx_
    cdef fw_shape_t indx_shape_[1]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    dlamda_, dlamda = fw_asfortranarray(dlamda, fwr_real_t_enum, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    q2_, q2 = fw_asfortranarray(q2, fwc_complex_t_enum, 2, False)
    fw_copyshape(q2_shape_, np.PyArray_DIMS(q2_), 2)
    if ldq2 != q2_shape_[0]:
        raise ValueError("(ldq2 == q2.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwr_real_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    indxp_, indxp = fw_asfortranarray(indxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxp_shape_, np.PyArray_DIMS(indxp_), 1)
    indx_, indx = fw_asfortranarray(indx, fwi_integer_t_enum, 1, False)
    fw_copyshape(indx_shape_, np.PyArray_DIMS(indx_), 1)
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_real_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    claed8_c(&k, &n, &qsiz, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), &rho, &cutpnt, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), dlamda_shape_, <fwr_real_t*>np.PyArray_DATA(dlamda_), q2_shape_, <fwc_complex_t*>np.PyArray_DATA(q2_), &ldq2, w_shape_, <fwr_real_t*>np.PyArray_DATA(w_), indxp_shape_, <fwi_integer_t*>np.PyArray_DATA(indxp_), indx_shape_, <fwi_integer_t*>np.PyArray_DATA(indx_), indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_real_t*>np.PyArray_DATA(givnum_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claed8' wrapper.")
    return (k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info,)


cpdef api object claein(bint rightv, bint noinit, fwi_integer_t n, object h, fwi_integer_t ldh, fwc_complex_t w, object v, object b, fwi_integer_t ldb, object rwork, fwr_real_t eps3, fwr_real_t smlnum, fwi_integer_t info):
    """claein(rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info[, rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info]) -> (rightv_, noinit_, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info)

    Parameters
    ----------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, intent inout
    v : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    eps3 : fwr_real, intent inout
    smlnum : fwr_real, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, intent inout
    v : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    eps3 : fwr_real, intent inout
    smlnum : fwr_real, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t rightv_
    cdef fwl_logical_t noinit_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    rightv_ = 1 if rightv else 0
    noinit_ = 1 if noinit else 0
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    claein_c(&rightv_, &noinit_, &n, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, &w, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &eps3, &smlnum, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claein' wrapper.")
    return (rightv_, noinit_, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info,)


{{for fc_name, ktp, name
      in zip(['claesy_c', 'zlaesy_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['claesy', 'zlaesy'])}}
cpdef api object {{name}}({{ktp}} a, {{ktp}} b, {{ktp}} c, {{ktp}} rt1, {{ktp}} rt2, {{ktp}} evscal, {{ktp}} cs1, {{ktp}} sn1):
    """{{name}}(a, b, c, rt1, rt2, evscal, cs1, sn1[, a, b, c, rt1, rt2, evscal, cs1, sn1]) -> (a, b, c, rt1, rt2, evscal, cs1, sn1)

    Parameters
    ----------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    rt1 : {{ktp}}_, intent inout
    rt2 : {{ktp}}_, intent inout
    evscal : {{ktp}}_, intent inout
    cs1 : {{ktp}}_, intent inout
    sn1 : {{ktp}}_, intent inout

    Returns
    -------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    rt1 : {{ktp}}_, intent inout
    rt2 : {{ktp}}_, intent inout
    evscal : {{ktp}}_, intent inout
    cs1 : {{ktp}}_, intent inout
    sn1 : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&a, &b, &c, &rt1, &rt2, &evscal, &cs1, &sn1, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (a, b, c, rt1, rt2, evscal, cs1, sn1,)
{{endfor}}


cpdef api object clag2z(fwi_integer_t m, fwi_integer_t n, object sa, fwi_integer_t ldsa, object a, fwi_integer_t lda, fwi_integer_t info):
    """clag2z(m, n, sa, ldsa, a, lda, info[, m, n, sa, ldsa, a, lda, info]) -> (m, n, sa, ldsa, a, lda, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    sa : fwc_complex, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    sa : fwc_complex, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray sa_
    cdef fw_shape_t sa_shape_[2]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    sa_, sa = fw_asfortranarray(sa, fwc_complex_t_enum, 2, False)
    fw_copyshape(sa_shape_, np.PyArray_DIMS(sa_), 2)
    if ldsa != sa_shape_[0]:
        raise ValueError("(ldsa == sa.shape[0]) not satisifed")
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    clag2z_c(&m, &n, sa_shape_, <fwc_complex_t*>np.PyArray_DATA(sa_), &ldsa, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'clag2z' wrapper.")
    return (m, n, sa, ldsa, a, lda, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['clahef_c', 'zlahef_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['clahef', 'zlahef'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nb, fwi_integer_t kb, object a, fwi_integer_t lda, object ipiv, object w, fwi_integer_t ldw, fwi_integer_t info):
    """{{name}}(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info[, uplo, n, nb, kb, a, lda, ipiv, w, ldw, info]) -> (uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 2D array, dimension(ldw, *), intent inout
    ldw : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 2D array, dimension(ldw, *), intent inout
    ldw : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 2, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 2)
    if ldw != w_shape_[0]:
        raise ValueError("(ldw == w.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nb, &kb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), &ldw, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nb, kb, a, lda, ipiv, w, ldw, info,)
{{endfor}}


cpdef api object clahqr(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t info):
    """clahqr(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info[, wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    clahqr_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), &iloz, &ihiz, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'clahqr' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info,)


cpdef api object clalsd(object uplo, fwi_integer_t smlsiz, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwr_real_t rcond, fwi_integer_t rank, object work, object rwork, object iwork, fwi_integer_t info):
    """clalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info[, uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info]) -> (uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    clalsd_c(fw_uplo, &smlsiz, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, &rcond, &rank, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'clalsd' wrapper.")
    return (fw_uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clanhb_c', 'zlanhb_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['clanhb', 'zlanhb'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, fwi_integer_t n, fwi_integer_t k, object ab, fwi_integer_t ldab, object work):
    """{{name}}(norm, uplo, n, k, ab, ldab, work[, norm, uplo, n, k, ab, ldab, work]) -> (fw_ret_arg, norm, uplo, n, k, ab, ldab, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, &n, &k, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, n, k, ab, ldab, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clanhe_c', 'zlanhe_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['clanhe', 'zlanhe'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object work):
    """{{name}}(norm, uplo, n, a, lda, work[, norm, uplo, n, a, lda, work]) -> (fw_ret_arg, norm, uplo, n, a, lda, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, n, a, lda, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clanhf_c', 'zlanhf_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['clanhf', 'zlanhf'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object transr, object uplo, fwi_integer_t n, object a, object work):
    """{{name}}(norm, transr, uplo, n, a, work[, norm, transr, uplo, n, a, work]) -> (fw_ret_arg, norm, transr, uplo, n, a, work)

    Parameters
    ----------
    norm : object_, intent inout
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    work : {{ktp2}}_, 1D array, dimension(0:*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    work : {{ktp2}}_, 1D array, dimension(0:*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_transr, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_transr, fw_uplo, n, a, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clanhp_c', 'zlanhp_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['clanhp', 'zlanhp'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, fwi_integer_t n, object ap, object work):
    """{{name}}(norm, uplo, n, ap, work[, norm, uplo, n, ap, work]) -> (fw_ret_arg, norm, uplo, n, ap, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, n, ap, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clanht_c', 'zlanht_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['clanht', 'zlanht'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, object d, object e):
    """{{name}}(norm, n, d, e[, norm, n, d, e]) -> (fw_ret_arg, norm, n, d, e)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    norm : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, n, d, e,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['claqhb_c', 'zlaqhb_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['claqhb', 'zlaqhb'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object s, {{ktp2}} scond, {{ktp2}} amax, object equed):
    """{{name}}(uplo, n, kd, ab, ldab, s, scond, amax, equed[, uplo, n, kd, ab, ldab, s, scond, amax, equed]) -> (uplo, n, kd, ab, ldab, s, scond, amax, equed)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, s, scond, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['claqhe_c', 'zlaqhe_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['claqhe', 'zlaqhe'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object s, {{ktp2}} scond, {{ktp2}} amax, object equed):
    """{{name}}(uplo, n, a, lda, s, scond, amax, equed[, uplo, n, a, lda, s, scond, amax, equed]) -> (uplo, n, a, lda, s, scond, amax, equed)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, s, scond, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['claqhp_c', 'zlaqhp_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['claqhp', 'zlaqhp'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object s, {{ktp2}} scond, {{ktp2}} amax, object equed):
    """{{name}}(uplo, n, ap, s, scond, amax, equed[, uplo, n, ap, s, scond, amax, equed]) -> (uplo, n, ap, s, scond, amax, equed)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, s, scond, amax, fw_equed,)
{{endfor}}


cpdef api object claqr0(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """claqr0(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    claqr0_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), &iloz, &ihiz, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claqr0' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object claqr1(fwi_integer_t n, object h, fwi_integer_t ldh, fwc_complex_t s1, fwc_complex_t s2, object v):
    """claqr1(n, h, ldh, s1, s2, v[, n, h, ldh, s1, s2, v]) -> (n, h, ldh, s1, s2, v)

    Parameters
    ----------
    n : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    s1 : fwc_complex, intent inout
    s2 : fwc_complex, intent inout
    v : fwc_complex, 1D array, dimension(*), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    s1 : fwc_complex, intent inout
    s2 : fwc_complex, intent inout
    v : fwc_complex, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    claqr1_c(&n, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, &s1, &s2, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claqr1' wrapper.")
    return (n, h, ldh, s1, s2, v,)


cpdef api object claqr2(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sh, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """claqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex, 1D array, dimension(*), intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex, 1D array, dimension(*), intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sh_
    cdef fw_shape_t sh_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sh_, sh = fw_asfortranarray(sh, fwc_complex_t_enum, 1, False)
    fw_copyshape(sh_shape_, np.PyArray_DIMS(sh_), 1)
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwc_complex_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwc_complex_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    claqr2_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sh_shape_, <fwc_complex_t*>np.PyArray_DATA(sh_), v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwc_complex_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwc_complex_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claqr2' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object claqr3(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sh, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """claqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex, 1D array, dimension(*), intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex, 1D array, dimension(*), intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sh_
    cdef fw_shape_t sh_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sh_, sh = fw_asfortranarray(sh, fwc_complex_t_enum, 1, False)
    fw_copyshape(sh_shape_, np.PyArray_DIMS(sh_), 1)
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwc_complex_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwc_complex_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    claqr3_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sh_shape_, <fwc_complex_t*>np.PyArray_DATA(sh_), v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwc_complex_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwc_complex_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claqr3' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object claqr4(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """claqr4(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    claqr4_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), &iloz, &ihiz, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claqr4' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object claqr5(bint wantt, bint wantz, fwi_integer_t kacc22, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nshfts, object s, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object v, fwi_integer_t ldv, object u, fwi_integer_t ldu, fwi_integer_t nv, object wv, fwi_integer_t ldwv, fwi_integer_t nh, object wh, fwi_integer_t ldwh):
    """claqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh[, wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh]) -> (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    s : fwc_complex, 1D array, dimension(*), intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwc_complex, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    s : fwc_complex, 1D array, dimension(*), intent inout
    h : fwc_complex, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwc_complex, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwc_complex, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwc_complex, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray wh_
    cdef fw_shape_t wh_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    s_, s = fw_asfortranarray(s, fwc_complex_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    h_, h = fw_asfortranarray(h, fwc_complex_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwc_complex_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwc_complex_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    wh_, wh = fw_asfortranarray(wh, fwc_complex_t_enum, 2, False)
    fw_copyshape(wh_shape_, np.PyArray_DIMS(wh_), 2)
    if ldwh != wh_shape_[0]:
        raise ValueError("(ldwh == wh.shape[0]) not satisifed")
    claqr5_c(&wantt_, &wantz_, &kacc22, &n, &ktop, &kbot, &nshfts, s_shape_, <fwc_complex_t*>np.PyArray_DATA(s_), h_shape_, <fwc_complex_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, v_shape_, <fwc_complex_t*>np.PyArray_DATA(v_), &ldv, u_shape_, <fwc_complex_t*>np.PyArray_DATA(u_), &ldu, &nv, wv_shape_, <fwc_complex_t*>np.PyArray_DATA(wv_), &ldwv, &nh, wh_shape_, <fwc_complex_t*>np.PyArray_DATA(wh_), &ldwh, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'claqr5' wrapper.")
    return (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['clarcm_c', 'zlarcm_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['clarcm', 'zlarcm'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object rwork):
    """{{name}}(m, n, a, lda, b, ldb, c, ldc, rwork[, m, n, a, lda, b, ldb, c, ldc, rwork]) -> (m, n, a, lda, b, ldb, c, ldc, rwork)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp2}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    rwork : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp2}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    rwork : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum2}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp2}}*>np.PyArray_DATA(b_), &ldb, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &ldc, rwork_shape_, <{{ktp}}*>np.PyArray_DATA(rwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, b, ldb, c, ldc, rwork,)
{{endfor}}


cpdef api object cptrfs(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """cptrfs(uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info[, uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info]) -> (uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_real_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwc_complex_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_real_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_real_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    cptrfs_c(fw_uplo, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_t*>np.PyArray_DATA(e_), df_shape_, <fwr_real_t*>np.PyArray_DATA(df_), ef_shape_, <fwc_complex_t*>np.PyArray_DATA(ef_), b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwc_complex_t*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <fwr_real_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_real_t*>np.PyArray_DATA(berr_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cptrfs' wrapper.")
    return (fw_uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info,)


cpdef api object cptsvx(object fact, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, fwr_real_t rcond, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """cptsvx(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info[, fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info]) -> (fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)

    Parameters
    ----------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_real_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwc_complex_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_real_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_real_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    cptsvx_c(fw_fact, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_t*>np.PyArray_DATA(e_), df_shape_, <fwr_real_t*>np.PyArray_DATA(df_), ef_shape_, <fwc_complex_t*>np.PyArray_DATA(ef_), b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwc_complex_t*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <fwr_real_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_real_t*>np.PyArray_DATA(berr_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cptsvx' wrapper.")
    return (fw_fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info,)


cpdef api object cpttrs(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwi_integer_t info):
    """cpttrs(uplo, n, nrhs, d, e, b, ldb, info[, uplo, n, nrhs, d, e, b, ldb, info]) -> (uplo, n, nrhs, d, e, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    cpttrs_c(fw_uplo, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_t*>np.PyArray_DATA(e_), b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cpttrs' wrapper.")
    return (fw_uplo, n, nrhs, d, e, b, ldb, info,)


cpdef api object cptts2(fwi_integer_t iuplo, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb):
    """cptts2(iuplo, n, nrhs, d, e, b, ldb[, iuplo, n, nrhs, d, e, b, ldb]) -> (iuplo, n, nrhs, d, e, b, ldb)

    Parameters
    ----------
    iuplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    iuplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwc_complex, 1D array, dimension(*), intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    cptts2_c(&iuplo, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_t*>np.PyArray_DATA(e_), b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cptts2' wrapper.")
    return (iuplo, n, nrhs, d, e, b, ldb,)


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['crot_c', 'zrot_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['crot', 'zrot'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object cx, fwi_integer_t incx, object cy, fwi_integer_t incy, {{ktp2}} c, {{ktp}} s):
    """{{name}}(n, cx, incx, cy, incy, c, s[, n, cx, incx, cy, incy, c, s]) -> (n, cx, incx, cy, incy, c, s)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cx : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    cy : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp2}}_, intent inout
    s : {{ktp}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    cx : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    cy : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp2}}_, intent inout
    s : {{ktp}}_, intent inout

    """
    cdef np.ndarray cx_
    cdef fw_shape_t cx_shape_[1]
    cdef np.ndarray cy_
    cdef fw_shape_t cy_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cx_, cx = fw_asfortranarray(cx, {{npy_enum}}, 1, False)
    fw_copyshape(cx_shape_, np.PyArray_DIMS(cx_), 1)
    cy_, cy = fw_asfortranarray(cy, {{npy_enum}}, 1, False)
    fw_copyshape(cy_shape_, np.PyArray_DIMS(cy_), 1)
    {{fc_name}}(&n, cx_shape_, <{{ktp}}*>np.PyArray_DATA(cx_), &incx, cy_shape_, <{{ktp}}*>np.PyArray_DATA(cy_), &incy, &c, &s, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, cx, incx, cy, incy, c, s,)
{{endfor}}


cpdef api object cspcon(object uplo, fwi_integer_t n, object ap, object ipiv, fwr_real_t anorm, fwr_real_t rcond, object work, fwi_integer_t info):
    """cspcon(uplo, n, ap, ipiv, anorm, rcond, work, info[, uplo, n, ap, ipiv, anorm, rcond, work, info]) -> (uplo, n, ap, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwc_complex, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwc_complex, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, fwc_complex_t_enum, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    cspcon_c(fw_uplo, &n, ap_shape_, <fwc_complex_t*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cspcon' wrapper.")
    return (fw_uplo, n, ap, ipiv, anorm, rcond, work, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['cspmv_c', 'zspmv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cspmv', 'zspmv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, {{ktp}} alpha, object ap, object x, fwi_integer_t incx, {{ktp}} beta, object y, fwi_integer_t incy):
    """{{name}}(uplo, n, alpha, ap, x, incx, beta, y, incy[, uplo, n, alpha, ap, x, incx, beta, y, incy]) -> (uplo, n, alpha, ap, x, incx, beta, y, incy)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &alpha, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, &beta, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, alpha, ap, x, incx, beta, y, incy,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cspr_c', 'zspr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cspr', 'zspr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, {{ktp}} alpha, object x, fwi_integer_t incx, object ap):
    """{{name}}(uplo, n, alpha, x, incx, ap[, uplo, n, alpha, x, incx, ap]) -> (uplo, n, alpha, x, incx, ap)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &alpha, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, alpha, x, incx, ap,)
{{endfor}}


cpdef api object csrscl(fwi_integer_t n, fwr_real_t sa, object sx, fwi_integer_t incx):
    """csrscl(n, sa, sx, incx[, n, sa, sx, incx]) -> (n, sa, sx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    sa : fwr_real, intent inout
    sx : fwc_complex, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    sa : fwr_real, intent inout
    sx : fwc_complex, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray sx_
    cdef fw_shape_t sx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    sx_, sx = fw_asfortranarray(sx, fwc_complex_t_enum, 1, False)
    fw_copyshape(sx_shape_, np.PyArray_DIMS(sx_), 1)
    csrscl_c(&n, &sa, sx_shape_, <fwc_complex_t*>np.PyArray_DATA(sx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'csrscl' wrapper.")
    return (n, sa, sx, incx,)


cpdef api object cstedc(object compz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """cstedc(compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info[, compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    cstedc_c(fw_compz, &n, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'cstedc' wrapper.")
    return (fw_compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,)


cpdef api object csycon(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwr_real_t anorm, fwr_real_t rcond, object work, fwi_integer_t info):
    """csycon(uplo, n, a, lda, ipiv, anorm, rcond, work, info[, uplo, n, a, lda, ipiv, anorm, rcond, work, info]) -> (uplo, n, a, lda, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    csycon_c(fw_uplo, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'csycon' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, anorm, rcond, work, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['csymv_c', 'zsymv_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['csymv', 'zsymv'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, {{ktp}} alpha, object a, fwi_integer_t lda, object x, fwi_integer_t incx, {{ktp}} beta, object y, fwi_integer_t incy):
    """{{name}}(uplo, n, alpha, a, lda, x, incx, beta, y, incy[, uplo, n, alpha, a, lda, x, incx, beta, y, incy]) -> (uplo, n, alpha, a, lda, x, incx, beta, y, incy)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &alpha, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, &beta, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, alpha, a, lda, x, incx, beta, y, incy,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['csyr_c', 'zsyr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['csyr', 'zsyr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, {{ktp}} alpha, object x, fwi_integer_t incx, object a, fwi_integer_t lda):
    """{{name}}(uplo, n, alpha, x, incx, a, lda[, uplo, n, alpha, x, incx, a, lda]) -> (uplo, n, alpha, x, incx, a, lda)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &alpha, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, alpha, x, incx, a, lda,)
{{endfor}}


cpdef api object ctgevc(object side, object howmny, object select, fwi_integer_t n, object s, fwi_integer_t lds, object p, fwi_integer_t ldp, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object rwork, fwi_integer_t info):
    """ctgevc(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info[, side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info]) -> (side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwc_complex, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwc_complex, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwc_complex, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwc_complex, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[2]
    cdef np.ndarray p_
    cdef fw_shape_t p_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    s_, s = fw_asfortranarray(s, fwc_complex_t_enum, 2, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 2)
    if lds != s_shape_[0]:
        raise ValueError("(lds == s.shape[0]) not satisifed")
    p_, p = fw_asfortranarray(p, fwc_complex_t_enum, 2, False)
    fw_copyshape(p_shape_, np.PyArray_DIMS(p_), 2)
    if ldp != p_shape_[0]:
        raise ValueError("(ldp == p.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    ctgevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, s_shape_, <fwc_complex_t*>np.PyArray_DATA(s_), &lds, p_shape_, <fwc_complex_t*>np.PyArray_DATA(p_), &ldp, vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctgevc' wrapper.")
    return (fw_side, fw_howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info,)


cpdef api object ctgex2(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t j1, fwi_integer_t info):
    """ctgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    ctgex2_c(&wantq_, &wantz_, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, &j1, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctgex2' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info,)


cpdef api object ctgexc(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t ifst, fwi_integer_t ilst, fwi_integer_t info):
    """ctgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    ctgexc_c(&wantq_, &wantz_, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, &ifst, &ilst, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctgexc' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info,)


cpdef api object ctgsen(fwi_integer_t ijob, bint wantq, bint wantz, object select, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t m, fwr_real_t pl, fwr_real_t pr, object dif, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """ctgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info[, ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info]) -> (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_real, intent inout
    pr : fwr_real, intent inout
    dif : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex, 1D array, dimension(*), intent inout
    beta : fwc_complex, 1D array, dimension(*), intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_real, intent inout
    pr : fwr_real, intent inout
    dif : fwr_real, 1D array, dimension(*), intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray dif_
    cdef fw_shape_t dif_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    dif_, dif = fw_asfortranarray(dif, fwr_real_t_enum, 1, False)
    fw_copyshape(dif_shape_, np.PyArray_DIMS(dif_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ctgsen_c(&ijob, &wantq_, &wantz_, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_t*>np.PyArray_DATA(beta_), q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_t*>np.PyArray_DATA(z_), &ldz, &m, &pl, &pr, dif_shape_, <fwr_real_t*>np.PyArray_DATA(dif_), work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctgsen' wrapper.")
    return (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info,)


cpdef api object ctgsy2(object trans, fwi_integer_t ijob, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object d, fwi_integer_t ldd, object e, fwi_integer_t lde, object f, fwi_integer_t ldf, fwr_real_t scale, fwr_real_t rdsum, fwr_real_t rdscal, fwi_integer_t info):
    """ctgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info[, trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info]) -> (trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info)

    Parameters
    ----------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwc_complex, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwc_complex, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwc_complex, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwc_complex, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_real, intent inout
    rdsum : fwr_real, intent inout
    rdscal : fwr_real, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwc_complex, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwc_complex, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwc_complex, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwc_complex, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_real, intent inout
    rdsum : fwr_real, intent inout
    rdscal : fwr_real, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[2]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[2]
    cdef np.ndarray f_
    cdef fw_shape_t f_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwc_complex_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwc_complex_t_enum, 2, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 2)
    if ldd != d_shape_[0]:
        raise ValueError("(ldd == d.shape[0]) not satisifed")
    e_, e = fw_asfortranarray(e, fwc_complex_t_enum, 2, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 2)
    if lde != e_shape_[0]:
        raise ValueError("(lde == e.shape[0]) not satisifed")
    f_, f = fw_asfortranarray(f, fwc_complex_t_enum, 2, False)
    fw_copyshape(f_shape_, np.PyArray_DIMS(f_), 2)
    if ldf != f_shape_[0]:
        raise ValueError("(ldf == f.shape[0]) not satisifed")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    ctgsy2_c(fw_trans, &ijob, &m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_t*>np.PyArray_DATA(b_), &ldb, c_shape_, <fwc_complex_t*>np.PyArray_DATA(c_), &ldc, d_shape_, <fwc_complex_t*>np.PyArray_DATA(d_), &ldd, e_shape_, <fwc_complex_t*>np.PyArray_DATA(e_), &lde, f_shape_, <fwc_complex_t*>np.PyArray_DATA(f_), &ldf, &scale, &rdsum, &rdscal, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctgsy2' wrapper.")
    return (fw_trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info,)


cpdef api object ctrevc(object side, object howmny, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object rwork, fwi_integer_t info):
    """ctrevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info[, side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info]) -> (side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwc_complex, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwc_complex_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwc_complex_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_real_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    ctrevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwc_complex_t*>np.PyArray_DATA(t_), &ldt, vl_shape_, <fwc_complex_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_real_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctrevc' wrapper.")
    return (fw_side, fw_howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info,)


cpdef api object ctrexc(object compq, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, fwi_integer_t ifst, fwi_integer_t ilst, fwi_integer_t info):
    """ctrexc(compq, n, t, ldt, q, ldq, ifst, ilst, info[, compq, n, t, ldt, q, ldq, ifst, ilst, info]) -> (compq, n, t, ldt, q, ldq, ifst, ilst, info)

    Parameters
    ----------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    t_, t = fw_asfortranarray(t, fwc_complex_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    ctrexc_c(fw_compq, &n, t_shape_, <fwc_complex_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, &ifst, &ilst, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctrexc' wrapper.")
    return (fw_compq, n, t, ldt, q, ldq, ifst, ilst, info,)


cpdef api object ctrsen(object job, object compq, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, object w, fwi_integer_t m, fwr_real_t s, fwr_real_t sep, object work, fwi_integer_t lwork, fwi_integer_t info):
    """ctrsen(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info[, job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info]) -> (job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_real, intent inout
    sep : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    w : fwc_complex, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_real, intent inout
    sep : fwr_real, intent inout
    work : fwc_complex, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwc_complex_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    ctrsen_c(fw_job, fw_compq, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwc_complex_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwc_complex_t*>np.PyArray_DATA(q_), &ldq, w_shape_, <fwc_complex_t*>np.PyArray_DATA(w_), &m, &s, &sep, work_shape_, <fwc_complex_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ctrsen' wrapper.")
    return (fw_job, fw_compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cunbdb_c', 'zunbdb_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cunbdb', 'zunbdb'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, object signs, fwi_integer_t m, fwi_integer_t p, fwi_integer_t q, object x11, fwi_integer_t ldx11, object x12, fwi_integer_t ldx12, object x21, fwi_integer_t ldx21, object x22, fwi_integer_t ldx22, object theta, object phi, object taup1, object taup2, object tauq1, object tauq2, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info[, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info]) -> (trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info)

    Parameters
    ----------
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp2}}_, 1D array, dimension(*), intent inout
    phi : {{ktp2}}_, 1D array, dimension(*), intent inout
    taup1 : {{ktp}}_, 1D array, dimension(*), intent inout
    taup2 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq1 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq2 : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp2}}_, 1D array, dimension(*), intent inout
    phi : {{ktp2}}_, 1D array, dimension(*), intent inout
    taup1 : {{ktp}}_, 1D array, dimension(*), intent inout
    taup2 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq1 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq2 : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef char *fw_signs = [0, 0]
    cdef np.ndarray x11_
    cdef fw_shape_t x11_shape_[2]
    cdef np.ndarray x12_
    cdef fw_shape_t x12_shape_[2]
    cdef np.ndarray x21_
    cdef fw_shape_t x21_shape_[2]
    cdef np.ndarray x22_
    cdef fw_shape_t x22_shape_[2]
    cdef np.ndarray theta_
    cdef fw_shape_t theta_shape_[1]
    cdef np.ndarray phi_
    cdef fw_shape_t phi_shape_[1]
    cdef np.ndarray taup1_
    cdef fw_shape_t taup1_shape_[1]
    cdef np.ndarray taup2_
    cdef fw_shape_t taup2_shape_[1]
    cdef np.ndarray tauq1_
    cdef fw_shape_t tauq1_shape_[1]
    cdef np.ndarray tauq2_
    cdef fw_shape_t tauq2_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x11_, x11 = fw_asfortranarray(x11, {{npy_enum}}, 2, False)
    fw_copyshape(x11_shape_, np.PyArray_DIMS(x11_), 2)
    if ldx11 != x11_shape_[0]:
        raise ValueError("(ldx11 == x11.shape[0]) not satisifed")
    x12_, x12 = fw_asfortranarray(x12, {{npy_enum}}, 2, False)
    fw_copyshape(x12_shape_, np.PyArray_DIMS(x12_), 2)
    if ldx12 != x12_shape_[0]:
        raise ValueError("(ldx12 == x12.shape[0]) not satisifed")
    x21_, x21 = fw_asfortranarray(x21, {{npy_enum}}, 2, False)
    fw_copyshape(x21_shape_, np.PyArray_DIMS(x21_), 2)
    if ldx21 != x21_shape_[0]:
        raise ValueError("(ldx21 == x21.shape[0]) not satisifed")
    x22_, x22 = fw_asfortranarray(x22, {{npy_enum}}, 2, False)
    fw_copyshape(x22_shape_, np.PyArray_DIMS(x22_), 2)
    if ldx22 != x22_shape_[0]:
        raise ValueError("(ldx22 == x22.shape[0]) not satisifed")
    theta_, theta = fw_asfortranarray(theta, {{npy_enum2}}, 1, False)
    fw_copyshape(theta_shape_, np.PyArray_DIMS(theta_), 1)
    phi_, phi = fw_asfortranarray(phi, {{npy_enum2}}, 1, False)
    fw_copyshape(phi_shape_, np.PyArray_DIMS(phi_), 1)
    taup1_, taup1 = fw_asfortranarray(taup1, {{npy_enum}}, 1, False)
    fw_copyshape(taup1_shape_, np.PyArray_DIMS(taup1_), 1)
    taup2_, taup2 = fw_asfortranarray(taup2, {{npy_enum}}, 1, False)
    fw_copyshape(taup2_shape_, np.PyArray_DIMS(taup2_), 1)
    tauq1_, tauq1 = fw_asfortranarray(tauq1, {{npy_enum}}, 1, False)
    fw_copyshape(tauq1_shape_, np.PyArray_DIMS(tauq1_), 1)
    tauq2_, tauq2 = fw_asfortranarray(tauq2, {{npy_enum}}, 1, False)
    fw_copyshape(tauq2_shape_, np.PyArray_DIMS(tauq2_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_signs[0] = fw_aschar(signs)
    if fw_signs[0] == 0:
        raise ValueError("len(signs) != 1")
    {{fc_name}}(fw_trans, fw_signs, &m, &p, &q, x11_shape_, <{{ktp}}*>np.PyArray_DATA(x11_), &ldx11, x12_shape_, <{{ktp}}*>np.PyArray_DATA(x12_), &ldx12, x21_shape_, <{{ktp}}*>np.PyArray_DATA(x21_), &ldx21, x22_shape_, <{{ktp}}*>np.PyArray_DATA(x22_), &ldx22, theta_shape_, <{{ktp2}}*>np.PyArray_DATA(theta_), phi_shape_, <{{ktp2}}*>np.PyArray_DATA(phi_), taup1_shape_, <{{ktp}}*>np.PyArray_DATA(taup1_), taup2_shape_, <{{ktp}}*>np.PyArray_DATA(taup2_), tauq1_shape_, <{{ktp}}*>np.PyArray_DATA(tauq1_), tauq2_shape_, <{{ktp}}*>np.PyArray_DATA(tauq2_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, fw_signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['cuncsd_c', 'zuncsd_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['cuncsd', 'zuncsd'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobu1, object jobu2, object jobv1t, object jobv2t, object trans, object signs, fwi_integer_t m, fwi_integer_t p, fwi_integer_t q, object x11, fwi_integer_t ldx11, object x12, fwi_integer_t ldx12, object x21, fwi_integer_t ldx21, object x22, fwi_integer_t ldx22, object theta, object u1, fwi_integer_t ldu1, object u2, fwi_integer_t ldu2, object v1t, fwi_integer_t ldv1t, object v2t, fwi_integer_t ldv2t, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t info):
    """{{name}}(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info[, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info]) -> (jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info)

    Parameters
    ----------
    jobu1 : object_, intent inout
    jobu2 : object_, intent inout
    jobv1t : object_, intent inout
    jobv2t : object_, intent inout
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp2}}_, 1D array, dimension(*), intent inout
    u1 : {{ktp}}_, 2D array, dimension(ldu1, *), intent inout
    ldu1 : fwi_integer, intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    v1t : {{ktp}}_, 2D array, dimension(ldv1t, *), intent inout
    ldv1t : fwi_integer, intent inout
    v2t : {{ktp}}_, 2D array, dimension(ldv2t, *), intent inout
    ldv2t : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu1 : object_, intent inout
    jobu2 : object_, intent inout
    jobv1t : object_, intent inout
    jobv2t : object_, intent inout
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp2}}_, 1D array, dimension(*), intent inout
    u1 : {{ktp}}_, 2D array, dimension(ldu1, *), intent inout
    ldu1 : fwi_integer, intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    v1t : {{ktp}}_, 2D array, dimension(ldv1t, *), intent inout
    ldv1t : fwi_integer, intent inout
    v2t : {{ktp}}_, 2D array, dimension(ldv2t, *), intent inout
    ldv2t : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : {{ktp2}}_, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu1 = [0, 0]
    cdef char *fw_jobu2 = [0, 0]
    cdef char *fw_jobv1t = [0, 0]
    cdef char *fw_jobv2t = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_signs = [0, 0]
    cdef np.ndarray x11_
    cdef fw_shape_t x11_shape_[2]
    cdef np.ndarray x12_
    cdef fw_shape_t x12_shape_[2]
    cdef np.ndarray x21_
    cdef fw_shape_t x21_shape_[2]
    cdef np.ndarray x22_
    cdef fw_shape_t x22_shape_[2]
    cdef np.ndarray theta_
    cdef fw_shape_t theta_shape_[1]
    cdef np.ndarray u1_
    cdef fw_shape_t u1_shape_[2]
    cdef np.ndarray u2_
    cdef fw_shape_t u2_shape_[2]
    cdef np.ndarray v1t_
    cdef fw_shape_t v1t_shape_[2]
    cdef np.ndarray v2t_
    cdef fw_shape_t v2t_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x11_, x11 = fw_asfortranarray(x11, {{npy_enum}}, 2, False)
    fw_copyshape(x11_shape_, np.PyArray_DIMS(x11_), 2)
    if ldx11 != x11_shape_[0]:
        raise ValueError("(ldx11 == x11.shape[0]) not satisifed")
    x12_, x12 = fw_asfortranarray(x12, {{npy_enum}}, 2, False)
    fw_copyshape(x12_shape_, np.PyArray_DIMS(x12_), 2)
    if ldx12 != x12_shape_[0]:
        raise ValueError("(ldx12 == x12.shape[0]) not satisifed")
    x21_, x21 = fw_asfortranarray(x21, {{npy_enum}}, 2, False)
    fw_copyshape(x21_shape_, np.PyArray_DIMS(x21_), 2)
    if ldx21 != x21_shape_[0]:
        raise ValueError("(ldx21 == x21.shape[0]) not satisifed")
    x22_, x22 = fw_asfortranarray(x22, {{npy_enum}}, 2, False)
    fw_copyshape(x22_shape_, np.PyArray_DIMS(x22_), 2)
    if ldx22 != x22_shape_[0]:
        raise ValueError("(ldx22 == x22.shape[0]) not satisifed")
    theta_, theta = fw_asfortranarray(theta, {{npy_enum2}}, 1, False)
    fw_copyshape(theta_shape_, np.PyArray_DIMS(theta_), 1)
    u1_, u1 = fw_asfortranarray(u1, {{npy_enum}}, 2, False)
    fw_copyshape(u1_shape_, np.PyArray_DIMS(u1_), 2)
    if ldu1 != u1_shape_[0]:
        raise ValueError("(ldu1 == u1.shape[0]) not satisifed")
    u2_, u2 = fw_asfortranarray(u2, {{npy_enum}}, 2, False)
    fw_copyshape(u2_shape_, np.PyArray_DIMS(u2_), 2)
    if ldu2 != u2_shape_[0]:
        raise ValueError("(ldu2 == u2.shape[0]) not satisifed")
    v1t_, v1t = fw_asfortranarray(v1t, {{npy_enum}}, 2, False)
    fw_copyshape(v1t_shape_, np.PyArray_DIMS(v1t_), 2)
    if ldv1t != v1t_shape_[0]:
        raise ValueError("(ldv1t == v1t.shape[0]) not satisifed")
    v2t_, v2t = fw_asfortranarray(v2t, {{npy_enum}}, 2, False)
    fw_copyshape(v2t_shape_, np.PyArray_DIMS(v2t_), 2)
    if ldv2t != v2t_shape_[0]:
        raise ValueError("(ldv2t == v2t.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, {{npy_enum2}}, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobu1[0] = fw_aschar(jobu1)
    if fw_jobu1[0] == 0:
        raise ValueError("len(jobu1) != 1")
    fw_jobu2[0] = fw_aschar(jobu2)
    if fw_jobu2[0] == 0:
        raise ValueError("len(jobu2) != 1")
    fw_jobv1t[0] = fw_aschar(jobv1t)
    if fw_jobv1t[0] == 0:
        raise ValueError("len(jobv1t) != 1")
    fw_jobv2t[0] = fw_aschar(jobv2t)
    if fw_jobv2t[0] == 0:
        raise ValueError("len(jobv2t) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_signs[0] = fw_aschar(signs)
    if fw_signs[0] == 0:
        raise ValueError("len(signs) != 1")
    {{fc_name}}(fw_jobu1, fw_jobu2, fw_jobv1t, fw_jobv2t, fw_trans, fw_signs, &m, &p, &q, x11_shape_, <{{ktp}}*>np.PyArray_DATA(x11_), &ldx11, x12_shape_, <{{ktp}}*>np.PyArray_DATA(x12_), &ldx12, x21_shape_, <{{ktp}}*>np.PyArray_DATA(x21_), &ldx21, x22_shape_, <{{ktp}}*>np.PyArray_DATA(x22_), &ldx22, theta_shape_, <{{ktp2}}*>np.PyArray_DATA(theta_), u1_shape_, <{{ktp}}*>np.PyArray_DATA(u1_), &ldu1, u2_shape_, <{{ktp}}*>np.PyArray_DATA(u2_), &ldu2, v1t_shape_, <{{ktp}}*>np.PyArray_DATA(v1t_), &ldv1t, v2t_shape_, <{{ktp}}*>np.PyArray_DATA(v2t_), &ldv2t, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <{{ktp2}}*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobu1, fw_jobu2, fw_jobv1t, fw_jobv2t, fw_trans, fw_signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cung2l_c', 'zung2l_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cung2l', 'zung2l'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cung2r_c', 'zung2r_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cung2r', 'zung2r'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungbr_c', 'zungbr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungbr', 'zungbr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object vect, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(vect, m, n, k, a, lda, tau, work, lwork, info[, vect, m, n, k, a, lda, tau, work, lwork, info]) -> (vect, m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    {{fc_name}}(fw_vect, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunghr_c', 'zunghr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunghr', 'zunghr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(n, ilo, ihi, a, lda, tau, work, lwork, info[, n, ilo, ihi, a, lda, tau, work, lwork, info]) -> (n, ilo, ihi, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, ilo, ihi, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungl2_c', 'zungl2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungl2', 'zungl2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunglq_c', 'zunglq_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunglq', 'zunglq'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungql_c', 'zungql_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungql', 'zungql'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungqr_c', 'zungqr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungqr', 'zungqr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungr2_c', 'zungr2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungr2', 'zungr2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungrq_c', 'zungrq_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungrq', 'zungrq'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cungtr_c', 'zungtr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cungtr', 'zungtr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, tau, work, lwork, info[, uplo, n, a, lda, tau, work, lwork, info]) -> (uplo, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunm2l_c', 'zunm2l_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunm2l', 'zunm2l'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunm2r_c', 'zunm2r_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunm2r', 'zunm2r'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmbr_c', 'zunmbr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmbr', 'zunmbr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object vect, object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_vect, fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmhr_c', 'zunmhr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmhr', 'zunmhr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunml2_c', 'zunml2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunml2', 'zunml2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmlq_c', 'zunmlq_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmlq', 'zunmlq'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmql_c', 'zunmql_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmql', 'zunmql'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmqr_c', 'zunmqr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmqr', 'zunmqr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmr2_c', 'zunmr2_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmr2', 'zunmr2'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmr3_c', 'zunmr3_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmr3', 'zunmr3'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, &l, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, l, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmrq_c', 'zunmrq_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmrq', 'zunmrq'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmrz_c', 'zunmrz_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmrz', 'zunmrz'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, &l, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cunmtr_c', 'zunmtr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cunmtr', 'zunmtr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object uplo, object trans, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info[, side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info]) -> (side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_uplo, fw_trans, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_uplo, fw_trans, m, n, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cupgtr_c', 'zupgtr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cupgtr', 'zupgtr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object tau, object q, fwi_integer_t ldq, object work, fwi_integer_t info):
    """{{name}}(uplo, n, ap, tau, q, ldq, work, info[, uplo, n, ap, tau, q, ldq, work, info]) -> (uplo, n, ap, tau, q, ldq, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, tau, q, ldq, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['cupmtr_c', 'zupmtr_c'],
             ['fwc_complex_t', 'fwc_complex_x16_t'],
             ['cupmtr', 'zupmtr'],
             ['fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object uplo, object trans, fwi_integer_t m, fwi_integer_t n, object ap, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, uplo, trans, m, n, ap, tau, c, ldc, work, info[, side, uplo, trans, m, n, ap, tau, c, ldc, work, info]) -> (side, uplo, trans, m, n, ap, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_uplo, fw_trans, &m, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_uplo, fw_trans, m, n, ap, tau, c, ldc, work, info,)
{{endfor}}


cpdef api object dgbbrd(object vect, fwi_integer_t m, fwi_integer_t n, fwi_integer_t ncc, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object d, object e, object q, fwi_integer_t ldq, object pt, fwi_integer_t ldpt, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """dgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info[, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info]) -> (vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info)

    Parameters
    ----------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwr_dbl, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwr_dbl, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwr_dbl, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwr_dbl, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwr_dbl, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwr_dbl, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray pt_
    cdef fw_shape_t pt_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, fwr_dbl_t_enum, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    pt_, pt = fw_asfortranarray(pt, fwr_dbl_t_enum, 2, False)
    fw_copyshape(pt_shape_, np.PyArray_DIMS(pt_), 2)
    if ldpt != pt_shape_[0]:
        raise ValueError("(ldpt == pt.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwr_dbl_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    dgbbrd_c(fw_vect, &m, &n, &ncc, &kl, &ku, ab_shape_, <fwr_dbl_t*>np.PyArray_DATA(ab_), &ldab, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, pt_shape_, <fwr_dbl_t*>np.PyArray_DATA(pt_), &ldpt, c_shape_, <fwr_dbl_t*>np.PyArray_DATA(c_), &ldc, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgbbrd' wrapper.")
    return (fw_vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info,)


cpdef api object dgees(object jobvs, object sort, bint select, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object wr, object wi, object vs, fwi_integer_t ldvs, object work, fwi_integer_t lwork, object bwork, fwi_integer_t info):
    """dgees(jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info[, jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info]) -> (jobvs, sort, select_, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vs : fwr_dbl, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vs : fwr_dbl, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vs_, vs = fw_asfortranarray(vs, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    dgees_c(fw_jobvs, fw_sort, &select_, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, &sdim, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), vs_shape_, <fwr_dbl_t*>np.PyArray_DATA(vs_), &ldvs, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgees' wrapper.")
    return (fw_jobvs, fw_sort, select_, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info,)


cpdef api object dgeesx(object jobvs, object sort, bint select, object sense, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object wr, object wi, object vs, fwi_integer_t ldvs, fwr_dbl_t rconde, fwr_dbl_t rcondv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, object bwork, fwi_integer_t info):
    """dgeesx(jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info[, jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info]) -> (jobvs, sort, select_, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vs : fwr_dbl, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_dbl, intent inout
    rcondv : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vs : fwr_dbl, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_dbl, intent inout
    rcondv : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vs_, vs = fw_asfortranarray(vs, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    dgeesx_c(fw_jobvs, fw_sort, &select_, fw_sense, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, &sdim, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), vs_shape_, <fwr_dbl_t*>np.PyArray_DATA(vs_), &ldvs, &rconde, &rcondv, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgeesx' wrapper.")
    return (fw_jobvs, fw_sort, select_, fw_sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info,)


cpdef api object dgeev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object wr, object wi, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgeev(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info[, jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info]) -> (jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    dgeev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgeev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info,)


cpdef api object dgeevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object wr, object wi, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object scale, fwr_dbl_t abnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """dgeevx(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray scale_
    cdef fw_shape_t scale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    scale_, scale = fw_asfortranarray(scale, fwr_dbl_t_enum, 1, False)
    fw_copyshape(scale_shape_, np.PyArray_DIMS(scale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    dgeevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, scale_shape_, <fwr_dbl_t*>np.PyArray_DATA(scale_), &abnrm, rconde_shape_, <fwr_dbl_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_dbl_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgeevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info,)


cpdef api object dgegs(object jobvsl, object jobvsr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info[, jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info]) -> (jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vsl : fwr_dbl, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_dbl, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vsl : fwr_dbl, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_dbl, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    dgegs_c(fw_jobvsl, fw_jobvsr, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgegs' wrapper.")
    return (fw_jobvsl, fw_jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info,)


cpdef api object dgegv(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgegv(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    dgegv_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgegv' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info,)


cpdef api object dgelsd(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """dgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    dgelsd_c(&m, &n, &nrhs, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgelsd' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info,)


cpdef api object dgelss(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dgelss_c(&m, &n, &nrhs, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgelss' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info,)


cpdef api object dgelsx(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t info):
    """dgelsx(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dgelsx_c(&m, &n, &nrhs, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgelsx' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info,)


cpdef api object dgelsy(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dgelsy_c(&m, &n, &nrhs, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgelsy' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info,)


cpdef api object dgeqp3(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgeqp3(m, n, a, lda, jpvt, tau, work, lwork, info[, m, n, a, lda, jpvt, tau, work, lwork, info]) -> (m, n, a, lda, jpvt, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwr_dbl_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dgeqp3_c(&m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwr_dbl_t*>np.PyArray_DATA(tau_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgeqp3' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, lwork, info,)


cpdef api object dgeqpf(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, fwi_integer_t info):
    """dgeqpf(m, n, a, lda, jpvt, tau, work, info[, m, n, a, lda, jpvt, tau, work, info]) -> (m, n, a, lda, jpvt, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwr_dbl_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dgeqpf_c(&m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwr_dbl_t*>np.PyArray_DATA(tau_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgeqpf' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, info,)


cpdef api object dgesdd(object jobz, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """dgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info[, jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info]) -> (jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_dbl, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_dbl, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwr_dbl_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    dgesdd_c(fw_jobz, &m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), u_shape_, <fwr_dbl_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwr_dbl_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgesdd' wrapper.")
    return (fw_jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info,)


cpdef api object dgesvd(object jobu, object jobvt, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info[, jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info]) -> (jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_dbl, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_dbl, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobvt = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwr_dbl_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobvt[0] = fw_aschar(jobvt)
    if fw_jobvt[0] == 0:
        raise ValueError("len(jobvt) != 1")
    dgesvd_c(fw_jobu, fw_jobvt, &m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), u_shape_, <fwr_dbl_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwr_dbl_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgesvd' wrapper.")
    return (fw_jobu, fw_jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info,)


cpdef api object dgges(object jobvsl, object jobvsr, object sort, bint selctg, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alphar, object alphai, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, object bwork, fwi_integer_t info):
    """dgges(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info[, jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vsl : fwr_dbl, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_dbl, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vsl : fwr_dbl, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_dbl, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    dgges_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &sdim, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgges' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info,)


cpdef api object dggesx(object jobvsl, object jobvsr, object sort, bint selctg, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alphar, object alphai, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object rconde, object rcondv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, object bwork, fwi_integer_t info):
    """dggesx(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info[, jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vsl : fwr_dbl, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_dbl, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_dbl, 1D array, dimension(2), intent inout
    rcondv : fwr_dbl, 1D array, dimension(2), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vsl : fwr_dbl, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_dbl, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_dbl, 1D array, dimension(2), intent inout
    rcondv : fwr_dbl, 1D array, dimension(2), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    rconde_, rconde = fw_asfortranarray(rconde, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    if not (0 <= 2 <= rconde_shape_[0]):
        raise ValueError("(0 <= 2 <= rconde.shape[0]) not satisifed")
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    if not (0 <= 2 <= rcondv_shape_[0]):
        raise ValueError("(0 <= 2 <= rcondv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    dggesx_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, fw_sense, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &sdim, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vsr_), &ldvsr, rconde_shape_, <fwr_dbl_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_dbl_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dggesx' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, fw_sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info,)


cpdef api object dggev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dggev(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    dggev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dggev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info,)


cpdef api object dggevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object lscale, object rscale, fwr_dbl_t abnrm, fwr_dbl_t bbnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object iwork, object bwork, fwi_integer_t info):
    """dggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_dbl, 1D array, dimension(*), intent inout
    rscale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    bbnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_dbl, 1D array, dimension(*), intent inout
    rscale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    bbnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray lscale_
    cdef fw_shape_t lscale_shape_[1]
    cdef np.ndarray rscale_
    cdef fw_shape_t rscale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    lscale_, lscale = fw_asfortranarray(lscale, fwr_dbl_t_enum, 1, False)
    fw_copyshape(lscale_shape_, np.PyArray_DIMS(lscale_), 1)
    rscale_, rscale = fw_asfortranarray(rscale, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rscale_shape_, np.PyArray_DIMS(rscale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    dggevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, lscale_shape_, <fwr_dbl_t*>np.PyArray_DATA(lscale_), rscale_shape_, <fwr_dbl_t*>np.PyArray_DATA(rscale_), &abnrm, &bbnrm, rconde_shape_, <fwr_dbl_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_dbl_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dggevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info,)


cpdef api object dggsvd(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t n, fwi_integer_t p, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object work, object iwork, fwi_integer_t info):
    """dggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info[, jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info]) -> (jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    u_, u = fw_asfortranarray(u, fwr_dbl_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    dggsvd_c(fw_jobu, fw_jobv, fw_jobq, &m, &n, &p, &k, &l, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwr_dbl_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), u_shape_, <fwr_dbl_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dggsvd' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info,)


cpdef api object dggsvp(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t p, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwr_dbl_t tola, fwr_dbl_t tolb, fwi_integer_t k, fwi_integer_t l, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object iwork, object tau, object work, fwi_integer_t info):
    """dggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info[, jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info]) -> (jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_dbl, intent inout
    tolb : fwr_dbl, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_dbl, intent inout
    tolb : fwr_dbl, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwr_dbl_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    tau_, tau = fw_asfortranarray(tau, fwr_dbl_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    dggsvp_c(fw_jobu, fw_jobv, fw_jobq, &m, &p, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &tola, &tolb, &k, &l, u_shape_, <fwr_dbl_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), tau_shape_, <fwr_dbl_t*>np.PyArray_DATA(tau_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dggsvp' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info,)


cpdef api object dgtcon(object norm, fwi_integer_t n, object dl, object d, object du, object du2, object ipiv, fwr_dbl_t anorm, fwr_dbl_t rcond, object work, object iwork, fwi_integer_t info):
    """dgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info[, norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info]) -> (norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwr_dbl, 1D array, dimension(*), intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    du : fwr_dbl, 1D array, dimension(*), intent inout
    du2 : fwr_dbl, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwr_dbl, 1D array, dimension(*), intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    du : fwr_dbl, 1D array, dimension(*), intent inout
    du2 : fwr_dbl, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, fwr_dbl_t_enum, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, fwr_dbl_t_enum, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, fwr_dbl_t_enum, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    dgtcon_c(fw_norm, &n, dl_shape_, <fwr_dbl_t*>np.PyArray_DATA(dl_), d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), du_shape_, <fwr_dbl_t*>np.PyArray_DATA(du_), du2_shape_, <fwr_dbl_t*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dgtcon' wrapper.")
    return (fw_norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info,)


cpdef api object dhgeqz(object job, object compq, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object t, fwi_integer_t ldt, object alphar, object alphai, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dhgeqz(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info[, job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info]) -> (job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwr_dbl_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    dhgeqz_c(fw_job, fw_compq, fw_compz, &n, &ilo, &ihi, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, t_shape_, <fwr_dbl_t*>np.PyArray_DATA(t_), &ldt, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dhgeqz' wrapper.")
    return (fw_job, fw_compq, fw_compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info,)


cpdef api object dhsein(object side, object eigsrc, object initv, object select, fwi_integer_t n, object h, fwi_integer_t ldh, object wr, object wi, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object ifaill, object ifailr, fwi_integer_t info):
    """dhsein(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info[, side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info]) -> (side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info)

    Parameters
    ----------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_eigsrc = [0, 0]
    cdef char *fw_initv = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray ifaill_
    cdef fw_shape_t ifaill_shape_[1]
    cdef np.ndarray ifailr_
    cdef fw_shape_t ifailr_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    ifaill_, ifaill = fw_asfortranarray(ifaill, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifaill_shape_, np.PyArray_DIMS(ifaill_), 1)
    ifailr_, ifailr = fw_asfortranarray(ifailr, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifailr_shape_, np.PyArray_DIMS(ifailr_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_eigsrc[0] = fw_aschar(eigsrc)
    if fw_eigsrc[0] == 0:
        raise ValueError("len(eigsrc) != 1")
    fw_initv[0] = fw_aschar(initv)
    if fw_initv[0] == 0:
        raise ValueError("len(initv) != 1")
    dhsein_c(fw_side, fw_eigsrc, fw_initv, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), ifaill_shape_, <fwi_integer_t*>np.PyArray_DATA(ifaill_), ifailr_shape_, <fwi_integer_t*>np.PyArray_DATA(ifailr_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dhsein' wrapper.")
    return (fw_side, fw_eigsrc, fw_initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info,)


cpdef api object dhseqr(object job, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dhseqr(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info[, job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info]) -> (job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    dhseqr_c(fw_job, fw_compz, &n, &ilo, &ihi, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dhseqr' wrapper.")
    return (fw_job, fw_compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info,)


cpdef api object dlacn2(fwi_integer_t n, object v, object x, object isgn, fwr_dbl_t est, fwi_integer_t kase, object isave):
    """dlacn2(n, v, x, isgn, est, kase, isave[, n, v, x, isgn, est, kase, isave]) -> (n, v, x, isgn, est, kase, isave)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwr_dbl, 1D array, dimension(*), intent inout
    x : fwr_dbl, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwr_dbl, 1D array, dimension(*), intent inout
    x : fwr_dbl, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray isgn_
    cdef fw_shape_t isgn_shape_[1]
    cdef np.ndarray isave_
    cdef fw_shape_t isave_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    x_, x = fw_asfortranarray(x, fwr_dbl_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    isgn_, isgn = fw_asfortranarray(isgn, fwi_integer_t_enum, 1, False)
    fw_copyshape(isgn_shape_, np.PyArray_DIMS(isgn_), 1)
    isave_, isave = fw_asfortranarray(isave, fwi_integer_t_enum, 1, False)
    fw_copyshape(isave_shape_, np.PyArray_DIMS(isave_), 1)
    if not (0 <= 3 <= isave_shape_[0]):
        raise ValueError("(0 <= 3 <= isave.shape[0]) not satisifed")
    dlacn2_c(&n, v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), x_shape_, <fwr_dbl_t*>np.PyArray_DATA(x_), isgn_shape_, <fwi_integer_t*>np.PyArray_DATA(isgn_), &est, &kase, isave_shape_, <fwi_integer_t*>np.PyArray_DATA(isave_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlacn2' wrapper.")
    return (n, v, x, isgn, est, kase, isave,)


cpdef api object dlacon(fwi_integer_t n, object v, object x, object isgn, fwr_dbl_t est, fwi_integer_t kase):
    """dlacon(n, v, x, isgn, est, kase[, n, v, x, isgn, est, kase]) -> (n, v, x, isgn, est, kase)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwr_dbl, 1D array, dimension(*), intent inout
    x : fwr_dbl, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwr_dbl, 1D array, dimension(*), intent inout
    x : fwr_dbl, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray isgn_
    cdef fw_shape_t isgn_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    x_, x = fw_asfortranarray(x, fwr_dbl_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    isgn_, isgn = fw_asfortranarray(isgn, fwi_integer_t_enum, 1, False)
    fw_copyshape(isgn_shape_, np.PyArray_DIMS(isgn_), 1)
    dlacon_c(&n, v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), x_shape_, <fwr_dbl_t*>np.PyArray_DATA(x_), isgn_shape_, <fwi_integer_t*>np.PyArray_DATA(isgn_), &est, &kase, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlacon' wrapper.")
    return (n, v, x, isgn, est, kase,)


cpdef api object dladiv(fwr_dbl_t a, fwr_dbl_t b, fwr_dbl_t c, fwr_dbl_t d, fwr_dbl_t p, fwr_dbl_t q):
    """dladiv(a, b, c, d, p, q[, a, b, c, d, p, q]) -> (a, b, c, d, p, q)

    Parameters
    ----------
    a : fwr_dbl, intent inout
    b : fwr_dbl, intent inout
    c : fwr_dbl, intent inout
    d : fwr_dbl, intent inout
    p : fwr_dbl, intent inout
    q : fwr_dbl, intent inout

    Returns
    -------
    a : fwr_dbl, intent inout
    b : fwr_dbl, intent inout
    c : fwr_dbl, intent inout
    d : fwr_dbl, intent inout
    p : fwr_dbl, intent inout
    q : fwr_dbl, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dladiv_c(&a, &b, &c, &d, &p, &q, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dladiv' wrapper.")
    return (a, b, c, d, p, q,)


cpdef api object dlaed0(fwi_integer_t icompq, fwi_integer_t qsiz, fwi_integer_t n, object d, object e, object q, fwi_integer_t ldq, object qstore, fwi_integer_t ldqs, object work, object iwork, fwi_integer_t info):
    """dlaed0(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info[, icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info]) -> (icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwr_dbl, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwr_dbl, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    qstore_, qstore = fw_asfortranarray(qstore, fwr_dbl_t_enum, 2, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 2)
    if ldqs != qstore_shape_[0]:
        raise ValueError("(ldqs == qstore.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    dlaed0_c(&icompq, &qsiz, &n, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, qstore_shape_, <fwr_dbl_t*>np.PyArray_DATA(qstore_), &ldqs, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaed0' wrapper.")
    return (icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info,)


cpdef api object dlaed7(fwi_integer_t icompq, fwi_integer_t n, fwi_integer_t qsiz, fwi_integer_t tlvls, fwi_integer_t curlvl, fwi_integer_t curpbm, object d, object q, fwi_integer_t ldq, object indxq, fwr_dbl_t rho, fwi_integer_t cutpnt, object qstore, object qptr, object prmptr, object perm, object givptr, object givcol, object givnum, object work, object iwork, fwi_integer_t info):
    """dlaed7(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info[, icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info]) -> (icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_dbl, intent inout
    cutpnt : fwi_integer, intent inout
    qstore : fwr_dbl, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_dbl, intent inout
    cutpnt : fwi_integer, intent inout
    qstore : fwr_dbl, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[1]
    cdef np.ndarray qptr_
    cdef fw_shape_t qptr_shape_[1]
    cdef np.ndarray prmptr_
    cdef fw_shape_t prmptr_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    qstore_, qstore = fw_asfortranarray(qstore, fwr_dbl_t_enum, 1, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 1)
    qptr_, qptr = fw_asfortranarray(qptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(qptr_shape_, np.PyArray_DIMS(qptr_), 1)
    prmptr_, prmptr = fw_asfortranarray(prmptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(prmptr_shape_, np.PyArray_DIMS(prmptr_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_dbl_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    dlaed7_c(&icompq, &n, &qsiz, &tlvls, &curlvl, &curpbm, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), &rho, &cutpnt, qstore_shape_, <fwr_dbl_t*>np.PyArray_DATA(qstore_), qptr_shape_, <fwi_integer_t*>np.PyArray_DATA(qptr_), prmptr_shape_, <fwi_integer_t*>np.PyArray_DATA(prmptr_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_dbl_t*>np.PyArray_DATA(givnum_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaed7' wrapper.")
    return (icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info,)


cpdef api object dlaed8(fwi_integer_t icompq, fwi_integer_t k, fwi_integer_t n, fwi_integer_t qsiz, object d, object q, fwi_integer_t ldq, object indxq, fwr_dbl_t rho, fwi_integer_t cutpnt, object z, object dlamda, object q2, fwi_integer_t ldq2, object w, object perm, fwi_integer_t givptr, object givcol, object givnum, object indxp, object indx, fwi_integer_t info):
    """dlaed8(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info[, icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info]) -> (icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_dbl, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_dbl, 1D array, dimension(*), intent inout
    dlamda : fwr_dbl, 1D array, dimension(*), intent inout
    q2 : fwr_dbl, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_dbl, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_dbl, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_dbl, 1D array, dimension(*), intent inout
    dlamda : fwr_dbl, 1D array, dimension(*), intent inout
    q2 : fwr_dbl, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_dbl, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray q2_
    cdef fw_shape_t q2_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray indxp_
    cdef fw_shape_t indxp_shape_[1]
    cdef np.ndarray indx_
    cdef fw_shape_t indx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    dlamda_, dlamda = fw_asfortranarray(dlamda, fwr_dbl_t_enum, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    q2_, q2 = fw_asfortranarray(q2, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q2_shape_, np.PyArray_DIMS(q2_), 2)
    if ldq2 != q2_shape_[0]:
        raise ValueError("(ldq2 == q2.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwr_dbl_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_dbl_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    indxp_, indxp = fw_asfortranarray(indxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxp_shape_, np.PyArray_DIMS(indxp_), 1)
    indx_, indx = fw_asfortranarray(indx, fwi_integer_t_enum, 1, False)
    fw_copyshape(indx_shape_, np.PyArray_DIMS(indx_), 1)
    dlaed8_c(&icompq, &k, &n, &qsiz, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), &rho, &cutpnt, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), dlamda_shape_, <fwr_dbl_t*>np.PyArray_DATA(dlamda_), q2_shape_, <fwr_dbl_t*>np.PyArray_DATA(q2_), &ldq2, w_shape_, <fwr_dbl_t*>np.PyArray_DATA(w_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_dbl_t*>np.PyArray_DATA(givnum_), indxp_shape_, <fwi_integer_t*>np.PyArray_DATA(indxp_), indx_shape_, <fwi_integer_t*>np.PyArray_DATA(indx_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaed8' wrapper.")
    return (icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info,)


cpdef api object dlaein(bint rightv, bint noinit, fwi_integer_t n, object h, fwi_integer_t ldh, fwr_dbl_t wr, fwr_dbl_t wi, object vr, object vi, object b, fwi_integer_t ldb, object work, fwr_dbl_t eps3, fwr_dbl_t smlnum, fwr_dbl_t bignum, fwi_integer_t info):
    """dlaein(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info[, rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info]) -> (rightv_, noinit_, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info)

    Parameters
    ----------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, intent inout
    wi : fwr_dbl, intent inout
    vr : fwr_dbl, 1D array, dimension(*), intent inout
    vi : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    eps3 : fwr_dbl, intent inout
    smlnum : fwr_dbl, intent inout
    bignum : fwr_dbl, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, intent inout
    wi : fwr_dbl, intent inout
    vr : fwr_dbl, 1D array, dimension(*), intent inout
    vi : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    eps3 : fwr_dbl, intent inout
    smlnum : fwr_dbl, intent inout
    bignum : fwr_dbl, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t rightv_
    cdef fwl_logical_t noinit_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[1]
    cdef np.ndarray vi_
    cdef fw_shape_t vi_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    rightv_ = 1 if rightv else 0
    noinit_ = 1 if noinit else 0
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 1)
    vi_, vi = fw_asfortranarray(vi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(vi_shape_, np.PyArray_DIMS(vi_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dlaein_c(&rightv_, &noinit_, &n, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, &wr, &wi, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), vi_shape_, <fwr_dbl_t*>np.PyArray_DATA(vi_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &eps3, &smlnum, &bignum, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaein' wrapper.")
    return (rightv_, noinit_, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info,)


cpdef api object dlag2(object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwr_dbl_t safmin, fwr_dbl_t scale1, fwr_dbl_t scale2, fwr_dbl_t wr1, fwr_dbl_t wr2, fwr_dbl_t wi):
    """dlag2(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi[, a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi]) -> (a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi)

    Parameters
    ----------
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    safmin : fwr_dbl, intent inout
    scale1 : fwr_dbl, intent inout
    scale2 : fwr_dbl, intent inout
    wr1 : fwr_dbl, intent inout
    wr2 : fwr_dbl, intent inout
    wi : fwr_dbl, intent inout

    Returns
    -------
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    safmin : fwr_dbl, intent inout
    scale1 : fwr_dbl, intent inout
    scale2 : fwr_dbl, intent inout
    wr1 : fwr_dbl, intent inout
    wr2 : fwr_dbl, intent inout
    wi : fwr_dbl, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    dlag2_c(a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &safmin, &scale1, &scale2, &wr1, &wr2, &wi, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlag2' wrapper.")
    return (a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi,)


cpdef api object dlag2s(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object sa, fwi_integer_t ldsa, fwi_integer_t info):
    """dlag2s(m, n, a, lda, sa, ldsa, info[, m, n, a, lda, sa, ldsa, info]) -> (m, n, a, lda, sa, ldsa, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwr_real, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwr_real, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray sa_
    cdef fw_shape_t sa_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    sa_, sa = fw_asfortranarray(sa, fwr_real_t_enum, 2, False)
    fw_copyshape(sa_shape_, np.PyArray_DIMS(sa_), 2)
    if ldsa != sa_shape_[0]:
        raise ValueError("(ldsa == sa.shape[0]) not satisifed")
    dlag2s_c(&m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, sa_shape_, <fwr_real_t*>np.PyArray_DATA(sa_), &ldsa, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlag2s' wrapper.")
    return (m, n, a, lda, sa, ldsa, info,)


cpdef api object dlahqr(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t info):
    """dlahqr(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info[, wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    dlahqr_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), &iloz, &ihiz, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlahqr' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info,)


cpdef api object dlalsd(object uplo, fwi_integer_t smlsiz, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwr_dbl_t rcond, fwi_integer_t rank, object work, object iwork, fwi_integer_t info):
    """dlalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info[, uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info]) -> (uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    dlalsd_c(fw_uplo, &smlsiz, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &rcond, &rank, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlalsd' wrapper.")
    return (fw_uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info,)


cpdef api object dlaqr0(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dlaqr0(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dlaqr0_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), &iloz, &ihiz, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaqr0' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object dlaqr1(fwi_integer_t n, object h, fwi_integer_t ldh, fwr_dbl_t sr1, fwr_dbl_t si1, fwr_dbl_t sr2, fwr_dbl_t si2, object v):
    """dlaqr1(n, h, ldh, sr1, si1, sr2, si2, v[, n, h, ldh, sr1, si1, sr2, si2, v]) -> (n, h, ldh, sr1, si1, sr2, si2, v)

    Parameters
    ----------
    n : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    sr1 : fwr_dbl, intent inout
    si1 : fwr_dbl, intent inout
    sr2 : fwr_dbl, intent inout
    si2 : fwr_dbl, intent inout
    v : fwr_dbl, 1D array, dimension(*), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    sr1 : fwr_dbl, intent inout
    si1 : fwr_dbl, intent inout
    sr2 : fwr_dbl, intent inout
    si2 : fwr_dbl, intent inout
    v : fwr_dbl, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    dlaqr1_c(&n, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, &sr1, &si1, &sr2, &si2, v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaqr1' wrapper.")
    return (n, h, ldh, sr1, si1, sr2, si2, v,)


cpdef api object dlaqr2(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sr, object si, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """dlaqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_dbl, 1D array, dimension(*), intent inout
    si : fwr_dbl, 1D array, dimension(*), intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_dbl, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_dbl, 1D array, dimension(*), intent inout
    si : fwr_dbl, 1D array, dimension(*), intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_dbl, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sr_
    cdef fw_shape_t sr_shape_[1]
    cdef np.ndarray si_
    cdef fw_shape_t si_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sr_, sr = fw_asfortranarray(sr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(sr_shape_, np.PyArray_DIMS(sr_), 1)
    si_, si = fw_asfortranarray(si, fwr_dbl_t_enum, 1, False)
    fw_copyshape(si_shape_, np.PyArray_DIMS(si_), 1)
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwr_dbl_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwr_dbl_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dlaqr2_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sr_shape_, <fwr_dbl_t*>np.PyArray_DATA(sr_), si_shape_, <fwr_dbl_t*>np.PyArray_DATA(si_), v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwr_dbl_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwr_dbl_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaqr2' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object dlaqr3(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sr, object si, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """dlaqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_dbl, 1D array, dimension(*), intent inout
    si : fwr_dbl, 1D array, dimension(*), intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_dbl, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_dbl, 1D array, dimension(*), intent inout
    si : fwr_dbl, 1D array, dimension(*), intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_dbl, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sr_
    cdef fw_shape_t sr_shape_[1]
    cdef np.ndarray si_
    cdef fw_shape_t si_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sr_, sr = fw_asfortranarray(sr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(sr_shape_, np.PyArray_DIMS(sr_), 1)
    si_, si = fw_asfortranarray(si, fwr_dbl_t_enum, 1, False)
    fw_copyshape(si_shape_, np.PyArray_DIMS(si_), 1)
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwr_dbl_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwr_dbl_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dlaqr3_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sr_shape_, <fwr_dbl_t*>np.PyArray_DATA(sr_), si_shape_, <fwr_dbl_t*>np.PyArray_DATA(si_), v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwr_dbl_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwr_dbl_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaqr3' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object dlaqr4(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dlaqr4(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dlaqr4_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), &iloz, &ihiz, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaqr4' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object dlaqr5(bint wantt, bint wantz, fwi_integer_t kacc22, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nshfts, object sr, object si, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object v, fwi_integer_t ldv, object u, fwi_integer_t ldu, fwi_integer_t nv, object wv, fwi_integer_t ldwv, fwi_integer_t nh, object wh, fwi_integer_t ldwh):
    """dlaqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh[, wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh]) -> (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    sr : fwr_dbl, 1D array, dimension(*), intent inout
    si : fwr_dbl, 1D array, dimension(*), intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_dbl, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwr_dbl, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    sr : fwr_dbl, 1D array, dimension(*), intent inout
    si : fwr_dbl, 1D array, dimension(*), intent inout
    h : fwr_dbl, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwr_dbl, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwr_dbl, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_dbl, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwr_dbl, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray sr_
    cdef fw_shape_t sr_shape_[1]
    cdef np.ndarray si_
    cdef fw_shape_t si_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray wh_
    cdef fw_shape_t wh_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    sr_, sr = fw_asfortranarray(sr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(sr_shape_, np.PyArray_DIMS(sr_), 1)
    si_, si = fw_asfortranarray(si, fwr_dbl_t_enum, 1, False)
    fw_copyshape(si_shape_, np.PyArray_DIMS(si_), 1)
    h_, h = fw_asfortranarray(h, fwr_dbl_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_dbl_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwr_dbl_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwr_dbl_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    wh_, wh = fw_asfortranarray(wh, fwr_dbl_t_enum, 2, False)
    fw_copyshape(wh_shape_, np.PyArray_DIMS(wh_), 2)
    if ldwh != wh_shape_[0]:
        raise ValueError("(ldwh == wh.shape[0]) not satisifed")
    dlaqr5_c(&wantt_, &wantz_, &kacc22, &n, &ktop, &kbot, &nshfts, sr_shape_, <fwr_dbl_t*>np.PyArray_DATA(sr_), si_shape_, <fwr_dbl_t*>np.PyArray_DATA(si_), h_shape_, <fwr_dbl_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, v_shape_, <fwr_dbl_t*>np.PyArray_DATA(v_), &ldv, u_shape_, <fwr_dbl_t*>np.PyArray_DATA(u_), &ldu, &nv, wv_shape_, <fwr_dbl_t*>np.PyArray_DATA(wv_), &ldwv, &nh, wh_shape_, <fwr_dbl_t*>np.PyArray_DATA(wh_), &ldwh, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlaqr5' wrapper.")
    return (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh,)


cpdef api object dlat2s(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object sa, fwi_integer_t ldsa, fwi_integer_t info):
    """dlat2s(uplo, n, a, lda, sa, ldsa, info[, uplo, n, a, lda, sa, ldsa, info]) -> (uplo, n, a, lda, sa, ldsa, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwr_real, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwr_real, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray sa_
    cdef fw_shape_t sa_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    sa_, sa = fw_asfortranarray(sa, fwr_real_t_enum, 2, False)
    fw_copyshape(sa_shape_, np.PyArray_DIMS(sa_), 2)
    if ldsa != sa_shape_[0]:
        raise ValueError("(ldsa == sa.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    dlat2s_c(fw_uplo, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, sa_shape_, <fwr_real_t*>np.PyArray_DATA(sa_), &ldsa, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dlat2s' wrapper.")
    return (fw_uplo, n, a, lda, sa, ldsa, info,)


cpdef api object dptrfs(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, fwi_integer_t info):
    """dptrfs(n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info[, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info]) -> (n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_dbl_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwr_dbl_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dptrfs_c(&n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), df_shape_, <fwr_dbl_t*>np.PyArray_DATA(df_), ef_shape_, <fwr_dbl_t*>np.PyArray_DATA(ef_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwr_dbl_t*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <fwr_dbl_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_dbl_t*>np.PyArray_DATA(berr_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dptrfs' wrapper.")
    return (n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info,)


cpdef api object dptsvx(object fact, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, fwr_dbl_t rcond, object ferr, object berr, object work, fwi_integer_t info):
    """dptsvx(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info[, fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info]) -> (fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info)

    Parameters
    ----------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_dbl_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwr_dbl_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    dptsvx_c(fw_fact, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), df_shape_, <fwr_dbl_t*>np.PyArray_DATA(df_), ef_shape_, <fwr_dbl_t*>np.PyArray_DATA(ef_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwr_dbl_t*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <fwr_dbl_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_dbl_t*>np.PyArray_DATA(berr_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dptsvx' wrapper.")
    return (fw_fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info,)


cpdef api object dpttrs(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwi_integer_t info):
    """dpttrs(n, nrhs, d, e, b, ldb, info[, n, nrhs, d, e, b, ldb, info]) -> (n, nrhs, d, e, b, ldb, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    dpttrs_c(&n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dpttrs' wrapper.")
    return (n, nrhs, d, e, b, ldb, info,)


cpdef api object dptts2(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb):
    """dptts2(n, nrhs, d, e, b, ldb[, n, nrhs, d, e, b, ldb]) -> (n, nrhs, d, e, b, ldb)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    dptts2_c(&n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dptts2' wrapper.")
    return (n, nrhs, d, e, b, ldb,)


cpdef api object dsgesv(fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object work, object swork, fwi_integer_t iter, fwi_integer_t info):
    """dsgesv(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info[, n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info]) -> (n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwr_dbl, 2D array, dimension(n, *), intent inout
    swork : fwr_real, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwr_dbl, 2D array, dimension(n, *), intent inout
    swork : fwr_real, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef np.ndarray swork_
    cdef fw_shape_t swork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwr_dbl_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if n != work_shape_[0]:
        raise ValueError("(n == work.shape[0]) not satisifed")
    swork_, swork = fw_asfortranarray(swork, fwr_real_t_enum, 1, False)
    fw_copyshape(swork_shape_, np.PyArray_DIMS(swork_), 1)
    dsgesv_c(&n, &nrhs, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwr_dbl_t*>np.PyArray_DATA(x_), &ldx, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), swork_shape_, <fwr_real_t*>np.PyArray_DATA(swork_), &iter, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dsgesv' wrapper.")
    return (n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info,)


cpdef api object dspcon(object uplo, fwi_integer_t n, object ap, object ipiv, fwr_dbl_t anorm, fwr_dbl_t rcond, object work, object iwork, fwi_integer_t info):
    """dspcon(uplo, n, ap, ipiv, anorm, rcond, work, iwork, info[, uplo, n, ap, ipiv, anorm, rcond, work, iwork, info]) -> (uplo, n, ap, ipiv, anorm, rcond, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwr_dbl, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwr_dbl, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    dspcon_c(fw_uplo, &n, ap_shape_, <fwr_dbl_t*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dspcon' wrapper.")
    return (fw_uplo, n, ap, ipiv, anorm, rcond, work, iwork, info,)


cpdef api object dsposv(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object work, object swork, fwi_integer_t iter, fwi_integer_t info):
    """dsposv(uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, iter, info[, uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, iter, info]) -> (uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, iter, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwr_dbl, 2D array, dimension(n, *), intent inout
    swork : fwr_real, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_dbl, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwr_dbl, 2D array, dimension(n, *), intent inout
    swork : fwr_real, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef np.ndarray swork_
    cdef fw_shape_t swork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwr_dbl_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if n != work_shape_[0]:
        raise ValueError("(n == work.shape[0]) not satisifed")
    swork_, swork = fw_asfortranarray(swork, fwr_real_t_enum, 1, False)
    fw_copyshape(swork_shape_, np.PyArray_DIMS(swork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    dsposv_c(fw_uplo, &n, &nrhs, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwr_dbl_t*>np.PyArray_DATA(x_), &ldx, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), swork_shape_, <fwr_real_t*>np.PyArray_DATA(swork_), &iter, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dsposv' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, iter, info,)


cpdef api object dstedc(object compz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """dstedc(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info[, compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info]) -> (compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    dstedc_c(fw_compz, &n, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dstedc' wrapper.")
    return (fw_compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info,)


cpdef api object dsycon(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwr_dbl_t anorm, fwr_dbl_t rcond, object work, object iwork, fwi_integer_t info):
    """dsycon(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info[, uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info]) -> (uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    dsycon_c(fw_uplo, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dsycon' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info,)


cpdef api object dtgevc(object side, object howmny, object select, fwi_integer_t n, object s, fwi_integer_t lds, object p, fwi_integer_t ldp, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, fwi_integer_t info):
    """dtgevc(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info[, side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info]) -> (side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwr_dbl, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwr_dbl, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwr_dbl, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwr_dbl, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[2]
    cdef np.ndarray p_
    cdef fw_shape_t p_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 2, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 2)
    if lds != s_shape_[0]:
        raise ValueError("(lds == s.shape[0]) not satisifed")
    p_, p = fw_asfortranarray(p, fwr_dbl_t_enum, 2, False)
    fw_copyshape(p_shape_, np.PyArray_DIMS(p_), 2)
    if ldp != p_shape_[0]:
        raise ValueError("(ldp == p.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    dtgevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), &lds, p_shape_, <fwr_dbl_t*>np.PyArray_DATA(p_), &ldp, vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtgevc' wrapper.")
    return (fw_side, fw_howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info,)


cpdef api object dtgex2(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t j1, fwi_integer_t n1, fwi_integer_t n2, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dtgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dtgex2_c(&wantq_, &wantz_, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, &j1, &n1, &n2, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtgex2' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info,)


cpdef api object dtgexc(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t ifst, fwi_integer_t ilst, object work, fwi_integer_t lwork, fwi_integer_t info):
    """dtgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    dtgexc_c(&wantq_, &wantz_, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, &ifst, &ilst, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtgexc' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info,)


cpdef api object dtgsen(fwi_integer_t ijob, bint wantq, bint wantz, object select, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t m, fwr_dbl_t pl, fwr_dbl_t pr, object dif, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """dtgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info[, ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info]) -> (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_dbl, intent inout
    pr : fwr_dbl, intent inout
    dif : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_dbl, 1D array, dimension(*), intent inout
    alphai : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_dbl, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_dbl, intent inout
    pr : fwr_dbl, intent inout
    dif : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray dif_
    cdef fw_shape_t dif_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    dif_, dif = fw_asfortranarray(dif, fwr_dbl_t_enum, 1, False)
    fw_copyshape(dif_shape_, np.PyArray_DIMS(dif_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    dtgsen_c(&ijob, &wantq_, &wantz_, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_dbl_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), &ldz, &m, &pl, &pr, dif_shape_, <fwr_dbl_t*>np.PyArray_DATA(dif_), work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtgsen' wrapper.")
    return (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info,)


cpdef api object dtgsy2(object trans, fwi_integer_t ijob, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object d, fwi_integer_t ldd, object e, fwi_integer_t lde, object f, fwi_integer_t ldf, fwr_dbl_t scale, fwr_dbl_t rdsum, fwr_dbl_t rdscal, object iwork, fwi_integer_t pq, fwi_integer_t info):
    """dtgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info[, trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info]) -> (trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info)

    Parameters
    ----------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwr_dbl, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwr_dbl, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwr_dbl, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwr_dbl, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_dbl, intent inout
    rdsum : fwr_dbl, intent inout
    rdscal : fwr_dbl, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pq : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_dbl, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwr_dbl, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwr_dbl, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwr_dbl, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwr_dbl, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_dbl, intent inout
    rdsum : fwr_dbl, intent inout
    rdscal : fwr_dbl, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pq : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[2]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[2]
    cdef np.ndarray f_
    cdef fw_shape_t f_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_dbl_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwr_dbl_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 2, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 2)
    if ldd != d_shape_[0]:
        raise ValueError("(ldd == d.shape[0]) not satisifed")
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 2, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 2)
    if lde != e_shape_[0]:
        raise ValueError("(lde == e.shape[0]) not satisifed")
    f_, f = fw_asfortranarray(f, fwr_dbl_t_enum, 2, False)
    fw_copyshape(f_shape_, np.PyArray_DIMS(f_), 2)
    if ldf != f_shape_[0]:
        raise ValueError("(ldf == f.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    dtgsy2_c(fw_trans, &ijob, &m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_dbl_t*>np.PyArray_DATA(b_), &ldb, c_shape_, <fwr_dbl_t*>np.PyArray_DATA(c_), &ldc, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), &ldd, e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), &lde, f_shape_, <fwr_dbl_t*>np.PyArray_DATA(f_), &ldf, &scale, &rdsum, &rdscal, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &pq, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtgsy2' wrapper.")
    return (fw_trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info,)


cpdef api object dtrevc(object side, object howmny, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, fwi_integer_t info):
    """dtrevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info[, side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info]) -> (side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwr_dbl, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_dbl, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwr_dbl_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_dbl_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    dtrevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwr_dbl_t*>np.PyArray_DATA(t_), &ldt, vl_shape_, <fwr_dbl_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_dbl_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtrevc' wrapper.")
    return (fw_side, fw_howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info,)


cpdef api object dtrexc(object compq, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, fwi_integer_t ifst, fwi_integer_t ilst, object work, fwi_integer_t info):
    """dtrexc(compq, n, t, ldt, q, ldq, ifst, ilst, work, info[, compq, n, t, ldt, q, ldq, ifst, ilst, work, info]) -> (compq, n, t, ldt, q, ldq, ifst, ilst, work, info)

    Parameters
    ----------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    t_, t = fw_asfortranarray(t, fwr_dbl_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    dtrexc_c(fw_compq, &n, t_shape_, <fwr_dbl_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, &ifst, &ilst, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtrexc' wrapper.")
    return (fw_compq, n, t, ldt, q, ldq, ifst, ilst, work, info,)


cpdef api object dtrsen(object job, object compq, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, object wr, object wi, fwi_integer_t m, fwr_dbl_t s, fwr_dbl_t sep, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """dtrsen(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info[, job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info]) -> (job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_dbl, intent inout
    sep : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_dbl, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_dbl, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    wr : fwr_dbl, 1D array, dimension(*), intent inout
    wi : fwr_dbl, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_dbl, intent inout
    sep : fwr_dbl, intent inout
    work : fwr_dbl, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwr_dbl_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_dbl_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_dbl_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    work_, work = fw_asfortranarray(work, fwr_dbl_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    dtrsen_c(fw_job, fw_compq, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwr_dbl_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwr_dbl_t*>np.PyArray_DATA(q_), &ldq, wr_shape_, <fwr_dbl_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_dbl_t*>np.PyArray_DATA(wi_), &m, &s, &sep, work_shape_, <fwr_dbl_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dtrsen' wrapper.")
    return (fw_job, fw_compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info,)


cpdef api object dzsum1(fwi_integer_t n, object cx, fwi_integer_t incx):
    """dzsum1(n, cx, incx[, n, cx, incx]) -> (fw_ret_arg, n, cx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cx : fwc_complex_x16, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwr_dbl, intent out
    n : fwi_integer, intent inout
    cx : fwc_complex_x16, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray cx_
    cdef fw_shape_t cx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fwr_dbl_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cx_, cx = fw_asfortranarray(cx, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(cx_shape_, np.PyArray_DIMS(cx_), 1)
    dzsum1_c(&fw_ret_arg, &n, cx_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(cx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'dzsum1' wrapper.")
    return (fw_ret_arg, n, cx, incx,)


cpdef api object icmax1(fwi_integer_t n, object cx, fwi_integer_t incx):
    """icmax1(n, cx, incx[, n, cx, incx]) -> (fw_ret_arg, n, cx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cx : fwc_complex, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    n : fwi_integer, intent inout
    cx : fwc_complex, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray cx_
    cdef fw_shape_t cx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cx_, cx = fw_asfortranarray(cx, fwc_complex_t_enum, 1, False)
    fw_copyshape(cx_shape_, np.PyArray_DIMS(cx_), 1)
    icmax1_c(&fw_ret_arg, &n, cx_shape_, <fwc_complex_t*>np.PyArray_DATA(cx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'icmax1' wrapper.")
    return (fw_ret_arg, n, cx, incx,)


cpdef api object ieeeck(fwi_integer_t ispec, fwr_real_t zero, fwr_real_t one):
    """ieeeck(ispec, zero, one[, ispec, zero, one]) -> (fw_ret_arg, ispec, zero, one)

    Parameters
    ----------
    ispec : fwi_integer, intent inout
    zero : fwr_real, intent inout
    one : fwr_real, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    ispec : fwi_integer, intent inout
    zero : fwr_real, intent inout
    one : fwr_real, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ieeeck_c(&fw_ret_arg, &ispec, &zero, &one, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ieeeck' wrapper.")
    return (fw_ret_arg, ispec, zero, one,)


cpdef api object ilaclc(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """ilaclc(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ilaclc_c(&fw_ret_arg, &m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaclc' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object ilaclr(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """ilaclr(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ilaclr_c(&fw_ret_arg, &m, &n, a_shape_, <fwc_complex_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaclr' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object iladiag(object diag):
    """iladiag(diag[, diag]) -> (fw_ret_arg, diag)

    Parameters
    ----------
    diag : object_, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    diag : object_, intent inout

    """
    cdef char *fw_diag = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    iladiag_c(&fw_ret_arg, fw_diag, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'iladiag' wrapper.")
    return (fw_ret_arg, fw_diag,)


cpdef api object iladlc(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """iladlc(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    iladlc_c(&fw_ret_arg, &m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'iladlc' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object iladlr(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """iladlr(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    iladlr_c(&fw_ret_arg, &m, &n, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'iladlr' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object ilaenv(fwi_integer_t ispec, fw_bytes name, fw_bytes opts, fwi_integer_t n1, fwi_integer_t n2, fwi_integer_t n3, fwi_integer_t n4):
    """ilaenv(ispec, name, opts, n1, n2, n3, n4[, ispec, name, opts, n1, n2, n3, n4]) -> (fw_ret_arg, ispec, fw_name, fw_opts, n1, n2, n3, n4)

    Parameters
    ----------
    ispec : fwi_integer, intent inout
    name : fw_character_xX, len *, intent inout
    opts : fw_character_xX, len *, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    n3 : fwi_integer, intent inout
    n4 : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    ispec : fwi_integer, intent inout
    name : fw_character_xX, len *, intent inout
    opts : fw_character_xX, len *, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    n3 : fwi_integer, intent inout
    n4 : fwi_integer, intent inout

    """
    cdef fw_bytes fw_name
    cdef fw_shape_t fw_name_len
    cdef char *fw_name_buf
    cdef fw_bytes fw_opts
    cdef fw_shape_t fw_opts_len
    cdef char *fw_opts_buf
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_name_len = len(name)
    fw_name = PyBytes_FromStringAndSize(NULL, fw_name_len)
    fw_name_buf = <char*>fw_name
    memcpy(fw_name_buf, <char*>name, fw_name_len+1)
    fw_opts_len = len(opts)
    fw_opts = PyBytes_FromStringAndSize(NULL, fw_opts_len)
    fw_opts_buf = <char*>fw_opts
    memcpy(fw_opts_buf, <char*>opts, fw_opts_len+1)
    ilaenv_c(&fw_ret_arg, &ispec, &fw_name_len, fw_name_buf, &fw_opts_len, fw_opts_buf, &n1, &n2, &n3, &n4, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaenv' wrapper.")
    return (fw_ret_arg, ispec, fw_name, fw_opts, n1, n2, n3, n4,)


cpdef api object ilaprec(object prec):
    """ilaprec(prec[, prec]) -> (fw_ret_arg, prec)

    Parameters
    ----------
    prec : object_, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    prec : object_, intent inout

    """
    cdef char *fw_prec = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_prec[0] = fw_aschar(prec)
    if fw_prec[0] == 0:
        raise ValueError("len(prec) != 1")
    ilaprec_c(&fw_ret_arg, fw_prec, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaprec' wrapper.")
    return (fw_ret_arg, fw_prec,)


cpdef api object ilaslc(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """ilaslc(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ilaslc_c(&fw_ret_arg, &m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaslc' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object ilaslr(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """ilaslr(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ilaslr_c(&fw_ret_arg, &m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaslr' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object ilatrans(object trans):
    """ilatrans(trans[, trans]) -> (fw_ret_arg, trans)

    Parameters
    ----------
    trans : object_, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    trans : object_, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    ilatrans_c(&fw_ret_arg, fw_trans, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilatrans' wrapper.")
    return (fw_ret_arg, fw_trans,)


cpdef api object ilauplo(object uplo):
    """ilauplo(uplo[, uplo]) -> (fw_ret_arg, uplo)

    Parameters
    ----------
    uplo : object_, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    uplo : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    ilauplo_c(&fw_ret_arg, fw_uplo, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilauplo' wrapper.")
    return (fw_ret_arg, fw_uplo,)


cpdef api object ilaver(fwi_integer_t vers_major, fwi_integer_t vers_minor, fwi_integer_t vers_patch):
    """ilaver(vers_major, vers_minor, vers_patch[, vers_major, vers_minor, vers_patch]) -> (vers_major, vers_minor, vers_patch)

    Parameters
    ----------
    vers_major : fwi_integer, intent inout
    vers_minor : fwi_integer, intent inout
    vers_patch : fwi_integer, intent inout

    Returns
    -------
    vers_major : fwi_integer, intent inout
    vers_minor : fwi_integer, intent inout
    vers_patch : fwi_integer, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ilaver_c(&vers_major, &vers_minor, &vers_patch, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilaver' wrapper.")
    return (vers_major, vers_minor, vers_patch,)


cpdef api object ilazlc(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """ilazlc(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ilazlc_c(&fw_ret_arg, &m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilazlc' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object ilazlr(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda):
    """ilazlr(m, n, a, lda[, m, n, a, lda]) -> (fw_ret_arg, m, n, a, lda)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ilazlr_c(&fw_ret_arg, &m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ilazlr' wrapper.")
    return (fw_ret_arg, m, n, a, lda,)


cpdef api object iparmq(fwi_integer_t ispec, object name, object opts, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, fwi_integer_t lwork):
    """iparmq(ispec, name, opts, n, ilo, ihi, lwork[, ispec, name, opts, n, ilo, ihi, lwork]) -> (fw_ret_arg, ispec, name, opts, n, ilo, ihi, lwork)

    Parameters
    ----------
    ispec : fwi_integer, intent inout
    name : object_, intent inout
    opts : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    ispec : fwi_integer, intent inout
    name : object_, intent inout
    opts : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lwork : fwi_integer, intent inout

    """
    cdef char *fw_name = [0, 0]
    cdef char *fw_opts = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_name[0] = fw_aschar(name)
    if fw_name[0] == 0:
        raise ValueError("len(name) != 1")
    fw_opts[0] = fw_aschar(opts)
    if fw_opts[0] == 0:
        raise ValueError("len(opts) != 1")
    iparmq_c(&fw_ret_arg, &ispec, fw_name, fw_opts, &n, &ilo, &ihi, &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'iparmq' wrapper.")
    return (fw_ret_arg, ispec, fw_name, fw_opts, n, ilo, ihi, lwork,)


cpdef api object izmax1(fwi_integer_t n, object cx, fwi_integer_t incx):
    """izmax1(n, cx, incx[, n, cx, incx]) -> (fw_ret_arg, n, cx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cx : fwc_complex_x16, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    n : fwi_integer, intent inout
    cx : fwc_complex_x16, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray cx_
    cdef fw_shape_t cx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cx_, cx = fw_asfortranarray(cx, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(cx_shape_, np.PyArray_DIMS(cx_), 1)
    izmax1_c(&fw_ret_arg, &n, cx_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(cx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'izmax1' wrapper.")
    return (fw_ret_arg, n, cx, incx,)


cpdef api object lsamen(fwi_integer_t n, fw_bytes ca, fw_bytes cb):
    """lsamen(n, ca, cb[, n, ca, cb]) -> (fw_ret_arg, n, fw_ca, fw_cb)

    Parameters
    ----------
    n : fwi_integer, intent inout
    ca : fw_character_xX, len *, intent inout
    cb : fw_character_xX, len *, intent inout

    Returns
    -------
    fw_ret_arg : fwl_logical, intent out
    n : fwi_integer, intent inout
    ca : fw_character_xX, len *, intent inout
    cb : fw_character_xX, len *, intent inout

    """
    cdef fw_bytes fw_ca
    cdef fw_shape_t fw_ca_len
    cdef char *fw_ca_buf
    cdef fw_bytes fw_cb
    cdef fw_shape_t fw_cb_len
    cdef char *fw_cb_buf
    cdef fwi_integer_t fw_iserr__
    cdef fwl_logical_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    fw_ca_len = len(ca)
    fw_ca = PyBytes_FromStringAndSize(NULL, fw_ca_len)
    fw_ca_buf = <char*>fw_ca
    memcpy(fw_ca_buf, <char*>ca, fw_ca_len+1)
    fw_cb_len = len(cb)
    fw_cb = PyBytes_FromStringAndSize(NULL, fw_cb_len)
    fw_cb_buf = <char*>fw_cb
    memcpy(fw_cb_buf, <char*>cb, fw_cb_len+1)
    lsamen_c(&fw_ret_arg, &n, &fw_ca_len, fw_ca_buf, &fw_cb_len, fw_cb_buf, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'lsamen' wrapper.")
    return (fw_ret_arg, n, fw_ca, fw_cb,)


{{for fc_name, ktp, ktp2, name, name2, name3, npy_enum, npy_enum2
      in zip(['sbbcsd_c', 'dbbcsd_c', 'cbbcsd_c', 'zbbcsd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sbbcsd', 'dbbcsd', 'cbbcsd', 'zbbcsd'],
             ['work', 'work', 'rwork', 'rwork'],
             ['lwork', 'lwork', 'lrwork', 'lrwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object jobu1, object jobu2, object jobv1t, object jobv2t, object trans, fwi_integer_t m, fwi_integer_t p, fwi_integer_t q, object theta, object phi, object u1, fwi_integer_t ldu1, object u2, fwi_integer_t ldu2, object v1t, fwi_integer_t ldv1t, object v2t, fwi_integer_t ldv2t, object b11d, object b11e, object b12d, object b12e, object b21d, object b21e, object b22d, object b22e, object {{name2}}, fwi_integer_t {{name3}}, fwi_integer_t info):
    """{{name}}(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, {{name2}}, {{name3}}, info[, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, {{name2}}, {{name3}}, info]) -> (jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, {{name2}}, {{name3}}, info)

    Parameters
    ----------
    jobu1 : object_, intent inout
    jobu2 : object_, intent inout
    jobv1t : object_, intent inout
    jobv2t : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    theta : {{ktp}}_, 1D array, dimension(*), intent inout
    phi : {{ktp}}_, 1D array, dimension(*), intent inout
    u1 : {{ktp2}}_, 2D array, dimension(ldu1, *), intent inout
    ldu1 : fwi_integer, intent inout
    u2 : {{ktp2}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    v1t : {{ktp2}}_, 2D array, dimension(ldv1t, *), intent inout
    ldv1t : fwi_integer, intent inout
    v2t : {{ktp2}}_, 2D array, dimension(ldv2t, *), intent inout
    ldv2t : fwi_integer, intent inout
    b11d : {{ktp}}_, 1D array, dimension(*), intent inout
    b11e : {{ktp}}_, 1D array, dimension(*), intent inout
    b12d : {{ktp}}_, 1D array, dimension(*), intent inout
    b12e : {{ktp}}_, 1D array, dimension(*), intent inout
    b21d : {{ktp}}_, 1D array, dimension(*), intent inout
    b21e : {{ktp}}_, 1D array, dimension(*), intent inout
    b22d : {{ktp}}_, 1D array, dimension(*), intent inout
    b22e : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name3}} : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu1 : object_, intent inout
    jobu2 : object_, intent inout
    jobv1t : object_, intent inout
    jobv2t : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    theta : {{ktp}}_, 1D array, dimension(*), intent inout
    phi : {{ktp}}_, 1D array, dimension(*), intent inout
    u1 : {{ktp2}}_, 2D array, dimension(ldu1, *), intent inout
    ldu1 : fwi_integer, intent inout
    u2 : {{ktp2}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    v1t : {{ktp2}}_, 2D array, dimension(ldv1t, *), intent inout
    ldv1t : fwi_integer, intent inout
    v2t : {{ktp2}}_, 2D array, dimension(ldv2t, *), intent inout
    ldv2t : fwi_integer, intent inout
    b11d : {{ktp}}_, 1D array, dimension(*), intent inout
    b11e : {{ktp}}_, 1D array, dimension(*), intent inout
    b12d : {{ktp}}_, 1D array, dimension(*), intent inout
    b12e : {{ktp}}_, 1D array, dimension(*), intent inout
    b21d : {{ktp}}_, 1D array, dimension(*), intent inout
    b21e : {{ktp}}_, 1D array, dimension(*), intent inout
    b22d : {{ktp}}_, 1D array, dimension(*), intent inout
    b22e : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name3}} : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu1 = [0, 0]
    cdef char *fw_jobu2 = [0, 0]
    cdef char *fw_jobv1t = [0, 0]
    cdef char *fw_jobv2t = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray theta_
    cdef fw_shape_t theta_shape_[1]
    cdef np.ndarray phi_
    cdef fw_shape_t phi_shape_[1]
    cdef np.ndarray u1_
    cdef fw_shape_t u1_shape_[2]
    cdef np.ndarray u2_
    cdef fw_shape_t u2_shape_[2]
    cdef np.ndarray v1t_
    cdef fw_shape_t v1t_shape_[2]
    cdef np.ndarray v2t_
    cdef fw_shape_t v2t_shape_[2]
    cdef np.ndarray b11d_
    cdef fw_shape_t b11d_shape_[1]
    cdef np.ndarray b11e_
    cdef fw_shape_t b11e_shape_[1]
    cdef np.ndarray b12d_
    cdef fw_shape_t b12d_shape_[1]
    cdef np.ndarray b12e_
    cdef fw_shape_t b12e_shape_[1]
    cdef np.ndarray b21d_
    cdef fw_shape_t b21d_shape_[1]
    cdef np.ndarray b21e_
    cdef fw_shape_t b21e_shape_[1]
    cdef np.ndarray b22d_
    cdef fw_shape_t b22d_shape_[1]
    cdef np.ndarray b22e_
    cdef fw_shape_t b22e_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    theta_, theta = fw_asfortranarray(theta, {{npy_enum}}, 1, False)
    fw_copyshape(theta_shape_, np.PyArray_DIMS(theta_), 1)
    phi_, phi = fw_asfortranarray(phi, {{npy_enum}}, 1, False)
    fw_copyshape(phi_shape_, np.PyArray_DIMS(phi_), 1)
    u1_, u1 = fw_asfortranarray(u1, {{npy_enum2}}, 2, False)
    fw_copyshape(u1_shape_, np.PyArray_DIMS(u1_), 2)
    if ldu1 != u1_shape_[0]:
        raise ValueError("(ldu1 == u1.shape[0]) not satisifed")
    u2_, u2 = fw_asfortranarray(u2, {{npy_enum2}}, 2, False)
    fw_copyshape(u2_shape_, np.PyArray_DIMS(u2_), 2)
    if ldu2 != u2_shape_[0]:
        raise ValueError("(ldu2 == u2.shape[0]) not satisifed")
    v1t_, v1t = fw_asfortranarray(v1t, {{npy_enum2}}, 2, False)
    fw_copyshape(v1t_shape_, np.PyArray_DIMS(v1t_), 2)
    if ldv1t != v1t_shape_[0]:
        raise ValueError("(ldv1t == v1t.shape[0]) not satisifed")
    v2t_, v2t = fw_asfortranarray(v2t, {{npy_enum2}}, 2, False)
    fw_copyshape(v2t_shape_, np.PyArray_DIMS(v2t_), 2)
    if ldv2t != v2t_shape_[0]:
        raise ValueError("(ldv2t == v2t.shape[0]) not satisifed")
    b11d_, b11d = fw_asfortranarray(b11d, {{npy_enum}}, 1, False)
    fw_copyshape(b11d_shape_, np.PyArray_DIMS(b11d_), 1)
    b11e_, b11e = fw_asfortranarray(b11e, {{npy_enum}}, 1, False)
    fw_copyshape(b11e_shape_, np.PyArray_DIMS(b11e_), 1)
    b12d_, b12d = fw_asfortranarray(b12d, {{npy_enum}}, 1, False)
    fw_copyshape(b12d_shape_, np.PyArray_DIMS(b12d_), 1)
    b12e_, b12e = fw_asfortranarray(b12e, {{npy_enum}}, 1, False)
    fw_copyshape(b12e_shape_, np.PyArray_DIMS(b12e_), 1)
    b21d_, b21d = fw_asfortranarray(b21d, {{npy_enum}}, 1, False)
    fw_copyshape(b21d_shape_, np.PyArray_DIMS(b21d_), 1)
    b21e_, b21e = fw_asfortranarray(b21e, {{npy_enum}}, 1, False)
    fw_copyshape(b21e_shape_, np.PyArray_DIMS(b21e_), 1)
    b22d_, b22d = fw_asfortranarray(b22d, {{npy_enum}}, 1, False)
    fw_copyshape(b22d_shape_, np.PyArray_DIMS(b22d_), 1)
    b22e_, b22e = fw_asfortranarray(b22e, {{npy_enum}}, 1, False)
    fw_copyshape(b22e_shape_, np.PyArray_DIMS(b22e_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_jobu1[0] = fw_aschar(jobu1)
    if fw_jobu1[0] == 0:
        raise ValueError("len(jobu1) != 1")
    fw_jobu2[0] = fw_aschar(jobu2)
    if fw_jobu2[0] == 0:
        raise ValueError("len(jobu2) != 1")
    fw_jobv1t[0] = fw_aschar(jobv1t)
    if fw_jobv1t[0] == 0:
        raise ValueError("len(jobv1t) != 1")
    fw_jobv2t[0] = fw_aschar(jobv2t)
    if fw_jobv2t[0] == 0:
        raise ValueError("len(jobv2t) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_jobu1, fw_jobu2, fw_jobv1t, fw_jobv2t, fw_trans, &m, &p, &q, theta_shape_, <{{ktp}}*>np.PyArray_DATA(theta_), phi_shape_, <{{ktp}}*>np.PyArray_DATA(phi_), u1_shape_, <{{ktp2}}*>np.PyArray_DATA(u1_), &ldu1, u2_shape_, <{{ktp2}}*>np.PyArray_DATA(u2_), &ldu2, v1t_shape_, <{{ktp2}}*>np.PyArray_DATA(v1t_), &ldv1t, v2t_shape_, <{{ktp2}}*>np.PyArray_DATA(v2t_), &ldv2t, b11d_shape_, <{{ktp}}*>np.PyArray_DATA(b11d_), b11e_shape_, <{{ktp}}*>np.PyArray_DATA(b11e_), b12d_shape_, <{{ktp}}*>np.PyArray_DATA(b12d_), b12e_shape_, <{{ktp}}*>np.PyArray_DATA(b12e_), b21d_shape_, <{{ktp}}*>np.PyArray_DATA(b21d_), b21e_shape_, <{{ktp}}*>np.PyArray_DATA(b21e_), b22d_shape_, <{{ktp}}*>np.PyArray_DATA(b22d_), b22e_shape_, <{{ktp}}*>np.PyArray_DATA(b22e_), {{name2}}_shape_, <{{ktp}}*>np.PyArray_DATA({{name2}}_), &{{name3}}, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobu1, fw_jobu2, fw_jobv1t, fw_jobv2t, fw_trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, {{name2}}, {{name3}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sbdsdc_c', 'dbdsdc_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sbdsdc', 'dbdsdc'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object compq, fwi_integer_t n, object d, object e, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object q, object iq, object work, object iwork, fwi_integer_t info):
    """{{name}}(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info[, uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info]) -> (uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    compq : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    q : {{ktp}}_, 1D array, dimension(*), intent inout
    iq : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    compq : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    q : {{ktp}}_, 1D array, dimension(*), intent inout
    iq : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[1]
    cdef np.ndarray iq_
    cdef fw_shape_t iq_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 1, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 1)
    iq_, iq = fw_asfortranarray(iq, fwi_integer_t_enum, 1, False)
    fw_copyshape(iq_shape_, np.PyArray_DIMS(iq_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    {{fc_name}}(fw_uplo, fw_compq, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), &ldvt, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), iq_shape_, <fwi_integer_t*>np.PyArray_DATA(iq_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, name2, npy_enum, npy_enum2
      in zip(['sbdsqr_c', 'dbdsqr_c', 'cbdsqr_c', 'zbdsqr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sbdsqr', 'dbdsqr', 'cbdsqr', 'zbdsqr'],
             ['work', 'work', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t ncvt, fwi_integer_t nru, fwi_integer_t ncc, object d, object e, object vt, fwi_integer_t ldvt, object u, fwi_integer_t ldu, object c, fwi_integer_t ldc, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, {{name2}}, info[, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, {{name2}}, info]) -> (uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ncvt : fwi_integer, intent inout
    nru : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vt : {{ktp2}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    u : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    c : {{ktp2}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    {{name2}} : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ncvt : fwi_integer, intent inout
    nru : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vt : {{ktp2}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    u : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    c : {{ktp2}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    {{name2}} : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    vt_, vt = fw_asfortranarray(vt, {{npy_enum2}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, {{npy_enum2}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &ncvt, &nru, &ncc, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), vt_shape_, <{{ktp2}}*>np.PyArray_DATA(vt_), &ldvt, u_shape_, <{{ktp2}}*>np.PyArray_DATA(u_), &ldu, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &ldc, {{name2}}_shape_, <{{ktp}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, {{name2}}, info,)
{{endfor}}


cpdef api object scsum1(fwi_integer_t n, object cx, fwi_integer_t incx):
    """scsum1(n, cx, incx[, n, cx, incx]) -> (fw_ret_arg, n, cx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cx : fwc_complex, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwr_real, intent out
    n : fwi_integer, intent inout
    cx : fwc_complex, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray cx_
    cdef fw_shape_t cx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fwr_real_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    cx_, cx = fw_asfortranarray(cx, fwc_complex_t_enum, 1, False)
    fw_copyshape(cx_shape_, np.PyArray_DIMS(cx_), 1)
    scsum1_c(&fw_ret_arg, &n, cx_shape_, <fwc_complex_t*>np.PyArray_DATA(cx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'scsum1' wrapper.")
    return (fw_ret_arg, n, cx, incx,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sdisna_c', 'ddisna_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sdisna', 'ddisna'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object job, fwi_integer_t m, fwi_integer_t n, object d, object sep, fwi_integer_t info):
    """{{name}}(job, m, n, d, sep, info[, job, m, n, d, sep, info]) -> (job, m, n, d, sep, info)

    Parameters
    ----------
    job : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    sep : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    sep : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray sep_
    cdef fw_shape_t sep_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    sep_, sep = fw_asfortranarray(sep, {{npy_enum}}, 1, False)
    fw_copyshape(sep_shape_, np.PyArray_DIMS(sep_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    {{fc_name}}(fw_job, &m, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), sep_shape_, <{{ktp}}*>np.PyArray_DATA(sep_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, m, n, d, sep, info,)
{{endfor}}


cpdef api object sgbbrd(object vect, fwi_integer_t m, fwi_integer_t n, fwi_integer_t ncc, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object d, object e, object q, fwi_integer_t ldq, object pt, fwi_integer_t ldpt, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """sgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info[, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info]) -> (vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info)

    Parameters
    ----------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwr_real, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwr_real, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwr_real, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwr_real, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwr_real, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwr_real, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray pt_
    cdef fw_shape_t pt_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, fwr_real_t_enum, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    pt_, pt = fw_asfortranarray(pt, fwr_real_t_enum, 2, False)
    fw_copyshape(pt_shape_, np.PyArray_DIMS(pt_), 2)
    if ldpt != pt_shape_[0]:
        raise ValueError("(ldpt == pt.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwr_real_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    sgbbrd_c(fw_vect, &m, &n, &ncc, &kl, &ku, ab_shape_, <fwr_real_t*>np.PyArray_DATA(ab_), &ldab, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, pt_shape_, <fwr_real_t*>np.PyArray_DATA(pt_), &ldpt, c_shape_, <fwr_real_t*>np.PyArray_DATA(c_), &ldc, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgbbrd' wrapper.")
    return (fw_vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info,)


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['sgbcon_c', 'dgbcon_c', 'cgbcon_c', 'zgbcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbcon', 'dgbcon', 'cgbcon', 'zgbcon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object ipiv, {{ktp2}} anorm, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, {{name2}}, info[, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, {{name2}}, info]) -> (norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, {{name2}}, info)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(fw_norm, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgbequ_c', 'dgbequ_c', 'cgbequ_c', 'zgbequ_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbequ', 'dgbequ', 'cgbequ', 'zgbequ'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object r, object c, {{ktp2}} rowcnd, {{ktp2}} colcnd, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info[, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info]) -> (m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    {{fc_name}}(&m, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &rowcnd, &colcnd, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgbequb_c', 'dgbequb_c', 'cgbequb_c', 'zgbequb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbequb', 'dgbequb', 'cgbequb', 'zgbequb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object r, object c, {{ktp2}} rowcnd, {{ktp2}} colcnd, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info[, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info]) -> (m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    {{fc_name}}(&m, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &rowcnd, &colcnd, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgbrfs_c', 'dgbrfs_c', 'cgbrfs_c', 'zgbrfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbrfs', 'dgbrfs', 'cgbrfs', 'zgbrfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgbrfsx_c', 'dgbrfsx_c', 'cgbrfsx_c', 'zgbrfsx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbrfsx', 'dgbrfsx', 'cgbrfsx', 'zgbrfsx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, object equed, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, object r, object c, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    trans : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_trans, fw_equed, &n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, fw_equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgbsv_c', 'dgbsv_c', 'cgbsv_c', 'zgbsv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgbsv', 'dgbsv', 'cgbsv', 'zgbsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info[, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info]) -> (n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    {{fc_name}}(&n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgbsvx_c', 'dgbsvx_c', 'cgbsvx_c', 'zgbsvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbsvx', 'dgbsvx', 'cgbsvx', 'zgbsvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, object equed, object r, object c, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_trans, &n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), fw_equed, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, fw_equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgbsvxx_c', 'dgbsvxx_c', 'cgbsvxx_c', 'zgbsvxx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgbsvxx', 'dgbsvxx', 'cgbsvxx', 'zgbsvxx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, object equed, object r, object c, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, {{ktp2}} rpvgrw, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_trans, &n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), fw_equed, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, &rpvgrw, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, fw_equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgbtf2_c', 'dgbtf2_c', 'cgbtf2_c', 'zgbtf2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgbtf2', 'dgbtf2', 'cgbtf2', 'zgbtf2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object ipiv, fwi_integer_t info):
    """{{name}}(m, n, kl, ku, ab, ldab, ipiv, info[, m, n, kl, ku, ab, ldab, ipiv, info]) -> (m, n, kl, ku, ab, ldab, ipiv, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    {{fc_name}}(&m, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, kl, ku, ab, ldab, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgbtrf_c', 'dgbtrf_c', 'cgbtrf_c', 'zgbtrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgbtrf', 'dgbtrf', 'cgbtrf', 'zgbtrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object ipiv, fwi_integer_t info):
    """{{name}}(m, n, kl, ku, ab, ldab, ipiv, info[, m, n, kl, ku, ab, ldab, ipiv, info]) -> (m, n, kl, ku, ab, ldab, ipiv, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    {{fc_name}}(&m, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, kl, ku, ab, ldab, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgbtrs_c', 'dgbtrs_c', 'cgbtrs_c', 'zgbtrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgbtrs', 'dgbtrs', 'cgbtrs', 'zgbtrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info[, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info]) -> (trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgebak_c', 'dgebak_c', 'cgebak_c', 'zgebak_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgebak', 'dgebak', 'cgebak', 'zgebak'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object job, object side, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object scale, fwi_integer_t m, object v, fwi_integer_t ldv, fwi_integer_t info):
    """{{name}}(job, side, n, ilo, ihi, scale, m, v, ldv, info[, job, side, n, ilo, ihi, scale, m, v, ldv, info]) -> (job, side, n, ilo, ihi, scale, m, v, ldv, info)

    Parameters
    ----------
    job : object_, intent inout
    side : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    v : {{ktp2}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    side : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    v : {{ktp2}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_side = [0, 0]
    cdef np.ndarray scale_
    cdef fw_shape_t scale_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    scale_, scale = fw_asfortranarray(scale, {{npy_enum}}, 1, False)
    fw_copyshape(scale_shape_, np.PyArray_DIMS(scale_), 1)
    v_, v = fw_asfortranarray(v, {{npy_enum2}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    {{fc_name}}(fw_job, fw_side, &n, &ilo, &ihi, scale_shape_, <{{ktp}}*>np.PyArray_DATA(scale_), &m, v_shape_, <{{ktp2}}*>np.PyArray_DATA(v_), &ldv, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, fw_side, n, ilo, ihi, scale, m, v, ldv, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgebal_c', 'dgebal_c', 'cgebal_c', 'zgebal_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgebal', 'dgebal', 'cgebal', 'zgebal'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object job, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t ilo, fwi_integer_t ihi, object scale, fwi_integer_t info):
    """{{name}}(job, n, a, lda, ilo, ihi, scale, info[, job, n, a, lda, ilo, ihi, scale, info]) -> (job, n, a, lda, ilo, ihi, scale, info)

    Parameters
    ----------
    job : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray scale_
    cdef fw_shape_t scale_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    scale_, scale = fw_asfortranarray(scale, {{npy_enum2}}, 1, False)
    fw_copyshape(scale_shape_, np.PyArray_DIMS(scale_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    {{fc_name}}(fw_job, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &ilo, &ihi, scale_shape_, <{{ktp2}}*>np.PyArray_DATA(scale_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, n, a, lda, ilo, ihi, scale, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgebd2_c', 'dgebd2_c', 'cgebd2_c', 'zgebd2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgebd2', 'dgebd2', 'cgebd2', 'zgebd2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object d, object e, object tauq, object taup, object work, fwi_integer_t info):
    """{{name}}(m, n, a, lda, d, e, tauq, taup, work, info[, m, n, a, lda, d, e, tauq, taup, work, info]) -> (m, n, a, lda, d, e, tauq, taup, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tauq : {{ktp}}_, 1D array, dimension(*), intent inout
    taup : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tauq : {{ktp}}_, 1D array, dimension(*), intent inout
    taup : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tauq_
    cdef fw_shape_t tauq_shape_[1]
    cdef np.ndarray taup_
    cdef fw_shape_t taup_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tauq_, tauq = fw_asfortranarray(tauq, {{npy_enum}}, 1, False)
    fw_copyshape(tauq_shape_, np.PyArray_DIMS(tauq_), 1)
    taup_, taup = fw_asfortranarray(taup, {{npy_enum}}, 1, False)
    fw_copyshape(taup_shape_, np.PyArray_DIMS(taup_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tauq_shape_, <{{ktp}}*>np.PyArray_DATA(tauq_), taup_shape_, <{{ktp}}*>np.PyArray_DATA(taup_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, d, e, tauq, taup, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgebrd_c', 'dgebrd_c', 'cgebrd_c', 'zgebrd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgebrd', 'dgebrd', 'cgebrd', 'zgebrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object d, object e, object tauq, object taup, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, d, e, tauq, taup, work, lwork, info[, m, n, a, lda, d, e, tauq, taup, work, lwork, info]) -> (m, n, a, lda, d, e, tauq, taup, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tauq : {{ktp}}_, 1D array, dimension(*), intent inout
    taup : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tauq : {{ktp}}_, 1D array, dimension(*), intent inout
    taup : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tauq_
    cdef fw_shape_t tauq_shape_[1]
    cdef np.ndarray taup_
    cdef fw_shape_t taup_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tauq_, tauq = fw_asfortranarray(tauq, {{npy_enum}}, 1, False)
    fw_copyshape(tauq_shape_, np.PyArray_DIMS(tauq_), 1)
    taup_, taup = fw_asfortranarray(taup, {{npy_enum}}, 1, False)
    fw_copyshape(taup_shape_, np.PyArray_DIMS(taup_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tauq_shape_, <{{ktp}}*>np.PyArray_DATA(tauq_), taup_shape_, <{{ktp}}*>np.PyArray_DATA(taup_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, d, e, tauq, taup, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['sgecon_c', 'dgecon_c', 'cgecon_c', 'zgecon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgecon', 'dgecon', 'cgecon', 'zgecon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp2}} anorm, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(norm, n, a, lda, anorm, rcond, work, {{name2}}, info[, norm, n, a, lda, anorm, rcond, work, {{name2}}, info]) -> (norm, n, a, lda, anorm, rcond, work, {{name2}}, info)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(fw_norm, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_norm, n, a, lda, anorm, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgeequ_c', 'dgeequ_c', 'cgeequ_c', 'zgeequ_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgeequ', 'dgeequ', 'cgeequ', 'zgeequ'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object r, object c, {{ktp2}} rowcnd, {{ktp2}} colcnd, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(m, n, a, lda, r, c, rowcnd, colcnd, amax, info[, m, n, a, lda, r, c, rowcnd, colcnd, amax, info]) -> (m, n, a, lda, r, c, rowcnd, colcnd, amax, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &rowcnd, &colcnd, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, r, c, rowcnd, colcnd, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sgeequb_c', 'dgeequb_c', 'cgeequb_c', 'zgeequb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgeequb', 'dgeequb', 'cgeequb', 'zgeequb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object r, object c, {{ktp2}} rowcnd, {{ktp2}} colcnd, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(m, n, a, lda, r, c, rowcnd, colcnd, amax, info[, m, n, a, lda, r, c, rowcnd, colcnd, amax, info]) -> (m, n, a, lda, r, c, rowcnd, colcnd, amax, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &rowcnd, &colcnd, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, r, c, rowcnd, colcnd, amax, info,)
{{endfor}}


cpdef api object sgees(object jobvs, object sort, bint select, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object wr, object wi, object vs, fwi_integer_t ldvs, object work, fwi_integer_t lwork, object bwork, fwi_integer_t info):
    """sgees(jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info[, jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info]) -> (jobvs, sort, select_, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vs : fwr_real, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vs : fwr_real, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vs_, vs = fw_asfortranarray(vs, fwr_real_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    sgees_c(fw_jobvs, fw_sort, &select_, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, &sdim, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), vs_shape_, <fwr_real_t*>np.PyArray_DATA(vs_), &ldvs, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgees' wrapper.")
    return (fw_jobvs, fw_sort, select_, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info,)


cpdef api object sgeesx(object jobvs, object sort, bint select, object sense, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object wr, object wi, object vs, fwi_integer_t ldvs, fwr_real_t rconde, fwr_real_t rcondv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, object bwork, fwi_integer_t info):
    """sgeesx(jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info[, jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info]) -> (jobvs, sort, select_, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vs : fwr_real, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_real, intent inout
    rcondv : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vs : fwr_real, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_real, intent inout
    rcondv : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vs_, vs = fw_asfortranarray(vs, fwr_real_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    sgeesx_c(fw_jobvs, fw_sort, &select_, fw_sense, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, &sdim, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), vs_shape_, <fwr_real_t*>np.PyArray_DATA(vs_), &ldvs, &rconde, &rcondv, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgeesx' wrapper.")
    return (fw_jobvs, fw_sort, select_, fw_sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info,)


cpdef api object sgeev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object wr, object wi, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgeev(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info[, jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info]) -> (jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    sgeev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgeev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info,)


cpdef api object sgeevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object wr, object wi, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object scale, fwr_real_t abnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """sgeevx(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray scale_
    cdef fw_shape_t scale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    scale_, scale = fw_asfortranarray(scale, fwr_real_t_enum, 1, False)
    fw_copyshape(scale_shape_, np.PyArray_DIMS(scale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_real_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_real_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    sgeevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, scale_shape_, <fwr_real_t*>np.PyArray_DATA(scale_), &abnrm, rconde_shape_, <fwr_real_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_real_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgeevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info,)


cpdef api object sgegs(object jobvsl, object jobvsr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info[, jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info]) -> (jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vsl : fwr_real, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_real, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vsl : fwr_real, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_real, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwr_real_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwr_real_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    sgegs_c(fw_jobvsl, fw_jobvsr, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwr_real_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwr_real_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgegs' wrapper.")
    return (fw_jobvsl, fw_jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info,)


cpdef api object sgegv(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgegv(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    sgegv_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgegv' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sgehd2_c', 'dgehd2_c', 'cgehd2_c', 'zgehd2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgehd2', 'dgehd2', 'cgehd2', 'zgehd2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(n, ilo, ihi, a, lda, tau, work, info[, n, ilo, ihi, a, lda, tau, work, info]) -> (n, ilo, ihi, a, lda, tau, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, ilo, ihi, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgehrd_c', 'dgehrd_c', 'cgehrd_c', 'zgehrd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgehrd', 'dgehrd', 'cgehrd', 'zgehrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(n, ilo, ihi, a, lda, tau, work, lwork, info[, n, ilo, ihi, a, lda, tau, work, lwork, info]) -> (n, ilo, ihi, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, ilo, ihi, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgejsv_c', 'dgejsv_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sgejsv', 'dgejsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object joba, object jobu, object jobv, object jobr, object jobt, object jobp, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object sva, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """{{name}}(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info[, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info]) -> (joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info)

    Parameters
    ----------
    joba : object_, intent inout
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobr : object_, intent inout
    jobt : object_, intent inout
    jobp : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    joba : object_, intent inout
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobr : object_, intent inout
    jobt : object_, intent inout
    jobp : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_joba = [0, 0]
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobr = [0, 0]
    cdef char *fw_jobt = [0, 0]
    cdef char *fw_jobp = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray sva_
    cdef fw_shape_t sva_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    sva_, sva = fw_asfortranarray(sva, {{npy_enum}}, 1, False)
    fw_copyshape(sva_shape_, np.PyArray_DIMS(sva_), 1)
    if not (0 <= n <= sva_shape_[0]):
        raise ValueError("(0 <= n <= sva.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    if not (0 <= lwork <= work_shape_[0]):
        raise ValueError("(0 <= lwork <= work.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_joba[0] = fw_aschar(joba)
    if fw_joba[0] == 0:
        raise ValueError("len(joba) != 1")
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobr[0] = fw_aschar(jobr)
    if fw_jobr[0] == 0:
        raise ValueError("len(jobr) != 1")
    fw_jobt[0] = fw_aschar(jobt)
    if fw_jobt[0] == 0:
        raise ValueError("len(jobt) != 1")
    fw_jobp[0] = fw_aschar(jobp)
    if fw_jobp[0] == 0:
        raise ValueError("len(jobp) != 1")
    {{fc_name}}(fw_joba, fw_jobu, fw_jobv, fw_jobr, fw_jobt, fw_jobp, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, sva_shape_, <{{ktp}}*>np.PyArray_DATA(sva_), u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_joba, fw_jobu, fw_jobv, fw_jobr, fw_jobt, fw_jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgelq2_c', 'dgelq2_c', 'cgelq2_c', 'zgelq2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgelq2', 'dgelq2', 'cgelq2', 'zgelq2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, info[, m, n, a, lda, tau, work, info]) -> (m, n, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgelqf_c', 'dgelqf_c', 'cgelqf_c', 'zgelqf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgelqf', 'dgelqf', 'cgelqf', 'zgelqf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, lwork, info[, m, n, a, lda, tau, work, lwork, info]) -> (m, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgels_c', 'dgels_c', 'cgels_c', 'zgels_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgels', 'dgels', 'cgels', 'zgels'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info[, trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info]) -> (trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)

    Parameters
    ----------
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &m, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info,)
{{endfor}}


cpdef api object sgelsd(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """sgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    sgelsd_c(&m, &n, &nrhs, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgelsd' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info,)


cpdef api object sgelss(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    sgelss_c(&m, &n, &nrhs, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgelss' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info,)


cpdef api object sgelsx(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t info):
    """sgelsx(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    sgelsx_c(&m, &n, &nrhs, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgelsx' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info,)


cpdef api object sgelsy(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_real_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    sgelsy_c(&m, &n, &nrhs, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgelsy' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sgeql2_c', 'dgeql2_c', 'cgeql2_c', 'zgeql2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgeql2', 'dgeql2', 'cgeql2', 'zgeql2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, info[, m, n, a, lda, tau, work, info]) -> (m, n, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgeqlf_c', 'dgeqlf_c', 'cgeqlf_c', 'zgeqlf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgeqlf', 'dgeqlf', 'cgeqlf', 'zgeqlf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, lwork, info[, m, n, a, lda, tau, work, lwork, info]) -> (m, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, lwork, info,)
{{endfor}}


cpdef api object sgeqp3(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgeqp3(m, n, a, lda, jpvt, tau, work, lwork, info[, m, n, a, lda, jpvt, tau, work, lwork, info]) -> (m, n, a, lda, jpvt, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwr_real_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    sgeqp3_c(&m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwr_real_t*>np.PyArray_DATA(tau_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgeqp3' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, lwork, info,)


cpdef api object sgeqpf(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, fwi_integer_t info):
    """sgeqpf(m, n, a, lda, jpvt, tau, work, info[, m, n, a, lda, jpvt, tau, work, info]) -> (m, n, a, lda, jpvt, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwr_real_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    sgeqpf_c(&m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwr_real_t*>np.PyArray_DATA(tau_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgeqpf' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sgeqr2_c', 'dgeqr2_c', 'cgeqr2_c', 'zgeqr2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgeqr2', 'dgeqr2', 'cgeqr2', 'zgeqr2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, info[, m, n, a, lda, tau, work, info]) -> (m, n, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgeqr2p_c', 'dgeqr2p_c', 'cgeqr2p_c', 'zgeqr2p_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgeqr2p', 'dgeqr2p', 'cgeqr2p', 'zgeqr2p'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, info[, m, n, a, lda, tau, work, info]) -> (m, n, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgeqrf_c', 'dgeqrf_c', 'cgeqrf_c', 'zgeqrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgeqrf', 'dgeqrf', 'cgeqrf', 'zgeqrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, lwork, info[, m, n, a, lda, tau, work, lwork, info]) -> (m, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgeqrfp_c', 'dgeqrfp_c', 'cgeqrfp_c', 'zgeqrfp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgeqrfp', 'dgeqrfp', 'cgeqrfp', 'zgeqrfp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, lwork, info[, m, n, a, lda, tau, work, lwork, info]) -> (m, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgerfs_c', 'dgerfs_c', 'cgerfs_c', 'zgerfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgerfs', 'dgerfs', 'cgerfs', 'zgerfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgerfsx_c', 'dgerfsx_c', 'cgerfsx_c', 'zgerfsx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgerfsx', 'dgerfsx', 'cgerfsx', 'zgerfsx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, object equed, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object r, object c, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    trans : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_trans, fw_equed, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, fw_equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgerq2_c', 'dgerq2_c', 'cgerq2_c', 'zgerq2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgerq2', 'dgerq2', 'cgerq2', 'zgerq2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, info[, m, n, a, lda, tau, work, info]) -> (m, n, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgerqf_c', 'dgerqf_c', 'cgerqf_c', 'zgerqf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgerqf', 'dgerqf', 'cgerqf', 'zgerqf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, lwork, info[, m, n, a, lda, tau, work, lwork, info]) -> (m, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['sgesc2_c', 'dgesc2_c', 'cgesc2_c', 'zgesc2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgesc2', 'dgesc2', 'cgesc2', 'zgesc2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, fwi_integer_t lda, object rhs, object ipiv, object jpiv, {{ktp2}} scale):
    """{{name}}(n, a, lda, rhs, ipiv, jpiv, scale[, n, a, lda, rhs, ipiv, jpiv, scale]) -> (n, a, lda, rhs, ipiv, jpiv, scale)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    rhs : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    jpiv : fwi_integer, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    rhs : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    jpiv : fwi_integer, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray rhs_
    cdef fw_shape_t rhs_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray jpiv_
    cdef fw_shape_t jpiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    rhs_, rhs = fw_asfortranarray(rhs, {{npy_enum}}, 1, False)
    fw_copyshape(rhs_shape_, np.PyArray_DIMS(rhs_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    jpiv_, jpiv = fw_asfortranarray(jpiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpiv_shape_, np.PyArray_DIMS(jpiv_), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, rhs_shape_, <{{ktp}}*>np.PyArray_DATA(rhs_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), jpiv_shape_, <fwi_integer_t*>np.PyArray_DATA(jpiv_), &scale, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lda, rhs, ipiv, jpiv, scale,)
{{endfor}}


cpdef api object sgesdd(object jobz, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """sgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info[, jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info]) -> (jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_real, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_real, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwr_real_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwr_real_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    sgesdd_c(fw_jobz, &m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), u_shape_, <fwr_real_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwr_real_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgesdd' wrapper.")
    return (fw_jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sgesv_c', 'dgesv_c', 'cgesv_c', 'zgesv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgesv', 'dgesv', 'cgesv', 'zgesv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(n, nrhs, a, lda, ipiv, b, ldb, info[, n, nrhs, a, lda, ipiv, b, ldb, info]) -> (n, nrhs, a, lda, ipiv, b, ldb, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    {{fc_name}}(&n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, nrhs, a, lda, ipiv, b, ldb, info,)
{{endfor}}


cpdef api object sgesvd(object jobu, object jobvt, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info[, jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info]) -> (jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_real, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_real, 1D array, dimension(*), intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwr_real, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobvt = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwr_real_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwr_real_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobvt[0] = fw_aschar(jobvt)
    if fw_jobvt[0] == 0:
        raise ValueError("len(jobvt) != 1")
    sgesvd_c(fw_jobu, fw_jobvt, &m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), u_shape_, <fwr_real_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwr_real_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgesvd' wrapper.")
    return (fw_jobu, fw_jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sgesvj_c', 'dgesvj_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sgesvj', 'dgesvj'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object joba, object jobu, object jobv, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object sva, fwi_integer_t mv, object v, fwi_integer_t ldv, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info[, joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info]) -> (joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info)

    Parameters
    ----------
    joba : object_, intent inout
    jobu : object_, intent inout
    jobv : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    mv : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    joba : object_, intent inout
    jobu : object_, intent inout
    jobv : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    mv : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_joba = [0, 0]
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray sva_
    cdef fw_shape_t sva_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    sva_, sva = fw_asfortranarray(sva, {{npy_enum}}, 1, False)
    fw_copyshape(sva_shape_, np.PyArray_DIMS(sva_), 1)
    if not (0 <= n <= sva_shape_[0]):
        raise ValueError("(0 <= n <= sva.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    if not (0 <= lwork <= work_shape_[0]):
        raise ValueError("(0 <= lwork <= work.shape[0]) not satisifed")
    fw_joba[0] = fw_aschar(joba)
    if fw_joba[0] == 0:
        raise ValueError("len(joba) != 1")
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    {{fc_name}}(fw_joba, fw_jobu, fw_jobv, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, sva_shape_, <{{ktp}}*>np.PyArray_DATA(sva_), &mv, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_joba, fw_jobu, fw_jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgesvx_c', 'dgesvx_c', 'cgesvx_c', 'zgesvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgesvx', 'dgesvx', 'cgesvx', 'zgesvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object trans, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object equed, object r, object c, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_trans, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), fw_equed, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_trans, n, nrhs, a, lda, af, ldaf, ipiv, fw_equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgesvxx_c', 'dgesvxx_c', 'cgesvxx_c', 'zgesvxx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgesvxx', 'dgesvxx', 'cgesvxx', 'zgesvxx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object trans, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object equed, object r, object c, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, {{ktp2}} rpvgrw, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_trans, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), fw_equed, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, &rpvgrw, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_trans, n, nrhs, a, lda, af, ldaf, ipiv, fw_equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgetc2_c', 'dgetc2_c', 'cgetc2_c', 'zgetc2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgetc2', 'dgetc2', 'cgetc2', 'zgetc2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object jpiv, fwi_integer_t info):
    """{{name}}(n, a, lda, ipiv, jpiv, info[, n, a, lda, ipiv, jpiv, info]) -> (n, a, lda, ipiv, jpiv, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    jpiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    jpiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray jpiv_
    cdef fw_shape_t jpiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    jpiv_, jpiv = fw_asfortranarray(jpiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpiv_shape_, np.PyArray_DIMS(jpiv_), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), jpiv_shape_, <fwi_integer_t*>np.PyArray_DATA(jpiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lda, ipiv, jpiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgetf2_c', 'dgetf2_c', 'cgetf2_c', 'zgetf2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgetf2', 'dgetf2', 'cgetf2', 'zgetf2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwi_integer_t info):
    """{{name}}(m, n, a, lda, ipiv, info[, m, n, a, lda, ipiv, info]) -> (m, n, a, lda, ipiv, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgetrf_c', 'dgetrf_c', 'cgetrf_c', 'zgetrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgetrf', 'dgetrf', 'cgetrf', 'zgetrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwi_integer_t info):
    """{{name}}(m, n, a, lda, ipiv, info[, m, n, a, lda, ipiv, info]) -> (m, n, a, lda, ipiv, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgetri_c', 'dgetri_c', 'cgetri_c', 'zgetri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgetri', 'dgetri', 'cgetri', 'zgetri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(n, a, lda, ipiv, work, lwork, info[, n, a, lda, ipiv, work, lwork, info]) -> (n, a, lda, ipiv, work, lwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lda, ipiv, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgetrs_c', 'dgetrs_c', 'cgetrs_c', 'zgetrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgetrs', 'dgetrs', 'cgetrs', 'zgetrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(trans, n, nrhs, a, lda, ipiv, b, ldb, info[, trans, n, nrhs, a, lda, ipiv, b, ldb, info]) -> (trans, n, nrhs, a, lda, ipiv, b, ldb, info)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, nrhs, a, lda, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sggbak_c', 'dggbak_c', 'cggbak_c', 'zggbak_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sggbak', 'dggbak', 'cggbak', 'zggbak'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object job, object side, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object lscale, object rscale, fwi_integer_t m, object v, fwi_integer_t ldv, fwi_integer_t info):
    """{{name}}(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info[, job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info]) -> (job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info)

    Parameters
    ----------
    job : object_, intent inout
    side : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : {{ktp}}_, 1D array, dimension(*), intent inout
    rscale : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    v : {{ktp2}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    side : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : {{ktp}}_, 1D array, dimension(*), intent inout
    rscale : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    v : {{ktp2}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_side = [0, 0]
    cdef np.ndarray lscale_
    cdef fw_shape_t lscale_shape_[1]
    cdef np.ndarray rscale_
    cdef fw_shape_t rscale_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    lscale_, lscale = fw_asfortranarray(lscale, {{npy_enum}}, 1, False)
    fw_copyshape(lscale_shape_, np.PyArray_DIMS(lscale_), 1)
    rscale_, rscale = fw_asfortranarray(rscale, {{npy_enum}}, 1, False)
    fw_copyshape(rscale_shape_, np.PyArray_DIMS(rscale_), 1)
    v_, v = fw_asfortranarray(v, {{npy_enum2}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    {{fc_name}}(fw_job, fw_side, &n, &ilo, &ihi, lscale_shape_, <{{ktp}}*>np.PyArray_DATA(lscale_), rscale_shape_, <{{ktp}}*>np.PyArray_DATA(rscale_), &m, v_shape_, <{{ktp2}}*>np.PyArray_DATA(v_), &ldv, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, fw_side, n, ilo, ihi, lscale, rscale, m, v, ldv, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sggbal_c', 'dggbal_c', 'cggbal_c', 'zggbal_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sggbal', 'dggbal', 'cggbal', 'zggbal'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object job, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t ilo, fwi_integer_t ihi, object lscale, object rscale, object work, fwi_integer_t info):
    """{{name}}(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info[, job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info]) -> (job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info)

    Parameters
    ----------
    job : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : {{ktp2}}_, 1D array, dimension(*), intent inout
    rscale : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : {{ktp2}}_, 1D array, dimension(*), intent inout
    rscale : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray lscale_
    cdef fw_shape_t lscale_shape_[1]
    cdef np.ndarray rscale_
    cdef fw_shape_t rscale_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    lscale_, lscale = fw_asfortranarray(lscale, {{npy_enum2}}, 1, False)
    fw_copyshape(lscale_shape_, np.PyArray_DIMS(lscale_), 1)
    rscale_, rscale = fw_asfortranarray(rscale, {{npy_enum2}}, 1, False)
    fw_copyshape(rscale_shape_, np.PyArray_DIMS(rscale_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    {{fc_name}}(fw_job, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &ilo, &ihi, lscale_shape_, <{{ktp2}}*>np.PyArray_DATA(lscale_), rscale_shape_, <{{ktp2}}*>np.PyArray_DATA(rscale_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info,)
{{endfor}}


cpdef api object sgges(object jobvsl, object jobvsr, object sort, bint selctg, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alphar, object alphai, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, object bwork, fwi_integer_t info):
    """sgges(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info[, jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vsl : fwr_real, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_real, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vsl : fwr_real, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_real, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwr_real_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwr_real_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    sgges_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &sdim, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwr_real_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwr_real_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgges' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info,)


cpdef api object sggesx(object jobvsl, object jobvsr, object sort, bint selctg, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alphar, object alphai, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object rconde, object rcondv, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, object bwork, fwi_integer_t info):
    """sggesx(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info[, jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vsl : fwr_real, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_real, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_real, 1D array, dimension(2), intent inout
    rcondv : fwr_real, 1D array, dimension(2), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vsl : fwr_real, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwr_real, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_real, 1D array, dimension(2), intent inout
    rcondv : fwr_real, 1D array, dimension(2), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwr_real_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwr_real_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    rconde_, rconde = fw_asfortranarray(rconde, fwr_real_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    if not (0 <= 2 <= rconde_shape_[0]):
        raise ValueError("(0 <= 2 <= rconde.shape[0]) not satisifed")
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_real_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    if not (0 <= 2 <= rcondv_shape_[0]):
        raise ValueError("(0 <= 2 <= rcondv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    sggesx_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, fw_sense, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &sdim, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwr_real_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwr_real_t*>np.PyArray_DATA(vsr_), &ldvsr, rconde_shape_, <fwr_real_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_real_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sggesx' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, fw_sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info,)


cpdef api object sggev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, fwi_integer_t info):
    """sggev(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    sggev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sggev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info,)


cpdef api object sggevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object lscale, object rscale, fwr_real_t abnrm, fwr_real_t bbnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object iwork, object bwork, fwi_integer_t info):
    """sggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_real, 1D array, dimension(*), intent inout
    rscale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    bbnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_real, 1D array, dimension(*), intent inout
    rscale : fwr_real, 1D array, dimension(*), intent inout
    abnrm : fwr_real, intent inout
    bbnrm : fwr_real, intent inout
    rconde : fwr_real, 1D array, dimension(*), intent inout
    rcondv : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray lscale_
    cdef fw_shape_t lscale_shape_[1]
    cdef np.ndarray rscale_
    cdef fw_shape_t rscale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    lscale_, lscale = fw_asfortranarray(lscale, fwr_real_t_enum, 1, False)
    fw_copyshape(lscale_shape_, np.PyArray_DIMS(lscale_), 1)
    rscale_, rscale = fw_asfortranarray(rscale, fwr_real_t_enum, 1, False)
    fw_copyshape(rscale_shape_, np.PyArray_DIMS(rscale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_real_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_real_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    sggevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, lscale_shape_, <fwr_real_t*>np.PyArray_DATA(lscale_), rscale_shape_, <fwr_real_t*>np.PyArray_DATA(rscale_), &abnrm, &bbnrm, rconde_shape_, <fwr_real_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_real_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sggevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sggglm_c', 'dggglm_c', 'cggglm_c', 'zggglm_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sggglm', 'dggglm', 'cggglm', 'zggglm'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t m, fwi_integer_t p, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object d, object x, object y, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info[, n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info]) -> (n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &m, &p, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgghrd_c', 'dgghrd_c', 'cgghrd_c', 'zgghrd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgghrd', 'dgghrd', 'cgghrd', 'zgghrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object compq, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t info):
    """{{name}}(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info[, compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info]) -> (compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info)

    Parameters
    ----------
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compq = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    {{fc_name}}(fw_compq, fw_compz, &n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_compq, fw_compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgglse_c', 'dgglse_c', 'cgglse_c', 'zgglse_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgglse', 'dgglse', 'cgglse', 'zgglse'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t p, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, object d, object x, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info[, m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info]) -> (m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &p, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sggqrf_c', 'dggqrf_c', 'cggqrf_c', 'zggqrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sggqrf', 'dggqrf', 'cggqrf', 'zggqrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t m, fwi_integer_t p, object a, fwi_integer_t lda, object taua, object b, fwi_integer_t ldb, object taub, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info[, n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info]) -> (n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    taua : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    taub : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    taua : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    taub : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray taua_
    cdef fw_shape_t taua_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray taub_
    cdef fw_shape_t taub_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    taua_, taua = fw_asfortranarray(taua, {{npy_enum}}, 1, False)
    fw_copyshape(taua_shape_, np.PyArray_DIMS(taua_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    taub_, taub = fw_asfortranarray(taub, {{npy_enum}}, 1, False)
    fw_copyshape(taub_shape_, np.PyArray_DIMS(taub_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &m, &p, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, taua_shape_, <{{ktp}}*>np.PyArray_DATA(taua_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, taub_shape_, <{{ktp}}*>np.PyArray_DATA(taub_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sggrqf_c', 'dggrqf_c', 'cggrqf_c', 'zggrqf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sggrqf', 'dggrqf', 'cggrqf', 'zggrqf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t p, fwi_integer_t n, object a, fwi_integer_t lda, object taua, object b, fwi_integer_t ldb, object taub, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info[, m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info]) -> (m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    taua : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    taub : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    taua : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    taub : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray taua_
    cdef fw_shape_t taua_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray taub_
    cdef fw_shape_t taub_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    taua_, taua = fw_asfortranarray(taua, {{npy_enum}}, 1, False)
    fw_copyshape(taua_shape_, np.PyArray_DIMS(taua_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    taub_, taub = fw_asfortranarray(taub, {{npy_enum}}, 1, False)
    fw_copyshape(taub_shape_, np.PyArray_DIMS(taub_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &p, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, taua_shape_, <{{ktp}}*>np.PyArray_DATA(taua_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, taub_shape_, <{{ktp}}*>np.PyArray_DATA(taub_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info,)
{{endfor}}


cpdef api object sggsvd(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t n, fwi_integer_t p, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object work, object iwork, fwi_integer_t info):
    """sggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info[, jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info]) -> (jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwr_real_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    u_, u = fw_asfortranarray(u, fwr_real_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    sggsvd_c(fw_jobu, fw_jobv, fw_jobq, &m, &n, &p, &k, &l, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwr_real_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), u_shape_, <fwr_real_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sggsvd' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info,)


cpdef api object sggsvp(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t p, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwr_real_t tola, fwr_real_t tolb, fwi_integer_t k, fwi_integer_t l, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object iwork, object tau, object work, fwi_integer_t info):
    """sggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info[, jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info]) -> (jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_real, intent inout
    tolb : fwr_real, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_real, intent inout
    tolb : fwr_real, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwr_real_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    tau_, tau = fw_asfortranarray(tau, fwr_real_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    sggsvp_c(fw_jobu, fw_jobv, fw_jobq, &m, &p, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &tola, &tolb, &k, &l, u_shape_, <fwr_real_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), tau_shape_, <fwr_real_t*>np.PyArray_DATA(tau_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sggsvp' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sgsvj0_c', 'dgsvj0_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sgsvj0', 'dgsvj0'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobv, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object d, object sva, fwi_integer_t mv, object v, fwi_integer_t ldv, {{ktp}} eps, {{ktp}} sfmin, {{ktp}} tol, fwi_integer_t nsweep, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info[, jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info]) -> (jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)

    Parameters
    ----------
    jobv : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(n), intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    mv : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    eps : {{ktp}}_, intent inout
    sfmin : {{ktp}}_, intent inout
    tol : {{ktp}}_, intent inout
    nsweep : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobv : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(n), intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    mv : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    eps : {{ktp}}_, intent inout
    sfmin : {{ktp}}_, intent inout
    tol : {{ktp}}_, intent inout
    nsweep : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobv = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray sva_
    cdef fw_shape_t sva_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    if not (0 <= n <= d_shape_[0]):
        raise ValueError("(0 <= n <= d.shape[0]) not satisifed")
    sva_, sva = fw_asfortranarray(sva, {{npy_enum}}, 1, False)
    fw_copyshape(sva_shape_, np.PyArray_DIMS(sva_), 1)
    if not (0 <= n <= sva_shape_[0]):
        raise ValueError("(0 <= n <= sva.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    if not (0 <= lwork <= work_shape_[0]):
        raise ValueError("(0 <= lwork <= work.shape[0]) not satisifed")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    {{fc_name}}(fw_jobv, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), sva_shape_, <{{ktp}}*>np.PyArray_DATA(sva_), &mv, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, &eps, &sfmin, &tol, &nsweep, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgsvj1_c', 'dgsvj1_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sgsvj1', 'dgsvj1'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobv, fwi_integer_t m, fwi_integer_t n, fwi_integer_t n1, object a, fwi_integer_t lda, object d, object sva, fwi_integer_t mv, object v, fwi_integer_t ldv, {{ktp}} eps, {{ktp}} sfmin, {{ktp}} tol, fwi_integer_t nsweep, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info[, jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info]) -> (jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)

    Parameters
    ----------
    jobv : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(n), intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    mv : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    eps : {{ktp}}_, intent inout
    sfmin : {{ktp}}_, intent inout
    tol : {{ktp}}_, intent inout
    nsweep : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobv : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(n), intent inout
    sva : {{ktp}}_, 1D array, dimension(n), intent inout
    mv : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    eps : {{ktp}}_, intent inout
    sfmin : {{ktp}}_, intent inout
    tol : {{ktp}}_, intent inout
    nsweep : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(lwork), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobv = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray sva_
    cdef fw_shape_t sva_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    if not (0 <= n <= d_shape_[0]):
        raise ValueError("(0 <= n <= d.shape[0]) not satisifed")
    sva_, sva = fw_asfortranarray(sva, {{npy_enum}}, 1, False)
    fw_copyshape(sva_shape_, np.PyArray_DIMS(sva_), 1)
    if not (0 <= n <= sva_shape_[0]):
        raise ValueError("(0 <= n <= sva.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    if not (0 <= lwork <= work_shape_[0]):
        raise ValueError("(0 <= lwork <= work.shape[0]) not satisifed")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    {{fc_name}}(fw_jobv, &m, &n, &n1, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), sva_shape_, <{{ktp}}*>np.PyArray_DATA(sva_), &mv, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, &eps, &sfmin, &tol, &nsweep, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info,)
{{endfor}}


cpdef api object sgtcon(object norm, fwi_integer_t n, object dl, object d, object du, object du2, object ipiv, fwr_real_t anorm, fwr_real_t rcond, object work, object iwork, fwi_integer_t info):
    """sgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info[, norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info]) -> (norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwr_real, 1D array, dimension(*), intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    du : fwr_real, 1D array, dimension(*), intent inout
    du2 : fwr_real, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwr_real, 1D array, dimension(*), intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    du : fwr_real, 1D array, dimension(*), intent inout
    du2 : fwr_real, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, fwr_real_t_enum, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, fwr_real_t_enum, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, fwr_real_t_enum, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    sgtcon_c(fw_norm, &n, dl_shape_, <fwr_real_t*>np.PyArray_DATA(dl_), d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), du_shape_, <fwr_real_t*>np.PyArray_DATA(du_), du2_shape_, <fwr_real_t*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sgtcon' wrapper.")
    return (fw_norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info,)


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgtrfs_c', 'dgtrfs_c', 'cgtrfs_c', 'zgtrfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgtrfs', 'dgtrfs', 'cgtrfs', 'zgtrfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t nrhs, object dl, object d, object du, object dlf, object df, object duf, object du2, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    dlf : {{ktp}}_, 1D array, dimension(*), intent inout
    df : {{ktp}}_, 1D array, dimension(*), intent inout
    duf : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    dlf : {{ktp}}_, 1D array, dimension(*), intent inout
    df : {{ktp}}_, 1D array, dimension(*), intent inout
    duf : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray dlf_
    cdef fw_shape_t dlf_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray duf_
    cdef fw_shape_t duf_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    dlf_, dlf = fw_asfortranarray(dlf, {{npy_enum}}, 1, False)
    fw_copyshape(dlf_shape_, np.PyArray_DIMS(dlf_), 1)
    df_, df = fw_asfortranarray(df, {{npy_enum}}, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    duf_, duf = fw_asfortranarray(duf, {{npy_enum}}, 1, False)
    fw_copyshape(duf_shape_, np.PyArray_DIMS(duf_), 1)
    du2_, du2 = fw_asfortranarray(du2, {{npy_enum}}, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &nrhs, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), dlf_shape_, <{{ktp}}*>np.PyArray_DATA(dlf_), df_shape_, <{{ktp}}*>np.PyArray_DATA(df_), duf_shape_, <{{ktp}}*>np.PyArray_DATA(duf_), du2_shape_, <{{ktp}}*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgtsv_c', 'dgtsv_c', 'cgtsv_c', 'zgtsv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgtsv', 'dgtsv', 'cgtsv', 'zgtsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t nrhs, object dl, object d, object du, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(n, nrhs, dl, d, du, b, ldb, info[, n, nrhs, dl, d, du, b, ldb, info]) -> (n, nrhs, dl, d, du, b, ldb, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    {{fc_name}}(&n, &nrhs, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, nrhs, dl, d, du, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sgtsvx_c', 'dgtsvx_c', 'cgtsvx_c', 'zgtsvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sgtsvx', 'dgtsvx', 'cgtsvx', 'zgtsvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object trans, fwi_integer_t n, fwi_integer_t nrhs, object dl, object d, object du, object dlf, object df, object duf, object du2, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    dlf : {{ktp}}_, 1D array, dimension(*), intent inout
    df : {{ktp}}_, 1D array, dimension(*), intent inout
    duf : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    dlf : {{ktp}}_, 1D array, dimension(*), intent inout
    df : {{ktp}}_, 1D array, dimension(*), intent inout
    duf : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray dlf_
    cdef fw_shape_t dlf_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray duf_
    cdef fw_shape_t duf_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    dlf_, dlf = fw_asfortranarray(dlf, {{npy_enum}}, 1, False)
    fw_copyshape(dlf_shape_, np.PyArray_DIMS(dlf_), 1)
    df_, df = fw_asfortranarray(df, {{npy_enum}}, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    duf_, duf = fw_asfortranarray(duf, {{npy_enum}}, 1, False)
    fw_copyshape(duf_shape_, np.PyArray_DIMS(duf_), 1)
    du2_, du2 = fw_asfortranarray(du2, {{npy_enum}}, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_fact, fw_trans, &n, &nrhs, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), dlf_shape_, <{{ktp}}*>np.PyArray_DATA(dlf_), df_shape_, <{{ktp}}*>np.PyArray_DATA(df_), duf_shape_, <{{ktp}}*>np.PyArray_DATA(duf_), du2_shape_, <{{ktp}}*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgttrf_c', 'dgttrf_c', 'cgttrf_c', 'zgttrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgttrf', 'dgttrf', 'cgttrf', 'zgttrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object dl, object d, object du, object du2, object ipiv, fwi_integer_t info):
    """{{name}}(n, dl, d, du, du2, ipiv, info[, n, dl, d, du, du2, ipiv, info]) -> (n, dl, d, du, du2, ipiv, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, {{npy_enum}}, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    {{fc_name}}(&n, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), du2_shape_, <{{ktp}}*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, dl, d, du, du2, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgttrs_c', 'dgttrs_c', 'cgttrs_c', 'zgttrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgttrs', 'dgttrs', 'cgttrs', 'zgttrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t nrhs, object dl, object d, object du, object du2, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info[, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info]) -> (trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, {{npy_enum}}, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &nrhs, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), du2_shape_, <{{ktp}}*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sgtts2_c', 'dgtts2_c', 'cgtts2_c', 'zgtts2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sgtts2', 'dgtts2', 'cgtts2', 'zgtts2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itrans, fwi_integer_t n, fwi_integer_t nrhs, object dl, object d, object du, object du2, object ipiv, object b, fwi_integer_t ldb):
    """{{name}}(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb[, itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb]) -> (itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb)

    Parameters
    ----------
    itrans : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    itrans : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout
    du2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, {{npy_enum}}, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    {{fc_name}}(&itrans, &n, &nrhs, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), du2_shape_, <{{ktp}}*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb,)
{{endfor}}


cpdef api object shgeqz(object job, object compq, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object t, fwi_integer_t ldt, object alphar, object alphai, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """shgeqz(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info[, job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info]) -> (job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwr_real_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    shgeqz_c(fw_job, fw_compq, fw_compz, &n, &ilo, &ihi, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, t_shape_, <fwr_real_t*>np.PyArray_DATA(t_), &ldt, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'shgeqz' wrapper.")
    return (fw_job, fw_compq, fw_compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info,)


cpdef api object shsein(object side, object eigsrc, object initv, object select, fwi_integer_t n, object h, fwi_integer_t ldh, object wr, object wi, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object ifaill, object ifailr, fwi_integer_t info):
    """shsein(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info[, side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info]) -> (side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info)

    Parameters
    ----------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_eigsrc = [0, 0]
    cdef char *fw_initv = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray ifaill_
    cdef fw_shape_t ifaill_shape_[1]
    cdef np.ndarray ifailr_
    cdef fw_shape_t ifailr_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    ifaill_, ifaill = fw_asfortranarray(ifaill, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifaill_shape_, np.PyArray_DIMS(ifaill_), 1)
    ifailr_, ifailr = fw_asfortranarray(ifailr, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifailr_shape_, np.PyArray_DIMS(ifailr_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_eigsrc[0] = fw_aschar(eigsrc)
    if fw_eigsrc[0] == 0:
        raise ValueError("len(eigsrc) != 1")
    fw_initv[0] = fw_aschar(initv)
    if fw_initv[0] == 0:
        raise ValueError("len(initv) != 1")
    shsein_c(fw_side, fw_eigsrc, fw_initv, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), ifaill_shape_, <fwi_integer_t*>np.PyArray_DATA(ifaill_), ifailr_shape_, <fwi_integer_t*>np.PyArray_DATA(ifailr_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'shsein' wrapper.")
    return (fw_side, fw_eigsrc, fw_initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info,)


cpdef api object shseqr(object job, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """shseqr(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info[, job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info]) -> (job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    shseqr_c(fw_job, fw_compz, &n, &ilo, &ihi, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'shseqr' wrapper.")
    return (fw_job, fw_compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info,)


{{for fc_name, ktp, name, name2
      in zip(['sisnan_c', 'disnan_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sisnan', 'disnan'],
             ['sin', 'din'])}}
cpdef api object {{name}}({{ktp}} {{name2}}):
    """{{name}}({{name2}}[, {{name2}}]) -> (fw_ret_arg, {{name2}})

    Parameters
    ----------
    {{name2}} : {{ktp}}_, intent inout

    Returns
    -------
    fw_ret_arg : fwl_logical, intent out
    {{name2}} : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fwl_logical_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&fw_ret_arg, &{{name2}}, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, {{name2}},)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_gbamv_c', 'dla_gbamv_c', 'cla_gbamv_c', 'zla_gbamv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sla_gbamv', 'dla_gbamv', 'cla_gbamv', 'zla_gbamv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, {{ktp}} alpha, object ab, fwi_integer_t ldab, object x, fwi_integer_t incx, {{ktp}} beta, object y, fwi_integer_t incy):
    """{{name}}(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy[, trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy]) -> (trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy)

    Parameters
    ----------
    trans : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    ab : {{ktp2}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    Returns
    -------
    trans : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    ab : {{ktp2}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum2}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    {{fc_name}}(&trans, &m, &n, &kl, &ku, &alpha, ab_shape_, <{{ktp2}}*>np.PyArray_DATA(ab_), &ldab, x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &incx, &beta, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sla_gbrcond_c', 'dla_gbrcond_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sla_gbrcond', 'dla_gbrcond'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, fwi_integer_t cmode, object c, fwi_integer_t info, object work, object iwork):
    """{{name}}(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork[, trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork]) -> (fw_ret_arg, trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    trans : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(&fw_ret_arg, fw_trans, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &cmode, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_gbrfsx_extended_c', 'dla_gbrfsx_extended_c', 'cla_gbrfsx_extended_c', 'zla_gbrfsx_extended_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_gbrfsx_extended', 'dla_gbrfsx_extended', 'cla_gbrfsx_extended', 'zla_gbrfsx_extended'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t prec_type, fwi_integer_t trans_type, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object ipiv, fwl_logical_t colequ, object c, object b, fwi_integer_t ldb, object y, fwi_integer_t ldy, object berr_out, fwi_integer_t n_norms, object err_bnds_norm, object err_bnds_comp, object res, object ayb, object dy, object y_tail, {{ktp2}} rcond, fwi_integer_t ithresh, {{ktp2}} rthresh, {{ktp2}} dz_ub, fwl_logical_t ignore_cwise, fwi_integer_t info):
    """{{name}}(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info[, prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info]) -> (prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)

    Parameters
    ----------
    prec_type : fwi_integer, intent inout
    trans_type : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    prec_type : fwi_integer, intent inout
    trans_type : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef np.ndarray berr_out_
    cdef fw_shape_t berr_out_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray res_
    cdef fw_shape_t res_shape_[1]
    cdef np.ndarray ayb_
    cdef fw_shape_t ayb_shape_[1]
    cdef np.ndarray dy_
    cdef fw_shape_t dy_shape_[1]
    cdef np.ndarray y_tail_
    cdef fw_shape_t y_tail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    berr_out_, berr_out = fw_asfortranarray(berr_out, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_out_shape_, np.PyArray_DIMS(berr_out_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    res_, res = fw_asfortranarray(res, {{npy_enum}}, 1, False)
    fw_copyshape(res_shape_, np.PyArray_DIMS(res_), 1)
    ayb_, ayb = fw_asfortranarray(ayb, {{npy_enum2}}, 1, False)
    fw_copyshape(ayb_shape_, np.PyArray_DIMS(ayb_), 1)
    dy_, dy = fw_asfortranarray(dy, {{npy_enum}}, 1, False)
    fw_copyshape(dy_shape_, np.PyArray_DIMS(dy_), 1)
    y_tail_, y_tail = fw_asfortranarray(y_tail, {{npy_enum}}, 1, False)
    fw_copyshape(y_tail_shape_, np.PyArray_DIMS(y_tail_), 1)
    {{fc_name}}(&prec_type, &trans_type, &n, &kl, &ku, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &colequ, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, berr_out_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_out_), &n_norms, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), res_shape_, <{{ktp}}*>np.PyArray_DATA(res_), ayb_shape_, <{{ktp2}}*>np.PyArray_DATA(ayb_), dy_shape_, <{{ktp}}*>np.PyArray_DATA(dy_), y_tail_shape_, <{{ktp}}*>np.PyArray_DATA(y_tail_), &rcond, &ithresh, &rthresh, &dz_ub, &ignore_cwise, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['sla_gbrpvgrw_c', 'dla_gbrpvgrw_c', 'cla_gbrpvgrw_c', 'zla_gbrpvgrw_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_gbrpvgrw', 'dla_gbrpvgrw', 'cla_gbrpvgrw', 'zla_gbrpvgrw'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, fwi_integer_t ncols, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb):
    """{{name}}(n, kl, ku, ncols, ab, ldab, afb, ldafb[, n, kl, ku, ncols, ab, ldab, afb, ldafb]) -> (fw_ret_arg, n, kl, ku, ncols, ab, ldab, afb, ldafb)

    Parameters
    ----------
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ncols : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ncols : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    {{fc_name}}(&fw_ret_arg, &n, &kl, &ku, &ncols, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, n, kl, ku, ncols, ab, ldab, afb, ldafb,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_geamv_c', 'dla_geamv_c', 'cla_geamv_c', 'zla_geamv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sla_geamv', 'dla_geamv', 'cla_geamv', 'zla_geamv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t trans, fwi_integer_t m, fwi_integer_t n, {{ktp}} alpha, object a, fwi_integer_t lda, object x, fwi_integer_t incx, {{ktp}} beta, object y, fwi_integer_t incy):
    """{{name}}(trans, m, n, alpha, a, lda, x, incx, beta, y, incy[, trans, m, n, alpha, a, lda, x, incx, beta, y, incy]) -> (trans, m, n, alpha, a, lda, x, incx, beta, y, incy)

    Parameters
    ----------
    trans : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    Returns
    -------
    trans : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum2}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    {{fc_name}}(&trans, &m, &n, &alpha, a_shape_, <{{ktp2}}*>np.PyArray_DATA(a_), &lda, x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &incx, &beta, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (trans, m, n, alpha, a, lda, x, incx, beta, y, incy,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sla_gercond_c', 'dla_gercond_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sla_gercond', 'dla_gercond'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, fwi_integer_t cmode, object c, fwi_integer_t info, object work, object iwork):
    """{{name}}(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork[, trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork]) -> (fw_ret_arg, trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    trans : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(&fw_ret_arg, fw_trans, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &cmode, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, name2, name3, npy_enum, npy_enum2
      in zip(['sla_gerfsx_extended_c', 'dla_gerfsx_extended_c', 'cla_gerfsx_extended_c', 'zla_gerfsx_extended_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_gerfsx_extended', 'dla_gerfsx_extended', 'cla_gerfsx_extended', 'zla_gerfsx_extended'],
             ['err_bnds_norm', 'errs_n', 'errs_n', 'errs_n'],
             ['err_bnds_comp', 'errs_c', 'errs_c', 'errs_c'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t prec_type, fwi_integer_t trans_type, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, fwl_logical_t colequ, object c, object b, fwi_integer_t ldb, object y, fwi_integer_t ldy, object berr_out, fwi_integer_t n_norms, object {{name2}}, object {{name3}}, object res, object ayb, object dy, object y_tail, {{ktp2}} rcond, fwi_integer_t ithresh, {{ktp2}} rthresh, {{ktp2}} dz_ub, fwl_logical_t ignore_cwise, fwi_integer_t info):
    """{{name}}(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, {{name2}}, {{name3}}, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info[, prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, {{name2}}, {{name3}}, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info]) -> (prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, {{name2}}, {{name3}}, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)

    Parameters
    ----------
    prec_type : fwi_integer, intent inout
    trans_type : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    {{name2}} : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    {{name3}} : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    prec_type : fwi_integer, intent inout
    trans_type : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    {{name2}} : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    {{name3}} : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef np.ndarray berr_out_
    cdef fw_shape_t berr_out_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[2]
    cdef np.ndarray {{name3}}_
    cdef fw_shape_t {{name3}}_shape_[2]
    cdef np.ndarray res_
    cdef fw_shape_t res_shape_[1]
    cdef np.ndarray ayb_
    cdef fw_shape_t ayb_shape_[1]
    cdef np.ndarray dy_
    cdef fw_shape_t dy_shape_[1]
    cdef np.ndarray y_tail_
    cdef fw_shape_t y_tail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    berr_out_, berr_out = fw_asfortranarray(berr_out, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_out_shape_, np.PyArray_DIMS(berr_out_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 2, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 2)
    if nrhs != {{name2}}_shape_[0]:
        raise ValueError("(nrhs == {{name2}}.shape[0]) not satisifed")
    {{name3}}_, {{name3}} = fw_asfortranarray({{name3}}, {{npy_enum2}}, 2, False)
    fw_copyshape({{name3}}_shape_, np.PyArray_DIMS({{name3}}_), 2)
    if nrhs != {{name3}}_shape_[0]:
        raise ValueError("(nrhs == {{name3}}.shape[0]) not satisifed")
    res_, res = fw_asfortranarray(res, {{npy_enum}}, 1, False)
    fw_copyshape(res_shape_, np.PyArray_DIMS(res_), 1)
    ayb_, ayb = fw_asfortranarray(ayb, {{npy_enum2}}, 1, False)
    fw_copyshape(ayb_shape_, np.PyArray_DIMS(ayb_), 1)
    dy_, dy = fw_asfortranarray(dy, {{npy_enum}}, 1, False)
    fw_copyshape(dy_shape_, np.PyArray_DIMS(dy_), 1)
    y_tail_, y_tail = fw_asfortranarray(y_tail, {{npy_enum}}, 1, False)
    fw_copyshape(y_tail_shape_, np.PyArray_DIMS(y_tail_), 1)
    {{fc_name}}(&prec_type, &trans_type, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &colequ, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, berr_out_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_out_), &n_norms, {{name2}}_shape_, <{{ktp2}}*>np.PyArray_DATA({{name2}}_), {{name3}}_shape_, <{{ktp2}}*>np.PyArray_DATA({{name3}}_), res_shape_, <{{ktp}}*>np.PyArray_DATA(res_), ayb_shape_, <{{ktp2}}*>np.PyArray_DATA(ayb_), dy_shape_, <{{ktp}}*>np.PyArray_DATA(dy_), y_tail_shape_, <{{ktp}}*>np.PyArray_DATA(y_tail_), &rcond, &ithresh, &rthresh, &dz_ub, &ignore_cwise, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, {{name2}}, {{name3}}, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_lin_berr_c', 'dla_lin_berr_c', 'cla_lin_berr_c', 'zla_lin_berr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_lin_berr', 'dla_lin_berr', 'cla_lin_berr', 'zla_lin_berr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t nz, fwi_integer_t nrhs, object res, object ayb, object berr):
    """{{name}}(n, nz, nrhs, res, ayb, berr[, n, nz, nrhs, res, ayb, berr]) -> (n, nz, nrhs, res, ayb, berr)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nz : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    res : {{ktp}}_, 2D array, dimension(n, nrhs), intent inout
    ayb : {{ktp2}}_, 2D array, dimension(n, nrhs), intent inout
    berr : {{ktp2}}_, 1D array, dimension(nrhs), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nz : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    res : {{ktp}}_, 2D array, dimension(n, nrhs), intent inout
    ayb : {{ktp2}}_, 2D array, dimension(n, nrhs), intent inout
    berr : {{ktp2}}_, 1D array, dimension(nrhs), intent inout

    """
    cdef np.ndarray res_
    cdef fw_shape_t res_shape_[2]
    cdef np.ndarray ayb_
    cdef fw_shape_t ayb_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    res_, res = fw_asfortranarray(res, {{npy_enum}}, 2, False)
    fw_copyshape(res_shape_, np.PyArray_DIMS(res_), 2)
    if n != res_shape_[0]:
        raise ValueError("(n == res.shape[0]) not satisifed")
    if not (0 <= nrhs <= res_shape_[1]):
        raise ValueError("(0 <= nrhs <= res.shape[1]) not satisifed")
    ayb_, ayb = fw_asfortranarray(ayb, {{npy_enum2}}, 2, False)
    fw_copyshape(ayb_shape_, np.PyArray_DIMS(ayb_), 2)
    if n != ayb_shape_[0]:
        raise ValueError("(n == ayb.shape[0]) not satisifed")
    if not (0 <= nrhs <= ayb_shape_[1]):
        raise ValueError("(0 <= nrhs <= ayb.shape[1]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    if not (0 <= nrhs <= berr_shape_[0]):
        raise ValueError("(0 <= nrhs <= berr.shape[0]) not satisifed")
    {{fc_name}}(&n, &nz, &nrhs, res_shape_, <{{ktp}}*>np.PyArray_DATA(res_), ayb_shape_, <{{ktp2}}*>np.PyArray_DATA(ayb_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, nz, nrhs, res, ayb, berr,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sla_porcond_c', 'dla_porcond_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sla_porcond', 'dla_porcond'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, fwi_integer_t cmode, object c, fwi_integer_t info, object work, object iwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork[, uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, &cmode, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_porfsx_extended_c', 'dla_porfsx_extended_c', 'cla_porfsx_extended_c', 'zla_porfsx_extended_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_porfsx_extended', 'dla_porfsx_extended', 'cla_porfsx_extended', 'zla_porfsx_extended'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t prec_type, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, fwl_logical_t colequ, object c, object b, fwi_integer_t ldb, object y, fwi_integer_t ldy, object berr_out, fwi_integer_t n_norms, object err_bnds_norm, object err_bnds_comp, object res, object ayb, object dy, object y_tail, {{ktp2}} rcond, fwi_integer_t ithresh, {{ktp2}} rthresh, {{ktp2}} dz_ub, fwl_logical_t ignore_cwise, fwi_integer_t info):
    """{{name}}(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info[, prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info]) -> (prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)

    Parameters
    ----------
    prec_type : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    prec_type : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef np.ndarray berr_out_
    cdef fw_shape_t berr_out_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray res_
    cdef fw_shape_t res_shape_[1]
    cdef np.ndarray ayb_
    cdef fw_shape_t ayb_shape_[1]
    cdef np.ndarray dy_
    cdef fw_shape_t dy_shape_[1]
    cdef np.ndarray y_tail_
    cdef fw_shape_t y_tail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    berr_out_, berr_out = fw_asfortranarray(berr_out, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_out_shape_, np.PyArray_DIMS(berr_out_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    res_, res = fw_asfortranarray(res, {{npy_enum}}, 1, False)
    fw_copyshape(res_shape_, np.PyArray_DIMS(res_), 1)
    ayb_, ayb = fw_asfortranarray(ayb, {{npy_enum2}}, 1, False)
    fw_copyshape(ayb_shape_, np.PyArray_DIMS(ayb_), 1)
    dy_, dy = fw_asfortranarray(dy, {{npy_enum}}, 1, False)
    fw_copyshape(dy_shape_, np.PyArray_DIMS(dy_), 1)
    y_tail_, y_tail = fw_asfortranarray(y_tail, {{npy_enum}}, 1, False)
    fw_copyshape(y_tail_shape_, np.PyArray_DIMS(y_tail_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&prec_type, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, &colequ, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, berr_out_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_out_), &n_norms, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), res_shape_, <{{ktp}}*>np.PyArray_DATA(res_), ayb_shape_, <{{ktp2}}*>np.PyArray_DATA(ayb_), dy_shape_, <{{ktp}}*>np.PyArray_DATA(dy_), y_tail_shape_, <{{ktp}}*>np.PyArray_DATA(y_tail_), &rcond, &ithresh, &rthresh, &dz_ub, &ignore_cwise, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (prec_type, fw_uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_porpvgrw_c', 'dla_porpvgrw_c', 'cla_porpvgrw_c', 'zla_porpvgrw_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_porpvgrw', 'dla_porpvgrw', 'cla_porpvgrw', 'zla_porpvgrw'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t ncols, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object work):
    """{{name}}(uplo, ncols, a, lda, af, ldaf, work[, uplo, ncols, a, lda, af, ldaf, work]) -> (fw_ret_arg, uplo, ncols, a, lda, af, ldaf, work)

    Parameters
    ----------
    uplo : object_, intent inout
    ncols : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    ncols : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &ncols, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, ncols, a, lda, af, ldaf, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['sla_rpvgrw_c', 'dla_rpvgrw_c', 'cla_rpvgrw_c', 'zla_rpvgrw_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_rpvgrw', 'dla_rpvgrw', 'cla_rpvgrw', 'zla_rpvgrw'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t ncols, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf):
    """{{name}}(n, ncols, a, lda, af, ldaf[, n, ncols, a, lda, af, ldaf]) -> (fw_ret_arg, n, ncols, a, lda, af, ldaf)

    Parameters
    ----------
    n : fwi_integer, intent inout
    ncols : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    n : fwi_integer, intent inout
    ncols : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    {{fc_name}}(&fw_ret_arg, &n, &ncols, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, n, ncols, a, lda, af, ldaf,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_syamv_c', 'dla_syamv_c', 'cla_syamv_c', 'zla_syamv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sla_syamv', 'dla_syamv', 'cla_syamv', 'zla_syamv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t uplo, fwi_integer_t n, {{ktp}} alpha, object a, fwi_integer_t lda, object x, fwi_integer_t incx, {{ktp}} beta, object y, fwi_integer_t incy):
    """{{name}}(uplo, n, alpha, a, lda, x, incx, beta, y, incy[, uplo, n, alpha, a, lda, x, incx, beta, y, incy]) -> (uplo, n, alpha, a, lda, x, incx, beta, y, incy)

    Parameters
    ----------
    uplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    Returns
    -------
    uplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp2}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum2}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    {{fc_name}}(&uplo, &n, &alpha, a_shape_, <{{ktp2}}*>np.PyArray_DATA(a_), &lda, x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &incx, &beta, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (uplo, n, alpha, a, lda, x, incx, beta, y, incy,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sla_syrcond_c', 'dla_syrcond_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sla_syrcond', 'dla_syrcond'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, fwi_integer_t cmode, object c, fwi_integer_t info, object work, object iwork):
    """{{name}}(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork[, uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork]) -> (fw_ret_arg, uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    cmode : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &cmode, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &info, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_syrfsx_extended_c', 'dla_syrfsx_extended_c', 'cla_syrfsx_extended_c', 'zla_syrfsx_extended_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_syrfsx_extended', 'dla_syrfsx_extended', 'cla_syrfsx_extended', 'zla_syrfsx_extended'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t prec_type, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, fwl_logical_t colequ, object c, object b, fwi_integer_t ldb, object y, fwi_integer_t ldy, object berr_out, fwi_integer_t n_norms, object err_bnds_norm, object err_bnds_comp, object res, object ayb, object dy, object y_tail, {{ktp2}} rcond, fwi_integer_t ithresh, {{ktp2}} rthresh, {{ktp2}} dz_ub, fwl_logical_t ignore_cwise, fwi_integer_t info):
    """{{name}}(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info[, prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info]) -> (prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)

    Parameters
    ----------
    prec_type : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    prec_type : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    colequ : fwl_logical, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout
    berr_out : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_norms : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    res : {{ktp}}_, 1D array, dimension(*), intent inout
    ayb : {{ktp2}}_, 1D array, dimension(*), intent inout
    dy : {{ktp}}_, 1D array, dimension(*), intent inout
    y_tail : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    ithresh : fwi_integer, intent inout
    rthresh : {{ktp2}}_, intent inout
    dz_ub : {{ktp2}}_, intent inout
    ignore_cwise : fwl_logical, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef np.ndarray berr_out_
    cdef fw_shape_t berr_out_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray res_
    cdef fw_shape_t res_shape_[1]
    cdef np.ndarray ayb_
    cdef fw_shape_t ayb_shape_[1]
    cdef np.ndarray dy_
    cdef fw_shape_t dy_shape_[1]
    cdef np.ndarray y_tail_
    cdef fw_shape_t y_tail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    berr_out_, berr_out = fw_asfortranarray(berr_out, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_out_shape_, np.PyArray_DIMS(berr_out_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    res_, res = fw_asfortranarray(res, {{npy_enum}}, 1, False)
    fw_copyshape(res_shape_, np.PyArray_DIMS(res_), 1)
    ayb_, ayb = fw_asfortranarray(ayb, {{npy_enum2}}, 1, False)
    fw_copyshape(ayb_shape_, np.PyArray_DIMS(ayb_), 1)
    dy_, dy = fw_asfortranarray(dy, {{npy_enum}}, 1, False)
    fw_copyshape(dy_shape_, np.PyArray_DIMS(dy_), 1)
    y_tail_, y_tail = fw_asfortranarray(y_tail, {{npy_enum}}, 1, False)
    fw_copyshape(y_tail_shape_, np.PyArray_DIMS(y_tail_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&prec_type, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &colequ, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, berr_out_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_out_), &n_norms, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), res_shape_, <{{ktp}}*>np.PyArray_DATA(res_), ayb_shape_, <{{ktp2}}*>np.PyArray_DATA(ayb_), dy_shape_, <{{ktp}}*>np.PyArray_DATA(dy_), y_tail_shape_, <{{ktp}}*>np.PyArray_DATA(y_tail_), &rcond, &ithresh, &rthresh, &dz_ub, &ignore_cwise, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (prec_type, fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sla_syrpvgrw_c', 'dla_syrpvgrw_c', 'cla_syrpvgrw_c', 'zla_syrpvgrw_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sla_syrpvgrw', 'dla_syrpvgrw', 'cla_syrpvgrw', 'zla_syrpvgrw'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t info, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object work):
    """{{name}}(uplo, n, info, a, lda, af, ldaf, ipiv, work[, uplo, n, info, a, lda, af, ldaf, ipiv, work]) -> (fw_ret_arg, uplo, n, info, a, lda, af, ldaf, ipiv, work)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    info : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    info : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_uplo, &n, &info, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_uplo, n, info, a, lda, af, ldaf, ipiv, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sla_wwaddw_c', 'dla_wwaddw_c', 'cla_wwaddw_c', 'zla_wwaddw_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sla_wwaddw', 'dla_wwaddw', 'cla_wwaddw', 'zla_wwaddw'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, object y, object w):
    """{{name}}(n, x, y, w[, n, x, y, w]) -> (n, x, y, w)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, y, w,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slabad_c', 'dlabad_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slabad', 'dlabad'])}}
cpdef api object {{name}}({{ktp}} small, {{ktp}} large):
    """{{name}}(small, large[, small, large]) -> (small, large)

    Parameters
    ----------
    small : {{ktp}}_, intent inout
    large : {{ktp}}_, intent inout

    Returns
    -------
    small : {{ktp}}_, intent inout
    large : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&small, &large, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (small, large,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slabrd_c', 'dlabrd_c', 'clabrd_c', 'zlabrd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slabrd', 'dlabrd', 'clabrd', 'zlabrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nb, object a, fwi_integer_t lda, object d, object e, object tauq, object taup, object x, fwi_integer_t ldx, object y, fwi_integer_t ldy):
    """{{name}}(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy[, m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy]) -> (m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tauq : {{ktp}}_, 1D array, dimension(*), intent inout
    taup : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tauq : {{ktp}}_, 1D array, dimension(*), intent inout
    taup : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, *), intent inout
    ldy : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tauq_
    cdef fw_shape_t tauq_shape_[1]
    cdef np.ndarray taup_
    cdef fw_shape_t taup_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum2}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tauq_, tauq = fw_asfortranarray(tauq, {{npy_enum}}, 1, False)
    fw_copyshape(tauq_shape_, np.PyArray_DIMS(tauq_), 1)
    taup_, taup = fw_asfortranarray(taup, {{npy_enum}}, 1, False)
    fw_copyshape(taup_shape_, np.PyArray_DIMS(taup_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    {{fc_name}}(&m, &n, &nb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tauq_shape_, <{{ktp}}*>np.PyArray_DATA(tauq_), taup_shape_, <{{ktp}}*>np.PyArray_DATA(taup_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy,)
{{endfor}}


cpdef api object slacn2(fwi_integer_t n, object v, object x, object isgn, fwr_real_t est, fwi_integer_t kase, object isave):
    """slacn2(n, v, x, isgn, est, kase, isave[, n, v, x, isgn, est, kase, isave]) -> (n, v, x, isgn, est, kase, isave)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwr_real, 1D array, dimension(*), intent inout
    x : fwr_real, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwr_real, 1D array, dimension(*), intent inout
    x : fwr_real, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray isgn_
    cdef fw_shape_t isgn_shape_[1]
    cdef np.ndarray isave_
    cdef fw_shape_t isave_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    x_, x = fw_asfortranarray(x, fwr_real_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    isgn_, isgn = fw_asfortranarray(isgn, fwi_integer_t_enum, 1, False)
    fw_copyshape(isgn_shape_, np.PyArray_DIMS(isgn_), 1)
    isave_, isave = fw_asfortranarray(isave, fwi_integer_t_enum, 1, False)
    fw_copyshape(isave_shape_, np.PyArray_DIMS(isave_), 1)
    if not (0 <= 3 <= isave_shape_[0]):
        raise ValueError("(0 <= 3 <= isave.shape[0]) not satisifed")
    slacn2_c(&n, v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), x_shape_, <fwr_real_t*>np.PyArray_DATA(x_), isgn_shape_, <fwi_integer_t*>np.PyArray_DATA(isgn_), &est, &kase, isave_shape_, <fwi_integer_t*>np.PyArray_DATA(isave_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slacn2' wrapper.")
    return (n, v, x, isgn, est, kase, isave,)


cpdef api object slacon(fwi_integer_t n, object v, object x, object isgn, fwr_real_t est, fwi_integer_t kase):
    """slacon(n, v, x, isgn, est, kase[, n, v, x, isgn, est, kase]) -> (n, v, x, isgn, est, kase)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwr_real, 1D array, dimension(*), intent inout
    x : fwr_real, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwr_real, 1D array, dimension(*), intent inout
    x : fwr_real, 1D array, dimension(*), intent inout
    isgn : fwi_integer, 1D array, dimension(*), intent inout
    est : fwr_real, intent inout
    kase : fwi_integer, intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray isgn_
    cdef fw_shape_t isgn_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    x_, x = fw_asfortranarray(x, fwr_real_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    isgn_, isgn = fw_asfortranarray(isgn, fwi_integer_t_enum, 1, False)
    fw_copyshape(isgn_shape_, np.PyArray_DIMS(isgn_), 1)
    slacon_c(&n, v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), x_shape_, <fwr_real_t*>np.PyArray_DATA(x_), isgn_shape_, <fwi_integer_t*>np.PyArray_DATA(isgn_), &est, &kase, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slacon' wrapper.")
    return (n, v, x, isgn, est, kase,)


{{for fc_name, ktp, name, npy_enum
      in zip(['slacpy_c', 'dlacpy_c', 'clacpy_c', 'zlacpy_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slacpy', 'dlacpy', 'clacpy', 'zlacpy'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb):
    """{{name}}(uplo, m, n, a, lda, b, ldb[, uplo, m, n, a, lda, b, ldb]) -> (uplo, m, n, a, lda, b, ldb)

    Parameters
    ----------
    uplo : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, m, n, a, lda, b, ldb,)
{{endfor}}


cpdef api object sladiv(fwr_real_t a, fwr_real_t b, fwr_real_t c, fwr_real_t d, fwr_real_t p, fwr_real_t q):
    """sladiv(a, b, c, d, p, q[, a, b, c, d, p, q]) -> (a, b, c, d, p, q)

    Parameters
    ----------
    a : fwr_real, intent inout
    b : fwr_real, intent inout
    c : fwr_real, intent inout
    d : fwr_real, intent inout
    p : fwr_real, intent inout
    q : fwr_real, intent inout

    Returns
    -------
    a : fwr_real, intent inout
    b : fwr_real, intent inout
    c : fwr_real, intent inout
    d : fwr_real, intent inout
    p : fwr_real, intent inout
    q : fwr_real, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    sladiv_c(&a, &b, &c, &d, &p, &q, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sladiv' wrapper.")
    return (a, b, c, d, p, q,)


{{for fc_name, ktp, name
      in zip(['slae2_c', 'dlae2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slae2', 'dlae2'])}}
cpdef api object {{name}}({{ktp}} a, {{ktp}} b, {{ktp}} c, {{ktp}} rt1, {{ktp}} rt2):
    """{{name}}(a, b, c, rt1, rt2[, a, b, c, rt1, rt2]) -> (a, b, c, rt1, rt2)

    Parameters
    ----------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    rt1 : {{ktp}}_, intent inout
    rt2 : {{ktp}}_, intent inout

    Returns
    -------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    rt1 : {{ktp}}_, intent inout
    rt2 : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&a, &b, &c, &rt1, &rt2, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (a, b, c, rt1, rt2,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaebz_c', 'dlaebz_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaebz', 'dlaebz'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t ijob, fwi_integer_t nitmax, fwi_integer_t n, fwi_integer_t mmax, fwi_integer_t minp, fwi_integer_t nbmin, {{ktp}} abstol, {{ktp}} reltol, {{ktp}} pivmin, object d, object e, object e2, object nval, object ab, object c, fwi_integer_t mout, object nab, object work, object iwork, fwi_integer_t info):
    """{{name}}(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info[, ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info]) -> (ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info)

    Parameters
    ----------
    ijob : fwi_integer, intent inout
    nitmax : fwi_integer, intent inout
    n : fwi_integer, intent inout
    mmax : fwi_integer, intent inout
    minp : fwi_integer, intent inout
    nbmin : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    reltol : {{ktp}}_, intent inout
    pivmin : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    nval : fwi_integer, 1D array, dimension(*), intent inout
    ab : {{ktp}}_, 2D array, dimension(mmax, *), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    mout : fwi_integer, intent inout
    nab : fwi_integer, 2D array, dimension(mmax, *), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ijob : fwi_integer, intent inout
    nitmax : fwi_integer, intent inout
    n : fwi_integer, intent inout
    mmax : fwi_integer, intent inout
    minp : fwi_integer, intent inout
    nbmin : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    reltol : {{ktp}}_, intent inout
    pivmin : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    nval : fwi_integer, 1D array, dimension(*), intent inout
    ab : {{ktp}}_, 2D array, dimension(mmax, *), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    mout : fwi_integer, intent inout
    nab : fwi_integer, 2D array, dimension(mmax, *), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray e2_
    cdef fw_shape_t e2_shape_[1]
    cdef np.ndarray nval_
    cdef fw_shape_t nval_shape_[1]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray nab_
    cdef fw_shape_t nab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    e2_, e2 = fw_asfortranarray(e2, {{npy_enum}}, 1, False)
    fw_copyshape(e2_shape_, np.PyArray_DIMS(e2_), 1)
    nval_, nval = fw_asfortranarray(nval, fwi_integer_t_enum, 1, False)
    fw_copyshape(nval_shape_, np.PyArray_DIMS(nval_), 1)
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if mmax != ab_shape_[0]:
        raise ValueError("(mmax == ab.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    nab_, nab = fw_asfortranarray(nab, fwi_integer_t_enum, 2, False)
    fw_copyshape(nab_shape_, np.PyArray_DIMS(nab_), 2)
    if mmax != nab_shape_[0]:
        raise ValueError("(mmax == nab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&ijob, &nitmax, &n, &mmax, &minp, &nbmin, &abstol, &reltol, &pivmin, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), e2_shape_, <{{ktp}}*>np.PyArray_DATA(e2_), nval_shape_, <fwi_integer_t*>np.PyArray_DATA(nval_), ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &mout, nab_shape_, <fwi_integer_t*>np.PyArray_DATA(nab_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info,)
{{endfor}}


cpdef api object slaed0(fwi_integer_t icompq, fwi_integer_t qsiz, fwi_integer_t n, object d, object e, object q, fwi_integer_t ldq, object qstore, fwi_integer_t ldqs, object work, object iwork, fwi_integer_t info):
    """slaed0(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info[, icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info]) -> (icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwr_real, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwr_real, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    qstore_, qstore = fw_asfortranarray(qstore, fwr_real_t_enum, 2, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 2)
    if ldqs != qstore_shape_[0]:
        raise ValueError("(ldqs == qstore.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    slaed0_c(&icompq, &qsiz, &n, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, qstore_shape_, <fwr_real_t*>np.PyArray_DATA(qstore_), &ldqs, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaed0' wrapper.")
    return (icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed1_c', 'dlaed1_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed1', 'dlaed1'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object q, fwi_integer_t ldq, object indxq, {{ktp}} rho, fwi_integer_t cutpnt, object work, object iwork, fwi_integer_t info):
    """{{name}}(n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info[, n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info]) -> (n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    cutpnt : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    cutpnt : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), &rho, &cutpnt, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed2_c', 'dlaed2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed2', 'dlaed2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t k, fwi_integer_t n, fwi_integer_t n1, object d, object q, fwi_integer_t ldq, object indxq, {{ktp}} rho, object z, object dlamda, object w, object q2, object indx, object indxc, object indxp, object coltyp, fwi_integer_t info):
    """{{name}}(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info[, k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info]) -> (k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info)

    Parameters
    ----------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    dlamda : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    q2 : {{ktp}}_, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    indxc : fwi_integer, 1D array, dimension(*), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    coltyp : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    dlamda : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    q2 : {{ktp}}_, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    indxc : fwi_integer, 1D array, dimension(*), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    coltyp : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray q2_
    cdef fw_shape_t q2_shape_[1]
    cdef np.ndarray indx_
    cdef fw_shape_t indx_shape_[1]
    cdef np.ndarray indxc_
    cdef fw_shape_t indxc_shape_[1]
    cdef np.ndarray indxp_
    cdef fw_shape_t indxp_shape_[1]
    cdef np.ndarray coltyp_
    cdef fw_shape_t coltyp_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    dlamda_, dlamda = fw_asfortranarray(dlamda, {{npy_enum}}, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    q2_, q2 = fw_asfortranarray(q2, {{npy_enum}}, 1, False)
    fw_copyshape(q2_shape_, np.PyArray_DIMS(q2_), 1)
    indx_, indx = fw_asfortranarray(indx, fwi_integer_t_enum, 1, False)
    fw_copyshape(indx_shape_, np.PyArray_DIMS(indx_), 1)
    indxc_, indxc = fw_asfortranarray(indxc, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxc_shape_, np.PyArray_DIMS(indxc_), 1)
    indxp_, indxp = fw_asfortranarray(indxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxp_shape_, np.PyArray_DIMS(indxp_), 1)
    coltyp_, coltyp = fw_asfortranarray(coltyp, fwi_integer_t_enum, 1, False)
    fw_copyshape(coltyp_shape_, np.PyArray_DIMS(coltyp_), 1)
    {{fc_name}}(&k, &n, &n1, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), &rho, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), dlamda_shape_, <{{ktp}}*>np.PyArray_DATA(dlamda_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), q2_shape_, <{{ktp}}*>np.PyArray_DATA(q2_), indx_shape_, <fwi_integer_t*>np.PyArray_DATA(indx_), indxc_shape_, <fwi_integer_t*>np.PyArray_DATA(indxc_), indxp_shape_, <fwi_integer_t*>np.PyArray_DATA(indxp_), coltyp_shape_, <fwi_integer_t*>np.PyArray_DATA(coltyp_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed3_c', 'dlaed3_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed3', 'dlaed3'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t k, fwi_integer_t n, fwi_integer_t n1, object d, object q, fwi_integer_t ldq, {{ktp}} rho, object dlamda, object q2, object indx, object ctot, object w, object s, fwi_integer_t info):
    """{{name}}(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info[, k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info]) -> (k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info)

    Parameters
    ----------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : {{ktp}}_, intent inout
    dlamda : {{ktp}}_, 1D array, dimension(*), intent inout
    q2 : {{ktp}}_, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    ctot : fwi_integer, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : {{ktp}}_, intent inout
    dlamda : {{ktp}}_, 1D array, dimension(*), intent inout
    q2 : {{ktp}}_, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    ctot : fwi_integer, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray q2_
    cdef fw_shape_t q2_shape_[1]
    cdef np.ndarray indx_
    cdef fw_shape_t indx_shape_[1]
    cdef np.ndarray ctot_
    cdef fw_shape_t ctot_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    dlamda_, dlamda = fw_asfortranarray(dlamda, {{npy_enum}}, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    q2_, q2 = fw_asfortranarray(q2, {{npy_enum}}, 1, False)
    fw_copyshape(q2_shape_, np.PyArray_DIMS(q2_), 1)
    indx_, indx = fw_asfortranarray(indx, fwi_integer_t_enum, 1, False)
    fw_copyshape(indx_shape_, np.PyArray_DIMS(indx_), 1)
    ctot_, ctot = fw_asfortranarray(ctot, fwi_integer_t_enum, 1, False)
    fw_copyshape(ctot_shape_, np.PyArray_DIMS(ctot_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    {{fc_name}}(&k, &n, &n1, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &rho, dlamda_shape_, <{{ktp}}*>np.PyArray_DATA(dlamda_), q2_shape_, <{{ktp}}*>np.PyArray_DATA(q2_), indx_shape_, <fwi_integer_t*>np.PyArray_DATA(indx_), ctot_shape_, <fwi_integer_t*>np.PyArray_DATA(ctot_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), s_shape_, <{{ktp}}*>np.PyArray_DATA(s_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed4_c', 'dlaed4_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed4', 'dlaed4'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t i, object d, object z, object delta, {{ktp}} rho, {{ktp}} dlam, fwi_integer_t info):
    """{{name}}(n, i, d, z, delta, rho, dlam, info[, n, i, d, z, delta, rho, dlam, info]) -> (n, i, d, z, delta, rho, dlam, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    delta : {{ktp}}_, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    dlam : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    delta : {{ktp}}_, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    dlam : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray delta_
    cdef fw_shape_t delta_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    delta_, delta = fw_asfortranarray(delta, {{npy_enum}}, 1, False)
    fw_copyshape(delta_shape_, np.PyArray_DIMS(delta_), 1)
    {{fc_name}}(&n, &i, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), delta_shape_, <{{ktp}}*>np.PyArray_DATA(delta_), &rho, &dlam, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, i, d, z, delta, rho, dlam, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed5_c', 'dlaed5_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed5', 'dlaed5'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t i, object d, object z, object delta, {{ktp}} rho, {{ktp}} dlam):
    """{{name}}(i, d, z, delta, rho, dlam[, i, d, z, delta, rho, dlam]) -> (i, d, z, delta, rho, dlam)

    Parameters
    ----------
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(2), intent inout
    z : {{ktp}}_, 1D array, dimension(2), intent inout
    delta : {{ktp}}_, 1D array, dimension(2), intent inout
    rho : {{ktp}}_, intent inout
    dlam : {{ktp}}_, intent inout

    Returns
    -------
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(2), intent inout
    z : {{ktp}}_, 1D array, dimension(2), intent inout
    delta : {{ktp}}_, 1D array, dimension(2), intent inout
    rho : {{ktp}}_, intent inout
    dlam : {{ktp}}_, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray delta_
    cdef fw_shape_t delta_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    if not (0 <= 2 <= d_shape_[0]):
        raise ValueError("(0 <= 2 <= d.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    if not (0 <= 2 <= z_shape_[0]):
        raise ValueError("(0 <= 2 <= z.shape[0]) not satisifed")
    delta_, delta = fw_asfortranarray(delta, {{npy_enum}}, 1, False)
    fw_copyshape(delta_shape_, np.PyArray_DIMS(delta_), 1)
    if not (0 <= 2 <= delta_shape_[0]):
        raise ValueError("(0 <= 2 <= delta.shape[0]) not satisifed")
    {{fc_name}}(&i, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), delta_shape_, <{{ktp}}*>np.PyArray_DATA(delta_), &rho, &dlam, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (i, d, z, delta, rho, dlam,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed6_c', 'dlaed6_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed6', 'dlaed6'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t kniter, fwl_logical_t orgati, {{ktp}} rho, object d, object z, {{ktp}} finit, {{ktp}} tau, fwi_integer_t info):
    """{{name}}(kniter, orgati, rho, d, z, finit, tau, info[, kniter, orgati, rho, d, z, finit, tau, info]) -> (kniter, orgati, rho, d, z, finit, tau, info)

    Parameters
    ----------
    kniter : fwi_integer, intent inout
    orgati : fwl_logical, intent inout
    rho : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(3), intent inout
    z : {{ktp}}_, 1D array, dimension(3), intent inout
    finit : {{ktp}}_, intent inout
    tau : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    kniter : fwi_integer, intent inout
    orgati : fwl_logical, intent inout
    rho : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(3), intent inout
    z : {{ktp}}_, 1D array, dimension(3), intent inout
    finit : {{ktp}}_, intent inout
    tau : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    if not (0 <= 3 <= d_shape_[0]):
        raise ValueError("(0 <= 3 <= d.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    if not (0 <= 3 <= z_shape_[0]):
        raise ValueError("(0 <= 3 <= z.shape[0]) not satisifed")
    {{fc_name}}(&kniter, &orgati, &rho, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &finit, &tau, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (kniter, orgati, rho, d, z, finit, tau, info,)
{{endfor}}


cpdef api object slaed7(fwi_integer_t icompq, fwi_integer_t n, fwi_integer_t qsiz, fwi_integer_t tlvls, fwi_integer_t curlvl, fwi_integer_t curpbm, object d, object q, fwi_integer_t ldq, object indxq, fwr_real_t rho, fwi_integer_t cutpnt, object qstore, object qptr, object prmptr, object perm, object givptr, object givcol, object givnum, object work, object iwork, fwi_integer_t info):
    """slaed7(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info[, icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info]) -> (icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_real, intent inout
    cutpnt : fwi_integer, intent inout
    qstore : fwr_real, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_real, intent inout
    cutpnt : fwi_integer, intent inout
    qstore : fwr_real, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[1]
    cdef np.ndarray qptr_
    cdef fw_shape_t qptr_shape_[1]
    cdef np.ndarray prmptr_
    cdef fw_shape_t prmptr_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    qstore_, qstore = fw_asfortranarray(qstore, fwr_real_t_enum, 1, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 1)
    qptr_, qptr = fw_asfortranarray(qptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(qptr_shape_, np.PyArray_DIMS(qptr_), 1)
    prmptr_, prmptr = fw_asfortranarray(prmptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(prmptr_shape_, np.PyArray_DIMS(prmptr_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_real_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    slaed7_c(&icompq, &n, &qsiz, &tlvls, &curlvl, &curpbm, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), &rho, &cutpnt, qstore_shape_, <fwr_real_t*>np.PyArray_DATA(qstore_), qptr_shape_, <fwi_integer_t*>np.PyArray_DATA(qptr_), prmptr_shape_, <fwi_integer_t*>np.PyArray_DATA(prmptr_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_real_t*>np.PyArray_DATA(givnum_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaed7' wrapper.")
    return (icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info,)


cpdef api object slaed8(fwi_integer_t icompq, fwi_integer_t k, fwi_integer_t n, fwi_integer_t qsiz, object d, object q, fwi_integer_t ldq, object indxq, fwr_real_t rho, fwi_integer_t cutpnt, object z, object dlamda, object q2, fwi_integer_t ldq2, object w, object perm, fwi_integer_t givptr, object givcol, object givnum, object indxp, object indx, fwi_integer_t info):
    """slaed8(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info[, icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info]) -> (icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_real, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_real, 1D array, dimension(*), intent inout
    dlamda : fwr_real, 1D array, dimension(*), intent inout
    q2 : fwr_real, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_real, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    rho : fwr_real, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_real, 1D array, dimension(*), intent inout
    dlamda : fwr_real, 1D array, dimension(*), intent inout
    q2 : fwr_real, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_real, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_real, 2D array, dimension(2, *), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray q2_
    cdef fw_shape_t q2_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray indxp_
    cdef fw_shape_t indxp_shape_[1]
    cdef np.ndarray indx_
    cdef fw_shape_t indx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    dlamda_, dlamda = fw_asfortranarray(dlamda, fwr_real_t_enum, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    q2_, q2 = fw_asfortranarray(q2, fwr_real_t_enum, 2, False)
    fw_copyshape(q2_shape_, np.PyArray_DIMS(q2_), 2)
    if ldq2 != q2_shape_[0]:
        raise ValueError("(ldq2 == q2.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwr_real_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_real_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    indxp_, indxp = fw_asfortranarray(indxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxp_shape_, np.PyArray_DIMS(indxp_), 1)
    indx_, indx = fw_asfortranarray(indx, fwi_integer_t_enum, 1, False)
    fw_copyshape(indx_shape_, np.PyArray_DIMS(indx_), 1)
    slaed8_c(&icompq, &k, &n, &qsiz, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), &rho, &cutpnt, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), dlamda_shape_, <fwr_real_t*>np.PyArray_DATA(dlamda_), q2_shape_, <fwr_real_t*>np.PyArray_DATA(q2_), &ldq2, w_shape_, <fwr_real_t*>np.PyArray_DATA(w_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_real_t*>np.PyArray_DATA(givnum_), indxp_shape_, <fwi_integer_t*>np.PyArray_DATA(indxp_), indx_shape_, <fwi_integer_t*>np.PyArray_DATA(indx_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaed8' wrapper.")
    return (icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['slaed9_c', 'dlaed9_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaed9', 'dlaed9'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t k, fwi_integer_t kstart, fwi_integer_t kstop, fwi_integer_t n, object d, object q, fwi_integer_t ldq, {{ktp}} rho, object dlamda, object w, object s, fwi_integer_t lds, fwi_integer_t info):
    """{{name}}(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info[, k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info]) -> (k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info)

    Parameters
    ----------
    k : fwi_integer, intent inout
    kstart : fwi_integer, intent inout
    kstop : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : {{ktp}}_, intent inout
    dlamda : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    k : fwi_integer, intent inout
    kstart : fwi_integer, intent inout
    kstop : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : {{ktp}}_, intent inout
    dlamda : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    dlamda_, dlamda = fw_asfortranarray(dlamda, {{npy_enum}}, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum}}, 2, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 2)
    if lds != s_shape_[0]:
        raise ValueError("(lds == s.shape[0]) not satisifed")
    {{fc_name}}(&k, &kstart, &kstop, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &rho, dlamda_shape_, <{{ktp}}*>np.PyArray_DATA(dlamda_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), s_shape_, <{{ktp}}*>np.PyArray_DATA(s_), &lds, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaeda_c', 'dlaeda_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaeda', 'dlaeda'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t tlvls, fwi_integer_t curlvl, fwi_integer_t curpbm, object prmptr, object perm, object givptr, object givcol, object givnum, object q, object qptr, object z, object ztemp, fwi_integer_t info):
    """{{name}}(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info[, n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info]) -> (n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : {{ktp}}_, 2D array, dimension(2, *), intent inout
    q : {{ktp}}_, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    ztemp : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : {{ktp}}_, 2D array, dimension(2, *), intent inout
    q : {{ktp}}_, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    ztemp : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray prmptr_
    cdef fw_shape_t prmptr_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[1]
    cdef np.ndarray qptr_
    cdef fw_shape_t qptr_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray ztemp_
    cdef fw_shape_t ztemp_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    prmptr_, prmptr = fw_asfortranarray(prmptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(prmptr_shape_, np.PyArray_DIMS(prmptr_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, {{npy_enum}}, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 1, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 1)
    qptr_, qptr = fw_asfortranarray(qptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(qptr_shape_, np.PyArray_DIMS(qptr_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    ztemp_, ztemp = fw_asfortranarray(ztemp, {{npy_enum}}, 1, False)
    fw_copyshape(ztemp_shape_, np.PyArray_DIMS(ztemp_), 1)
    {{fc_name}}(&n, &tlvls, &curlvl, &curpbm, prmptr_shape_, <fwi_integer_t*>np.PyArray_DATA(prmptr_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <{{ktp}}*>np.PyArray_DATA(givnum_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), qptr_shape_, <fwi_integer_t*>np.PyArray_DATA(qptr_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), ztemp_shape_, <{{ktp}}*>np.PyArray_DATA(ztemp_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info,)
{{endfor}}


cpdef api object slaein(bint rightv, bint noinit, fwi_integer_t n, object h, fwi_integer_t ldh, fwr_real_t wr, fwr_real_t wi, object vr, object vi, object b, fwi_integer_t ldb, object work, fwr_real_t eps3, fwr_real_t smlnum, fwr_real_t bignum, fwi_integer_t info):
    """slaein(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info[, rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info]) -> (rightv_, noinit_, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info)

    Parameters
    ----------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, intent inout
    wi : fwr_real, intent inout
    vr : fwr_real, 1D array, dimension(*), intent inout
    vi : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    eps3 : fwr_real, intent inout
    smlnum : fwr_real, intent inout
    bignum : fwr_real, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, intent inout
    wi : fwr_real, intent inout
    vr : fwr_real, 1D array, dimension(*), intent inout
    vi : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    eps3 : fwr_real, intent inout
    smlnum : fwr_real, intent inout
    bignum : fwr_real, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t rightv_
    cdef fwl_logical_t noinit_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[1]
    cdef np.ndarray vi_
    cdef fw_shape_t vi_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    rightv_ = 1 if rightv else 0
    noinit_ = 1 if noinit else 0
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 1, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 1)
    vi_, vi = fw_asfortranarray(vi, fwr_real_t_enum, 1, False)
    fw_copyshape(vi_shape_, np.PyArray_DIMS(vi_), 1)
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    slaein_c(&rightv_, &noinit_, &n, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, &wr, &wi, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), vi_shape_, <fwr_real_t*>np.PyArray_DATA(vi_), b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &eps3, &smlnum, &bignum, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaein' wrapper.")
    return (rightv_, noinit_, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info,)


{{for fc_name, ktp, ktp2, name
      in zip(['slaev2_c', 'dlaev2_c', 'claev2_c', 'zlaev2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaev2', 'dlaev2', 'claev2', 'zlaev2'])}}
cpdef api object {{name}}({{ktp}} a, {{ktp}} b, {{ktp}} c, {{ktp2}} rt1, {{ktp2}} rt2, {{ktp2}} cs1, {{ktp}} sn1):
    """{{name}}(a, b, c, rt1, rt2, cs1, sn1[, a, b, c, rt1, rt2, cs1, sn1]) -> (a, b, c, rt1, rt2, cs1, sn1)

    Parameters
    ----------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    rt1 : {{ktp2}}_, intent inout
    rt2 : {{ktp2}}_, intent inout
    cs1 : {{ktp2}}_, intent inout
    sn1 : {{ktp}}_, intent inout

    Returns
    -------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    rt1 : {{ktp2}}_, intent inout
    rt2 : {{ktp2}}_, intent inout
    cs1 : {{ktp2}}_, intent inout
    sn1 : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&a, &b, &c, &rt1, &rt2, &cs1, &sn1, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (a, b, c, rt1, rt2, cs1, sn1,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaexc_c', 'dlaexc_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaexc', 'dlaexc'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwl_logical_t wantq, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, fwi_integer_t j1, fwi_integer_t n1, fwi_integer_t n2, object work, fwi_integer_t info):
    """{{name}}(wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info[, wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info]) -> (wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    n : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    n : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&wantq, &n, t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &j1, &n1, &n2, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info,)
{{endfor}}


cpdef api object slag2(object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwr_real_t safmin, fwr_real_t scale1, fwr_real_t scale2, fwr_real_t wr1, fwr_real_t wr2, fwr_real_t wi):
    """slag2(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi[, a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi]) -> (a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi)

    Parameters
    ----------
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    safmin : fwr_real, intent inout
    scale1 : fwr_real, intent inout
    scale2 : fwr_real, intent inout
    wr1 : fwr_real, intent inout
    wr2 : fwr_real, intent inout
    wi : fwr_real, intent inout

    Returns
    -------
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    safmin : fwr_real, intent inout
    scale1 : fwr_real, intent inout
    scale2 : fwr_real, intent inout
    wr1 : fwr_real, intent inout
    wr2 : fwr_real, intent inout
    wi : fwr_real, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    slag2_c(a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &safmin, &scale1, &scale2, &wr1, &wr2, &wi, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slag2' wrapper.")
    return (a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi,)


cpdef api object slag2d(fwi_integer_t m, fwi_integer_t n, object sa, fwi_integer_t ldsa, object a, fwi_integer_t lda, fwi_integer_t info):
    """slag2d(m, n, sa, ldsa, a, lda, info[, m, n, sa, ldsa, a, lda, info]) -> (m, n, sa, ldsa, a, lda, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    sa : fwr_real, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    sa : fwr_real, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    a : fwr_dbl, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray sa_
    cdef fw_shape_t sa_shape_[2]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    sa_, sa = fw_asfortranarray(sa, fwr_real_t_enum, 2, False)
    fw_copyshape(sa_shape_, np.PyArray_DIMS(sa_), 2)
    if ldsa != sa_shape_[0]:
        raise ValueError("(ldsa == sa.shape[0]) not satisifed")
    a_, a = fw_asfortranarray(a, fwr_dbl_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    slag2d_c(&m, &n, sa_shape_, <fwr_real_t*>np.PyArray_DATA(sa_), &ldsa, a_shape_, <fwr_dbl_t*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slag2d' wrapper.")
    return (m, n, sa, ldsa, a, lda, info,)


{{for fc_name, ktp, ktp2, name
      in zip(['slags2_c', 'dlags2_c', 'clags2_c', 'zlags2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slags2', 'dlags2', 'clags2', 'zlags2'])}}
cpdef api object {{name}}(fwl_logical_t upper, {{ktp}} a1, {{ktp2}} a2, {{ktp}} a3, {{ktp}} b1, {{ktp2}} b2, {{ktp}} b3, {{ktp}} csu, {{ktp2}} snu, {{ktp}} csv, {{ktp2}} snv, {{ktp}} csq, {{ktp2}} snq):
    """{{name}}(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq[, upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq]) -> (upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq)

    Parameters
    ----------
    upper : fwl_logical, intent inout
    a1 : {{ktp}}_, intent inout
    a2 : {{ktp2}}_, intent inout
    a3 : {{ktp}}_, intent inout
    b1 : {{ktp}}_, intent inout
    b2 : {{ktp2}}_, intent inout
    b3 : {{ktp}}_, intent inout
    csu : {{ktp}}_, intent inout
    snu : {{ktp2}}_, intent inout
    csv : {{ktp}}_, intent inout
    snv : {{ktp2}}_, intent inout
    csq : {{ktp}}_, intent inout
    snq : {{ktp2}}_, intent inout

    Returns
    -------
    upper : fwl_logical, intent inout
    a1 : {{ktp}}_, intent inout
    a2 : {{ktp2}}_, intent inout
    a3 : {{ktp}}_, intent inout
    b1 : {{ktp}}_, intent inout
    b2 : {{ktp2}}_, intent inout
    b3 : {{ktp}}_, intent inout
    csu : {{ktp}}_, intent inout
    snu : {{ktp2}}_, intent inout
    csv : {{ktp}}_, intent inout
    snv : {{ktp2}}_, intent inout
    csq : {{ktp}}_, intent inout
    snq : {{ktp2}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&upper, &a1, &a2, &a3, &b1, &b2, &b3, &csu, &snu, &csv, &snv, &csq, &snq, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slagtf_c', 'dlagtf_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slagtf', 'dlagtf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, {{ktp}} lambda__, object b, object c, {{ktp}} tol, object d, object in__, fwi_integer_t info):
    """{{name}}(n, a, lambda__, b, c, tol, d, in__, info[, n, a, lambda__, b, c, tol, d, in__, info]) -> (n, a, lambda__, b, c, tol, d, in__, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(*), intent inout
    lambda__ : {{ktp}}_, intent inout
    b : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    tol : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    in__ : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(*), intent inout
    lambda__ : {{ktp}}_, intent inout
    b : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    tol : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    in__ : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray in___
    cdef fw_shape_t in___shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 1, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    in___, in__ = fw_asfortranarray(in__, fwi_integer_t_enum, 1, False)
    fw_copyshape(in___shape_, np.PyArray_DIMS(in___), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lambda__, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &tol, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), in___shape_, <fwi_integer_t*>np.PyArray_DATA(in___), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lambda__, b, c, tol, d, in__, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slagtm_c', 'dlagtm_c', 'clagtm_c', 'zlagtm_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slagtm', 'dlagtm', 'clagtm', 'zlagtm'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t n, fwi_integer_t nrhs, {{ktp}} alpha, object dl, object d, object du, object x, fwi_integer_t ldx, {{ktp}} beta, object b, fwi_integer_t ldb):
    """{{name}}(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb[, trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb]) -> (trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb)

    Parameters
    ----------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    dl : {{ktp2}}_, 1D array, dimension(*), intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    du : {{ktp2}}_, 1D array, dimension(*), intent inout
    x : {{ktp2}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    dl : {{ktp2}}_, 1D array, dimension(*), intent inout
    d : {{ktp2}}_, 1D array, dimension(*), intent inout
    du : {{ktp2}}_, 1D array, dimension(*), intent inout
    x : {{ktp2}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &n, &nrhs, &alpha, dl_shape_, <{{ktp2}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp2}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp2}}*>np.PyArray_DATA(du_), x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &ldx, &beta, b_shape_, <{{ktp2}}*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slagts_c', 'dlagts_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slagts', 'dlagts'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t job, fwi_integer_t n, object a, object b, object c, object d, object in__, object y, {{ktp}} tol, fwi_integer_t info):
    """{{name}}(job, n, a, b, c, d, in__, y, tol, info[, job, n, a, b, c, d, in__, y, tol, info]) -> (job, n, a, b, c, d, in__, y, tol, info)

    Parameters
    ----------
    job : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    in__ : fwi_integer, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    tol : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    in__ : fwi_integer, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    tol : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray in___
    cdef fw_shape_t in___shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 1, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    in___, in__ = fw_asfortranarray(in__, fwi_integer_t_enum, 1, False)
    fw_copyshape(in___shape_, np.PyArray_DIMS(in___), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    {{fc_name}}(&job, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), in___shape_, <fwi_integer_t*>np.PyArray_DATA(in___), y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &tol, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (job, n, a, b, c, d, in__, y, tol, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slagv2_c', 'dlagv2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slagv2', 'dlagv2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, {{ktp}} csl, {{ktp}} snl, {{ktp}} csr, {{ktp}} snr):
    """{{name}}(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr[, a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr]) -> (a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr)

    Parameters
    ----------
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : {{ktp}}_, 1D array, dimension(2), intent inout
    alphai : {{ktp}}_, 1D array, dimension(2), intent inout
    beta : {{ktp}}_, 1D array, dimension(2), intent inout
    csl : {{ktp}}_, intent inout
    snl : {{ktp}}_, intent inout
    csr : {{ktp}}_, intent inout
    snr : {{ktp}}_, intent inout

    Returns
    -------
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : {{ktp}}_, 1D array, dimension(2), intent inout
    alphai : {{ktp}}_, 1D array, dimension(2), intent inout
    beta : {{ktp}}_, 1D array, dimension(2), intent inout
    csl : {{ktp}}_, intent inout
    snl : {{ktp}}_, intent inout
    csr : {{ktp}}_, intent inout
    snr : {{ktp}}_, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, {{npy_enum}}, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    if not (0 <= 2 <= alphar_shape_[0]):
        raise ValueError("(0 <= 2 <= alphar.shape[0]) not satisifed")
    alphai_, alphai = fw_asfortranarray(alphai, {{npy_enum}}, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    if not (0 <= 2 <= alphai_shape_[0]):
        raise ValueError("(0 <= 2 <= alphai.shape[0]) not satisifed")
    beta_, beta = fw_asfortranarray(beta, {{npy_enum}}, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    if not (0 <= 2 <= beta_shape_[0]):
        raise ValueError("(0 <= 2 <= beta.shape[0]) not satisifed")
    {{fc_name}}(a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <{{ktp}}*>np.PyArray_DATA(alphar_), alphai_shape_, <{{ktp}}*>np.PyArray_DATA(alphai_), beta_shape_, <{{ktp}}*>np.PyArray_DATA(beta_), &csl, &snl, &csr, &snr, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr,)
{{endfor}}


cpdef api object slahqr(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t info):
    """slahqr(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info[, wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    slahqr_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), &iloz, &ihiz, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slahqr' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['slahr2_c', 'dlahr2_c', 'clahr2_c', 'zlahr2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slahr2', 'dlahr2', 'clahr2', 'zlahr2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t k, fwi_integer_t nb, object a, fwi_integer_t lda, object tau, object t, fwi_integer_t ldt, object y, fwi_integer_t ldy):
    """{{name}}(n, k, nb, a, lda, tau, t, ldt, y, ldy[, n, k, nb, a, lda, tau, t, ldt, y, ldy]) -> (n, k, nb, a, lda, tau, t, ldt, y, ldy)

    Parameters
    ----------
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(nb), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, nb), intent inout
    ldt : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, nb), intent inout
    ldy : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(nb), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, nb), intent inout
    ldt : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, nb), intent inout
    ldy : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    if not (0 <= nb <= tau_shape_[0]):
        raise ValueError("(0 <= nb <= tau.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    if not (0 <= nb <= t_shape_[1]):
        raise ValueError("(0 <= nb <= t.shape[1]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    if not (0 <= nb <= y_shape_[1]):
        raise ValueError("(0 <= nb <= y.shape[1]) not satisifed")
    {{fc_name}}(&n, &k, &nb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, k, nb, a, lda, tau, t, ldt, y, ldy,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slahrd_c', 'dlahrd_c', 'clahrd_c', 'zlahrd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slahrd', 'dlahrd', 'clahrd', 'zlahrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t k, fwi_integer_t nb, object a, fwi_integer_t lda, object tau, object t, fwi_integer_t ldt, object y, fwi_integer_t ldy):
    """{{name}}(n, k, nb, a, lda, tau, t, ldt, y, ldy[, n, k, nb, a, lda, tau, t, ldt, y, ldy]) -> (n, k, nb, a, lda, tau, t, ldt, y, ldy)

    Parameters
    ----------
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(nb), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, nb), intent inout
    ldt : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, nb), intent inout
    ldy : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(nb), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, nb), intent inout
    ldt : fwi_integer, intent inout
    y : {{ktp}}_, 2D array, dimension(ldy, nb), intent inout
    ldy : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    if not (0 <= nb <= tau_shape_[0]):
        raise ValueError("(0 <= nb <= tau.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    if not (0 <= nb <= t_shape_[1]):
        raise ValueError("(0 <= nb <= t.shape[1]) not satisifed")
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 2, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 2)
    if ldy != y_shape_[0]:
        raise ValueError("(ldy == y.shape[0]) not satisifed")
    if not (0 <= nb <= y_shape_[1]):
        raise ValueError("(0 <= nb <= y.shape[1]) not satisifed")
    {{fc_name}}(&n, &k, &nb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &ldy, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, k, nb, a, lda, tau, t, ldt, y, ldy,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slaic1_c', 'dlaic1_c', 'claic1_c', 'zlaic1_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaic1', 'dlaic1', 'claic1', 'zlaic1'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t job, fwi_integer_t j, object x, {{ktp2}} sest, object w, {{ktp}} gamma, {{ktp2}} sestpr, {{ktp}} s, {{ktp}} c):
    """{{name}}(job, j, x, sest, w, gamma, sestpr, s, c[, job, j, x, sest, w, gamma, sestpr, s, c]) -> (job, j, x, sest, w, gamma, sestpr, s, c)

    Parameters
    ----------
    job : fwi_integer, intent inout
    j : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(j), intent inout
    sest : {{ktp2}}_, intent inout
    w : {{ktp}}_, 1D array, dimension(j), intent inout
    gamma : {{ktp}}_, intent inout
    sestpr : {{ktp2}}_, intent inout
    s : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout

    Returns
    -------
    job : fwi_integer, intent inout
    j : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(j), intent inout
    sest : {{ktp2}}_, intent inout
    w : {{ktp}}_, 1D array, dimension(j), intent inout
    gamma : {{ktp}}_, intent inout
    sestpr : {{ktp2}}_, intent inout
    s : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    if not (0 <= j <= x_shape_[0]):
        raise ValueError("(0 <= j <= x.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    if not (0 <= j <= w_shape_[0]):
        raise ValueError("(0 <= j <= w.shape[0]) not satisifed")
    {{fc_name}}(&job, &j, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &sest, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), &gamma, &sestpr, &s, &c, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (job, j, x, sest, w, gamma, sestpr, s, c,)
{{endfor}}


{{for fc_name, ktp, name, name2, name3
      in zip(['slaisnan_c', 'dlaisnan_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaisnan', 'dlaisnan'],
             ['sin1', 'din1'],
             ['sin2', 'din2'])}}
cpdef api object {{name}}({{ktp}} {{name2}}, {{ktp}} {{name3}}):
    """{{name}}({{name2}}, {{name3}}[, {{name2}}, {{name3}}]) -> (fw_ret_arg, {{name2}}, {{name3}})

    Parameters
    ----------
    {{name2}} : {{ktp}}_, intent inout
    {{name3}} : {{ktp}}_, intent inout

    Returns
    -------
    fw_ret_arg : fwl_logical, intent out
    {{name2}} : {{ktp}}_, intent inout
    {{name3}} : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fwl_logical_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&fw_ret_arg, &{{name2}}, &{{name3}}, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, {{name2}}, {{name3}},)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaln2_c', 'dlaln2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaln2', 'dlaln2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwl_logical_t ltrans, fwi_integer_t na, fwi_integer_t nw, {{ktp}} smin, {{ktp}} ca, object a, fwi_integer_t lda, {{ktp}} d1, {{ktp}} d2, object b, fwi_integer_t ldb, {{ktp}} wr, {{ktp}} wi, object x, fwi_integer_t ldx, {{ktp}} scale, {{ktp}} xnorm, fwi_integer_t info):
    """{{name}}(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info[, ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info]) -> (ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info)

    Parameters
    ----------
    ltrans : fwl_logical, intent inout
    na : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    smin : {{ktp}}_, intent inout
    ca : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d1 : {{ktp}}_, intent inout
    d2 : {{ktp}}_, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    wr : {{ktp}}_, intent inout
    wi : {{ktp}}_, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    scale : {{ktp}}_, intent inout
    xnorm : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ltrans : fwl_logical, intent inout
    na : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    smin : {{ktp}}_, intent inout
    ca : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d1 : {{ktp}}_, intent inout
    d2 : {{ktp}}_, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    wr : {{ktp}}_, intent inout
    wi : {{ktp}}_, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    scale : {{ktp}}_, intent inout
    xnorm : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    {{fc_name}}(&ltrans, &na, &nw, &smin, &ca, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &d1, &d2, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &wr, &wi, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &scale, &xnorm, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, name2, npy_enum, npy_enum2
      in zip(['slals0_c', 'dlals0_c', 'clals0_c', 'zlals0_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slals0', 'dlals0', 'clals0', 'zlals0'],
             ['work', 'work', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t icompq, fwi_integer_t nl, fwi_integer_t nr, fwi_integer_t sqre, fwi_integer_t nrhs, object b, fwi_integer_t ldb, object bx, fwi_integer_t ldbx, object perm, fwi_integer_t givptr, object givcol, fwi_integer_t ldgcol, object givnum, fwi_integer_t ldgnum, object poles, object difl, object difr, object z, fwi_integer_t k, {{ktp2}} c, {{ktp2}} s, object {{name2}}, fwi_integer_t info):
    """{{name}}(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, {{name2}}, info[, icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, {{name2}}, info]) -> (icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, {{name2}}, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    bx : {{ktp}}_, 2D array, dimension(ldbx, *), intent inout
    ldbx : fwi_integer, intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    givnum : {{ktp2}}_, 2D array, dimension(ldgnum, *), intent inout
    ldgnum : fwi_integer, intent inout
    poles : {{ktp2}}_, 2D array, dimension(ldgnum, *), intent inout
    difl : {{ktp2}}_, 1D array, dimension(*), intent inout
    difr : {{ktp2}}_, 2D array, dimension(ldgnum, *), intent inout
    z : {{ktp2}}_, 1D array, dimension(*), intent inout
    k : fwi_integer, intent inout
    c : {{ktp2}}_, intent inout
    s : {{ktp2}}_, intent inout
    {{name2}} : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    bx : {{ktp}}_, 2D array, dimension(ldbx, *), intent inout
    ldbx : fwi_integer, intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    givnum : {{ktp2}}_, 2D array, dimension(ldgnum, *), intent inout
    ldgnum : fwi_integer, intent inout
    poles : {{ktp2}}_, 2D array, dimension(ldgnum, *), intent inout
    difl : {{ktp2}}_, 1D array, dimension(*), intent inout
    difr : {{ktp2}}_, 2D array, dimension(ldgnum, *), intent inout
    z : {{ktp2}}_, 1D array, dimension(*), intent inout
    k : fwi_integer, intent inout
    c : {{ktp2}}_, intent inout
    s : {{ktp2}}_, intent inout
    {{name2}} : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray bx_
    cdef fw_shape_t bx_shape_[2]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray poles_
    cdef fw_shape_t poles_shape_[2]
    cdef np.ndarray difl_
    cdef fw_shape_t difl_shape_[1]
    cdef np.ndarray difr_
    cdef fw_shape_t difr_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    bx_, bx = fw_asfortranarray(bx, {{npy_enum}}, 2, False)
    fw_copyshape(bx_shape_, np.PyArray_DIMS(bx_), 2)
    if ldbx != bx_shape_[0]:
        raise ValueError("(ldbx == bx.shape[0]) not satisifed")
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if ldgcol != givcol_shape_[0]:
        raise ValueError("(ldgcol == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, {{npy_enum2}}, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if ldgnum != givnum_shape_[0]:
        raise ValueError("(ldgnum == givnum.shape[0]) not satisifed")
    poles_, poles = fw_asfortranarray(poles, {{npy_enum2}}, 2, False)
    fw_copyshape(poles_shape_, np.PyArray_DIMS(poles_), 2)
    if ldgnum != poles_shape_[0]:
        raise ValueError("(ldgnum == poles.shape[0]) not satisifed")
    difl_, difl = fw_asfortranarray(difl, {{npy_enum2}}, 1, False)
    fw_copyshape(difl_shape_, np.PyArray_DIMS(difl_), 1)
    difr_, difr = fw_asfortranarray(difr, {{npy_enum2}}, 2, False)
    fw_copyshape(difr_shape_, np.PyArray_DIMS(difr_), 2)
    if ldgnum != difr_shape_[0]:
        raise ValueError("(ldgnum == difr.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    {{fc_name}}(&icompq, &nl, &nr, &sqre, &nrhs, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, bx_shape_, <{{ktp}}*>np.PyArray_DATA(bx_), &ldbx, perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), &ldgcol, givnum_shape_, <{{ktp2}}*>np.PyArray_DATA(givnum_), &ldgnum, poles_shape_, <{{ktp2}}*>np.PyArray_DATA(poles_), difl_shape_, <{{ktp2}}*>np.PyArray_DATA(difl_), difr_shape_, <{{ktp2}}*>np.PyArray_DATA(difr_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &k, &c, &s, {{name2}}_shape_, <{{ktp2}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, name2, npy_enum, npy_enum2
      in zip(['slalsa_c', 'dlalsa_c', 'clalsa_c', 'zlalsa_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slalsa', 'dlalsa', 'clalsa', 'zlalsa'],
             ['work', 'work', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t icompq, fwi_integer_t smlsiz, fwi_integer_t n, fwi_integer_t nrhs, object b, fwi_integer_t ldb, object bx, fwi_integer_t ldbx, object u, fwi_integer_t ldu, object vt, object k, object difl, object difr, object z, object poles, object givptr, object givcol, fwi_integer_t ldgcol, object perm, object givnum, object c, object s, object {{name2}}, object iwork, fwi_integer_t info):
    """{{name}}(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, {{name2}}, iwork, info[, icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, {{name2}}, iwork, info]) -> (icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, {{name2}}, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    bx : {{ktp}}_, 2D array, dimension(ldbx, *), intent inout
    ldbx : fwi_integer, intent inout
    u : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout
    difl : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    difr : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    poles : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    perm : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    givnum : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    bx : {{ktp}}_, 2D array, dimension(ldbx, *), intent inout
    ldbx : fwi_integer, intent inout
    u : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout
    difl : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    difr : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    poles : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    perm : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    givnum : {{ktp2}}_, 2D array, dimension(ldu, *), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp2}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray bx_
    cdef fw_shape_t bx_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray k_
    cdef fw_shape_t k_shape_[1]
    cdef np.ndarray difl_
    cdef fw_shape_t difl_shape_[2]
    cdef np.ndarray difr_
    cdef fw_shape_t difr_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray poles_
    cdef fw_shape_t poles_shape_[2]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    bx_, bx = fw_asfortranarray(bx, {{npy_enum}}, 2, False)
    fw_copyshape(bx_shape_, np.PyArray_DIMS(bx_), 2)
    if ldbx != bx_shape_[0]:
        raise ValueError("(ldbx == bx.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, {{npy_enum2}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum2}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldu != vt_shape_[0]:
        raise ValueError("(ldu == vt.shape[0]) not satisifed")
    k_, k = fw_asfortranarray(k, fwi_integer_t_enum, 1, False)
    fw_copyshape(k_shape_, np.PyArray_DIMS(k_), 1)
    difl_, difl = fw_asfortranarray(difl, {{npy_enum2}}, 2, False)
    fw_copyshape(difl_shape_, np.PyArray_DIMS(difl_), 2)
    if ldu != difl_shape_[0]:
        raise ValueError("(ldu == difl.shape[0]) not satisifed")
    difr_, difr = fw_asfortranarray(difr, {{npy_enum2}}, 2, False)
    fw_copyshape(difr_shape_, np.PyArray_DIMS(difr_), 2)
    if ldu != difr_shape_[0]:
        raise ValueError("(ldu == difr.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldu != z_shape_[0]:
        raise ValueError("(ldu == z.shape[0]) not satisifed")
    poles_, poles = fw_asfortranarray(poles, {{npy_enum2}}, 2, False)
    fw_copyshape(poles_shape_, np.PyArray_DIMS(poles_), 2)
    if ldu != poles_shape_[0]:
        raise ValueError("(ldu == poles.shape[0]) not satisifed")
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if ldgcol != givcol_shape_[0]:
        raise ValueError("(ldgcol == givcol.shape[0]) not satisifed")
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 2, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 2)
    if ldgcol != perm_shape_[0]:
        raise ValueError("(ldgcol == perm.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, {{npy_enum2}}, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if ldu != givnum_shape_[0]:
        raise ValueError("(ldu == givnum.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&icompq, &smlsiz, &n, &nrhs, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, bx_shape_, <{{ktp}}*>np.PyArray_DATA(bx_), &ldbx, u_shape_, <{{ktp2}}*>np.PyArray_DATA(u_), &ldu, vt_shape_, <{{ktp2}}*>np.PyArray_DATA(vt_), k_shape_, <fwi_integer_t*>np.PyArray_DATA(k_), difl_shape_, <{{ktp2}}*>np.PyArray_DATA(difl_), difr_shape_, <{{ktp2}}*>np.PyArray_DATA(difr_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), poles_shape_, <{{ktp2}}*>np.PyArray_DATA(poles_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), &ldgcol, perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givnum_shape_, <{{ktp2}}*>np.PyArray_DATA(givnum_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), {{name2}}_shape_, <{{ktp2}}*>np.PyArray_DATA({{name2}}_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, {{name2}}, iwork, info,)
{{endfor}}


cpdef api object slalsd(object uplo, fwi_integer_t smlsiz, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwr_real_t rcond, fwi_integer_t rank, object work, object iwork, fwi_integer_t info):
    """slalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info[, uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info]) -> (uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    rank : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    slalsd_c(fw_uplo, &smlsiz, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &rcond, &rank, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slalsd' wrapper.")
    return (fw_uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info,)


{{for fc_name, ktp, name, name2, name3, npy_enum
      in zip(['slamrg_c', 'dlamrg_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slamrg', 'dlamrg'],
             ['strd1', 'dtrd1'],
             ['strd2', 'dtrd2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n1, fwi_integer_t n2, object a, fwi_integer_t {{name2}}, fwi_integer_t {{name3}}, object index):
    """{{name}}(n1, n2, a, {{name2}}, {{name3}}, index[, n1, n2, a, {{name2}}, {{name3}}, index]) -> (n1, n2, a, {{name2}}, {{name3}}, index)

    Parameters
    ----------
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : fwi_integer, intent inout
    {{name3}} : fwi_integer, intent inout
    index : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : fwi_integer, intent inout
    {{name3}} : fwi_integer, intent inout
    index : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray index_
    cdef fw_shape_t index_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    index_, index = fw_asfortranarray(index, fwi_integer_t_enum, 1, False)
    fw_copyshape(index_shape_, np.PyArray_DIMS(index_), 1)
    {{fc_name}}(&n1, &n2, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &{{name2}}, &{{name3}}, index_shape_, <fwi_integer_t*>np.PyArray_DATA(index_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n1, n2, a, {{name2}}, {{name3}}, index,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaneg_c', 'dlaneg_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaneg', 'dlaneg'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object lld, {{ktp}} sigma, {{ktp}} pivmin, fwi_integer_t r):
    """{{name}}(n, d, lld, sigma, pivmin, r[, n, d, lld, sigma, pivmin, r]) -> (fw_ret_arg, n, d, lld, sigma, pivmin, r)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    lld : {{ktp}}_, 1D array, dimension(*), intent inout
    sigma : {{ktp}}_, intent inout
    pivmin : {{ktp}}_, intent inout
    r : fwi_integer, intent inout

    Returns
    -------
    fw_ret_arg : fwi_integer, intent out
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    lld : {{ktp}}_, 1D array, dimension(*), intent inout
    sigma : {{ktp}}_, intent inout
    pivmin : {{ktp}}_, intent inout
    r : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray lld_
    cdef fw_shape_t lld_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fwi_integer_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    lld_, lld = fw_asfortranarray(lld, {{npy_enum}}, 1, False)
    fw_copyshape(lld_shape_, np.PyArray_DIMS(lld_), 1)
    {{fc_name}}(&fw_ret_arg, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), lld_shape_, <{{ktp}}*>np.PyArray_DATA(lld_), &sigma, &pivmin, &r, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, n, d, lld, sigma, pivmin, r,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slangb_c', 'dlangb_c', 'clangb_c', 'zlangb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slangb', 'dlangb', 'clangb', 'zlangb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object work):
    """{{name}}(norm, n, kl, ku, ab, ldab, work[, norm, n, kl, ku, ab, ldab, work]) -> (fw_ret_arg, norm, n, kl, ku, ab, ldab, work)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, n, kl, ku, ab, ldab, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slange_c', 'dlange_c', 'clange_c', 'zlange_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slange', 'dlange', 'clange', 'zlange'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object work):
    """{{name}}(norm, m, n, a, lda, work[, norm, m, n, a, lda, work]) -> (fw_ret_arg, norm, m, n, a, lda, work)

    Parameters
    ----------
    norm : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, m, n, a, lda, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slangt_c', 'dlangt_c', 'clangt_c', 'zlangt_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slangt', 'dlangt', 'clangt', 'zlangt'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, object dl, object d, object du):
    """{{name}}(norm, n, dl, d, du[, norm, n, dl, d, du]) -> (fw_ret_arg, norm, n, dl, d, du)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    du : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, {{npy_enum}}, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, {{npy_enum}}, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, &n, dl_shape_, <{{ktp}}*>np.PyArray_DATA(dl_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), du_shape_, <{{ktp}}*>np.PyArray_DATA(du_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, n, dl, d, du,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slanhs_c', 'dlanhs_c', 'clanhs_c', 'zlanhs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slanhs', 'dlanhs', 'clanhs', 'zlanhs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, object a, fwi_integer_t lda, object work):
    """{{name}}(norm, n, a, lda, work[, norm, n, a, lda, work]) -> (fw_ret_arg, norm, n, a, lda, work)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, n, a, lda, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slansb_c', 'dlansb_c', 'clansb_c', 'zlansb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slansb', 'dlansb', 'clansb', 'zlansb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, fwi_integer_t n, fwi_integer_t k, object ab, fwi_integer_t ldab, object work):
    """{{name}}(norm, uplo, n, k, ab, ldab, work[, norm, uplo, n, k, ab, ldab, work]) -> (fw_ret_arg, norm, uplo, n, k, ab, ldab, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, &n, &k, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, n, k, ab, ldab, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slansf_c', 'dlansf_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slansf', 'dlansf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object transr, object uplo, fwi_integer_t n, object a, object work):
    """{{name}}(norm, transr, uplo, n, a, work[, norm, transr, uplo, n, a, work]) -> (fw_ret_arg, norm, transr, uplo, n, a, work)

    Parameters
    ----------
    norm : object_, intent inout
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    work : {{ktp}}_, 1D array, dimension(0:*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    norm : object_, intent inout
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    work : {{ktp}}_, 1D array, dimension(0:*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_transr, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_transr, fw_uplo, n, a, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slansp_c', 'dlansp_c', 'clansp_c', 'zlansp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slansp', 'dlansp', 'clansp', 'zlansp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, fwi_integer_t n, object ap, object work):
    """{{name}}(norm, uplo, n, ap, work[, norm, uplo, n, ap, work]) -> (fw_ret_arg, norm, uplo, n, ap, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, n, ap, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slanst_c', 'dlanst_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slanst', 'dlanst'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, fwi_integer_t n, object d, object e):
    """{{name}}(norm, n, d, e[, norm, n, d, e]) -> (fw_ret_arg, norm, n, d, e)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    norm : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, n, d, e,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slansy_c', 'dlansy_c', 'clansy_c', 'zlansy_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slansy', 'dlansy', 'clansy', 'zlansy'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object work):
    """{{name}}(norm, uplo, n, a, lda, work[, norm, uplo, n, a, lda, work]) -> (fw_ret_arg, norm, uplo, n, a, lda, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, n, a, lda, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slantb_c', 'dlantb_c', 'clantb_c', 'zlantb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slantb', 'dlantb', 'clantb', 'zlantb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, object diag, fwi_integer_t n, fwi_integer_t k, object ab, fwi_integer_t ldab, object work):
    """{{name}}(norm, uplo, diag, n, k, ab, ldab, work[, norm, uplo, diag, n, k, ab, ldab, work]) -> (fw_ret_arg, norm, uplo, diag, n, k, ab, ldab, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, fw_diag, &n, &k, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, fw_diag, n, k, ab, ldab, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slantp_c', 'dlantp_c', 'clantp_c', 'zlantp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slantp', 'dlantp', 'clantp', 'zlantp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, object diag, fwi_integer_t n, object ap, object work):
    """{{name}}(norm, uplo, diag, n, ap, work[, norm, uplo, diag, n, ap, work]) -> (fw_ret_arg, norm, uplo, diag, n, ap, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, fw_diag, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, fw_diag, n, ap, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slantr_c', 'dlantr_c', 'clantr_c', 'zlantr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slantr', 'dlantr', 'clantr', 'zlantr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, object diag, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object work):
    """{{name}}(norm, uplo, diag, m, n, a, lda, work[, norm, uplo, diag, m, n, a, lda, work]) -> (fw_ret_arg, norm, uplo, diag, m, n, a, lda, work)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    fw_ret_arg : {{ktp2}}_, intent out
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    work : {{ktp2}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp2}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(&fw_ret_arg, fw_norm, fw_uplo, fw_diag, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, fw_norm, fw_uplo, fw_diag, m, n, a, lda, work,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slanv2_c', 'dlanv2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slanv2', 'dlanv2'])}}
cpdef api object {{name}}({{ktp}} a, {{ktp}} b, {{ktp}} c, {{ktp}} d, {{ktp}} rt1r, {{ktp}} rt1i, {{ktp}} rt2r, {{ktp}} rt2i, {{ktp}} cs, {{ktp}} sn):
    """{{name}}(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn[, a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn]) -> (a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn)

    Parameters
    ----------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    d : {{ktp}}_, intent inout
    rt1r : {{ktp}}_, intent inout
    rt1i : {{ktp}}_, intent inout
    rt2r : {{ktp}}_, intent inout
    rt2i : {{ktp}}_, intent inout
    cs : {{ktp}}_, intent inout
    sn : {{ktp}}_, intent inout

    Returns
    -------
    a : {{ktp}}_, intent inout
    b : {{ktp}}_, intent inout
    c : {{ktp}}_, intent inout
    d : {{ktp}}_, intent inout
    rt1r : {{ktp}}_, intent inout
    rt1i : {{ktp}}_, intent inout
    rt2r : {{ktp}}_, intent inout
    rt2i : {{ktp}}_, intent inout
    cs : {{ktp}}_, intent inout
    sn : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&a, &b, &c, &d, &rt1r, &rt1i, &rt2r, &rt2i, &cs, &sn, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slapll_c', 'dlapll_c', 'clapll_c', 'zlapll_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slapll', 'dlapll', 'clapll', 'zlapll'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, fwi_integer_t incx, object y, fwi_integer_t incy, {{ktp2}} ssmin):
    """{{name}}(n, x, incx, y, incy, ssmin[, n, x, incx, y, incy, ssmin]) -> (n, x, incx, y, incy, ssmin)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    ssmin : {{ktp2}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    ssmin : {{ktp2}}_, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, &ssmin, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, incx, y, incy, ssmin,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slapmr_c', 'dlapmr_c', 'clapmr_c', 'zlapmr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slapmr', 'dlapmr', 'clapmr', 'zlapmr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwl_logical_t forwrd, fwi_integer_t m, fwi_integer_t n, object x, fwi_integer_t ldx, object k):
    """{{name}}(forwrd, m, n, x, ldx, k[, forwrd, m, n, x, ldx, k]) -> (forwrd, m, n, x, ldx, k)

    Parameters
    ----------
    forwrd : fwl_logical, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    forwrd : fwl_logical, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray k_
    cdef fw_shape_t k_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    k_, k = fw_asfortranarray(k, fwi_integer_t_enum, 1, False)
    fw_copyshape(k_shape_, np.PyArray_DIMS(k_), 1)
    {{fc_name}}(&forwrd, &m, &n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, k_shape_, <fwi_integer_t*>np.PyArray_DATA(k_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (forwrd, m, n, x, ldx, k,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slapmt_c', 'dlapmt_c', 'clapmt_c', 'zlapmt_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slapmt', 'dlapmt', 'clapmt', 'zlapmt'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwl_logical_t forwrd, fwi_integer_t m, fwi_integer_t n, object x, fwi_integer_t ldx, object k):
    """{{name}}(forwrd, m, n, x, ldx, k[, forwrd, m, n, x, ldx, k]) -> (forwrd, m, n, x, ldx, k)

    Parameters
    ----------
    forwrd : fwl_logical, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    forwrd : fwl_logical, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray k_
    cdef fw_shape_t k_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    k_, k = fw_asfortranarray(k, fwi_integer_t_enum, 1, False)
    fw_copyshape(k_shape_, np.PyArray_DIMS(k_), 1)
    {{fc_name}}(&forwrd, &m, &n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, k_shape_, <fwi_integer_t*>np.PyArray_DATA(k_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (forwrd, m, n, x, ldx, k,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slapy2_c', 'dlapy2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slapy2', 'dlapy2'])}}
cpdef api object {{name}}({{ktp}} x, {{ktp}} y):
    """{{name}}(x, y[, x, y]) -> (fw_ret_arg, x, y)

    Parameters
    ----------
    x : {{ktp}}_, intent inout
    y : {{ktp}}_, intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    x : {{ktp}}_, intent inout
    y : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&fw_ret_arg, &x, &y, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, x, y,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slapy3_c', 'dlapy3_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slapy3', 'dlapy3'])}}
cpdef api object {{name}}({{ktp}} x, {{ktp}} y, {{ktp}} z):
    """{{name}}(x, y, z[, x, y, z]) -> (fw_ret_arg, x, y, z)

    Parameters
    ----------
    x : {{ktp}}_, intent inout
    y : {{ktp}}_, intent inout
    z : {{ktp}}_, intent inout

    Returns
    -------
    fw_ret_arg : {{ktp}}_, intent out
    x : {{ktp}}_, intent inout
    y : {{ktp}}_, intent inout
    z : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef {{ktp}} fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&fw_ret_arg, &x, &y, &z, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_ret_arg, x, y, z,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqgb_c', 'dlaqgb_c', 'claqgb_c', 'zlaqgb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqgb', 'dlaqgb', 'claqgb', 'zlaqgb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object r, object c, {{ktp2}} rowcnd, {{ktp2}} colcnd, {{ktp2}} amax, object equed):
    """{{name}}(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed[, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed]) -> (m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(&m, &n, &kl, &ku, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &rowcnd, &colcnd, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqge_c', 'dlaqge_c', 'claqge_c', 'zlaqge_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqge', 'dlaqge', 'claqge', 'zlaqge'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object r, object c, {{ktp2}} rowcnd, {{ktp2}} colcnd, {{ktp2}} amax, object equed):
    """{{name}}(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed[, m, n, a, lda, r, c, rowcnd, colcnd, amax, equed]) -> (m, n, a, lda, r, c, rowcnd, colcnd, amax, equed)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    r : {{ktp2}}_, 1D array, dimension(*), intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    rowcnd : {{ktp2}}_, intent inout
    colcnd : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray r_
    cdef fw_shape_t r_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    r_, r = fw_asfortranarray(r, {{npy_enum2}}, 1, False)
    fw_copyshape(r_shape_, np.PyArray_DIMS(r_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, r_shape_, <{{ktp2}}*>np.PyArray_DATA(r_), c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &rowcnd, &colcnd, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, r, c, rowcnd, colcnd, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqp2_c', 'dlaqp2_c', 'claqp2_c', 'zlaqp2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqp2', 'dlaqp2', 'claqp2', 'zlaqp2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t offset, object a, fwi_integer_t lda, object jpvt, object tau, object vn1, object vn2, object work):
    """{{name}}(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work[, m, n, offset, a, lda, jpvt, tau, vn1, vn2, work]) -> (m, n, offset, a, lda, jpvt, tau, vn1, vn2, work)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    offset : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    vn1 : {{ktp2}}_, 1D array, dimension(*), intent inout
    vn2 : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    offset : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    vn1 : {{ktp2}}_, 1D array, dimension(*), intent inout
    vn2 : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray vn1_
    cdef fw_shape_t vn1_shape_[1]
    cdef np.ndarray vn2_
    cdef fw_shape_t vn2_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    vn1_, vn1 = fw_asfortranarray(vn1, {{npy_enum2}}, 1, False)
    fw_copyshape(vn1_shape_, np.PyArray_DIMS(vn1_), 1)
    vn2_, vn2 = fw_asfortranarray(vn2, {{npy_enum2}}, 1, False)
    fw_copyshape(vn2_shape_, np.PyArray_DIMS(vn2_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &offset, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), vn1_shape_, <{{ktp2}}*>np.PyArray_DATA(vn1_), vn2_shape_, <{{ktp2}}*>np.PyArray_DATA(vn2_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, offset, a, lda, jpvt, tau, vn1, vn2, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqps_c', 'dlaqps_c', 'claqps_c', 'zlaqps_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqps', 'dlaqps', 'claqps', 'zlaqps'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t offset, fwi_integer_t nb, fwi_integer_t kb, object a, fwi_integer_t lda, object jpvt, object tau, object vn1, object vn2, object auxv, object f, fwi_integer_t ldf):
    """{{name}}(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf[, m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf]) -> (m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    offset : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    vn1 : {{ktp2}}_, 1D array, dimension(*), intent inout
    vn2 : {{ktp2}}_, 1D array, dimension(*), intent inout
    auxv : {{ktp}}_, 1D array, dimension(*), intent inout
    f : {{ktp}}_, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    offset : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    vn1 : {{ktp2}}_, 1D array, dimension(*), intent inout
    vn2 : {{ktp2}}_, 1D array, dimension(*), intent inout
    auxv : {{ktp}}_, 1D array, dimension(*), intent inout
    f : {{ktp}}_, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray vn1_
    cdef fw_shape_t vn1_shape_[1]
    cdef np.ndarray vn2_
    cdef fw_shape_t vn2_shape_[1]
    cdef np.ndarray auxv_
    cdef fw_shape_t auxv_shape_[1]
    cdef np.ndarray f_
    cdef fw_shape_t f_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    vn1_, vn1 = fw_asfortranarray(vn1, {{npy_enum2}}, 1, False)
    fw_copyshape(vn1_shape_, np.PyArray_DIMS(vn1_), 1)
    vn2_, vn2 = fw_asfortranarray(vn2, {{npy_enum2}}, 1, False)
    fw_copyshape(vn2_shape_, np.PyArray_DIMS(vn2_), 1)
    auxv_, auxv = fw_asfortranarray(auxv, {{npy_enum}}, 1, False)
    fw_copyshape(auxv_shape_, np.PyArray_DIMS(auxv_), 1)
    f_, f = fw_asfortranarray(f, {{npy_enum}}, 2, False)
    fw_copyshape(f_shape_, np.PyArray_DIMS(f_), 2)
    if ldf != f_shape_[0]:
        raise ValueError("(ldf == f.shape[0]) not satisifed")
    {{fc_name}}(&m, &n, &offset, &nb, &kb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), vn1_shape_, <{{ktp2}}*>np.PyArray_DATA(vn1_), vn2_shape_, <{{ktp2}}*>np.PyArray_DATA(vn2_), auxv_shape_, <{{ktp}}*>np.PyArray_DATA(auxv_), f_shape_, <{{ktp}}*>np.PyArray_DATA(f_), &ldf, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf,)
{{endfor}}


cpdef api object slaqr0(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """slaqr0(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    slaqr0_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), &iloz, &ihiz, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaqr0' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object slaqr1(fwi_integer_t n, object h, fwi_integer_t ldh, fwr_real_t sr1, fwr_real_t si1, fwr_real_t sr2, fwr_real_t si2, object v):
    """slaqr1(n, h, ldh, sr1, si1, sr2, si2, v[, n, h, ldh, sr1, si1, sr2, si2, v]) -> (n, h, ldh, sr1, si1, sr2, si2, v)

    Parameters
    ----------
    n : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    sr1 : fwr_real, intent inout
    si1 : fwr_real, intent inout
    sr2 : fwr_real, intent inout
    si2 : fwr_real, intent inout
    v : fwr_real, 1D array, dimension(*), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    sr1 : fwr_real, intent inout
    si1 : fwr_real, intent inout
    sr2 : fwr_real, intent inout
    si2 : fwr_real, intent inout
    v : fwr_real, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    slaqr1_c(&n, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, &sr1, &si1, &sr2, &si2, v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaqr1' wrapper.")
    return (n, h, ldh, sr1, si1, sr2, si2, v,)


cpdef api object slaqr2(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sr, object si, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """slaqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_real, 1D array, dimension(*), intent inout
    si : fwr_real, 1D array, dimension(*), intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_real, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_real, 1D array, dimension(*), intent inout
    si : fwr_real, 1D array, dimension(*), intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_real, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sr_
    cdef fw_shape_t sr_shape_[1]
    cdef np.ndarray si_
    cdef fw_shape_t si_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sr_, sr = fw_asfortranarray(sr, fwr_real_t_enum, 1, False)
    fw_copyshape(sr_shape_, np.PyArray_DIMS(sr_), 1)
    si_, si = fw_asfortranarray(si, fwr_real_t_enum, 1, False)
    fw_copyshape(si_shape_, np.PyArray_DIMS(si_), 1)
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwr_real_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwr_real_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    slaqr2_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sr_shape_, <fwr_real_t*>np.PyArray_DATA(sr_), si_shape_, <fwr_real_t*>np.PyArray_DATA(si_), v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwr_real_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwr_real_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaqr2' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object slaqr3(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sr, object si, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """slaqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_real, 1D array, dimension(*), intent inout
    si : fwr_real, 1D array, dimension(*), intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_real, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sr : fwr_real, 1D array, dimension(*), intent inout
    si : fwr_real, 1D array, dimension(*), intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_real, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sr_
    cdef fw_shape_t sr_shape_[1]
    cdef np.ndarray si_
    cdef fw_shape_t si_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sr_, sr = fw_asfortranarray(sr, fwr_real_t_enum, 1, False)
    fw_copyshape(sr_shape_, np.PyArray_DIMS(sr_), 1)
    si_, si = fw_asfortranarray(si, fwr_real_t_enum, 1, False)
    fw_copyshape(si_shape_, np.PyArray_DIMS(si_), 1)
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwr_real_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwr_real_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    slaqr3_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sr_shape_, <fwr_real_t*>np.PyArray_DATA(sr_), si_shape_, <fwr_real_t*>np.PyArray_DATA(si_), v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwr_real_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwr_real_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaqr3' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object slaqr4(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object wr, object wi, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """slaqr4(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    slaqr4_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), &iloz, &ihiz, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaqr4' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object slaqr5(bint wantt, bint wantz, fwi_integer_t kacc22, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nshfts, object sr, object si, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object v, fwi_integer_t ldv, object u, fwi_integer_t ldu, fwi_integer_t nv, object wv, fwi_integer_t ldwv, fwi_integer_t nh, object wh, fwi_integer_t ldwh):
    """slaqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh[, wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh]) -> (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    sr : fwr_real, 1D array, dimension(*), intent inout
    si : fwr_real, 1D array, dimension(*), intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_real, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwr_real, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    sr : fwr_real, 1D array, dimension(*), intent inout
    si : fwr_real, 1D array, dimension(*), intent inout
    h : fwr_real, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwr_real, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwr_real, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwr_real, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwr_real, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray sr_
    cdef fw_shape_t sr_shape_[1]
    cdef np.ndarray si_
    cdef fw_shape_t si_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray wh_
    cdef fw_shape_t wh_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    sr_, sr = fw_asfortranarray(sr, fwr_real_t_enum, 1, False)
    fw_copyshape(sr_shape_, np.PyArray_DIMS(sr_), 1)
    si_, si = fw_asfortranarray(si, fwr_real_t_enum, 1, False)
    fw_copyshape(si_shape_, np.PyArray_DIMS(si_), 1)
    h_, h = fw_asfortranarray(h, fwr_real_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwr_real_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwr_real_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwr_real_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    wh_, wh = fw_asfortranarray(wh, fwr_real_t_enum, 2, False)
    fw_copyshape(wh_shape_, np.PyArray_DIMS(wh_), 2)
    if ldwh != wh_shape_[0]:
        raise ValueError("(ldwh == wh.shape[0]) not satisifed")
    slaqr5_c(&wantt_, &wantz_, &kacc22, &n, &ktop, &kbot, &nshfts, sr_shape_, <fwr_real_t*>np.PyArray_DATA(sr_), si_shape_, <fwr_real_t*>np.PyArray_DATA(si_), h_shape_, <fwr_real_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, v_shape_, <fwr_real_t*>np.PyArray_DATA(v_), &ldv, u_shape_, <fwr_real_t*>np.PyArray_DATA(u_), &ldu, &nv, wv_shape_, <fwr_real_t*>np.PyArray_DATA(wv_), &ldwv, &nh, wh_shape_, <fwr_real_t*>np.PyArray_DATA(wh_), &ldwh, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'slaqr5' wrapper.")
    return (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqsb_c', 'dlaqsb_c', 'claqsb_c', 'zlaqsb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqsb', 'dlaqsb', 'claqsb', 'zlaqsb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object s, {{ktp2}} scond, {{ktp2}} amax, object equed):
    """{{name}}(uplo, n, kd, ab, ldab, s, scond, amax, equed[, uplo, n, kd, ab, ldab, s, scond, amax, equed]) -> (uplo, n, kd, ab, ldab, s, scond, amax, equed)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, s, scond, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqsp_c', 'dlaqsp_c', 'claqsp_c', 'zlaqsp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqsp', 'dlaqsp', 'claqsp', 'zlaqsp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object s, {{ktp2}} scond, {{ktp2}} amax, object equed):
    """{{name}}(uplo, n, ap, s, scond, amax, equed[, uplo, n, ap, s, scond, amax, equed]) -> (uplo, n, ap, s, scond, amax, equed)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, s, scond, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slaqsy_c', 'dlaqsy_c', 'claqsy_c', 'zlaqsy_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slaqsy', 'dlaqsy', 'claqsy', 'zlaqsy'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object s, {{ktp2}} scond, {{ktp2}} amax, object equed):
    """{{name}}(uplo, n, a, lda, s, scond, amax, equed[, uplo, n, a, lda, s, scond, amax, equed]) -> (uplo, n, a, lda, s, scond, amax, equed)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    equed : object_, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, fw_equed, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, s, scond, amax, fw_equed,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaqtr_c', 'dlaqtr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaqtr', 'dlaqtr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwl_logical_t ltran, fwl_logical_t lreal, fwi_integer_t n, object t, fwi_integer_t ldt, object b, {{ktp}} w, {{ktp}} scale, object x, object work, fwi_integer_t info):
    """{{name}}(ltran, lreal, n, t, ldt, b, w, scale, x, work, info[, ltran, lreal, n, t, ldt, b, w, scale, x, work, info]) -> (ltran, lreal, n, t, ldt, b, w, scale, x, work, info)

    Parameters
    ----------
    ltran : fwl_logical, intent inout
    lreal : fwl_logical, intent inout
    n : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    b : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, intent inout
    scale : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ltran : fwl_logical, intent inout
    lreal : fwl_logical, intent inout
    n : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    b : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, intent inout
    scale : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 1, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&ltran, &lreal, &n, t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &w, &scale, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (ltran, lreal, n, t, ldt, b, w, scale, x, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slar1v_c', 'dlar1v_c', 'clar1v_c', 'zlar1v_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slar1v', 'dlar1v', 'clar1v', 'zlar1v'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t b1, fwi_integer_t bn, {{ktp}} lambda__, object d, object l, object ld, object lld, {{ktp}} pivmin, {{ktp}} gaptol, object z, fwl_logical_t wantnc, fwi_integer_t negcnt, {{ktp}} ztz, {{ktp}} mingma, fwi_integer_t r, object isuppz, {{ktp}} nrminv, {{ktp}} resid, {{ktp}} rqcorr, object work):
    """{{name}}(n, b1, bn, lambda__, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work[, n, b1, bn, lambda__, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work]) -> (n, b1, bn, lambda__, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work)

    Parameters
    ----------
    n : fwi_integer, intent inout
    b1 : fwi_integer, intent inout
    bn : fwi_integer, intent inout
    lambda__ : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    l : {{ktp}}_, 1D array, dimension(*), intent inout
    ld : {{ktp}}_, 1D array, dimension(*), intent inout
    lld : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    gaptol : {{ktp}}_, intent inout
    z : {{ktp2}}_, 1D array, dimension(*), intent inout
    wantnc : fwl_logical, intent inout
    negcnt : fwi_integer, intent inout
    ztz : {{ktp}}_, intent inout
    mingma : {{ktp}}_, intent inout
    r : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    nrminv : {{ktp}}_, intent inout
    resid : {{ktp}}_, intent inout
    rqcorr : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    b1 : fwi_integer, intent inout
    bn : fwi_integer, intent inout
    lambda__ : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    l : {{ktp}}_, 1D array, dimension(*), intent inout
    ld : {{ktp}}_, 1D array, dimension(*), intent inout
    lld : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    gaptol : {{ktp}}_, intent inout
    z : {{ktp2}}_, 1D array, dimension(*), intent inout
    wantnc : fwl_logical, intent inout
    negcnt : fwi_integer, intent inout
    ztz : {{ktp}}_, intent inout
    mingma : {{ktp}}_, intent inout
    r : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    nrminv : {{ktp}}_, intent inout
    resid : {{ktp}}_, intent inout
    rqcorr : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray l_
    cdef fw_shape_t l_shape_[1]
    cdef np.ndarray ld_
    cdef fw_shape_t ld_shape_[1]
    cdef np.ndarray lld_
    cdef fw_shape_t lld_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    l_, l = fw_asfortranarray(l, {{npy_enum}}, 1, False)
    fw_copyshape(l_shape_, np.PyArray_DIMS(l_), 1)
    ld_, ld = fw_asfortranarray(ld, {{npy_enum}}, 1, False)
    fw_copyshape(ld_shape_, np.PyArray_DIMS(ld_), 1)
    lld_, lld = fw_asfortranarray(lld, {{npy_enum}}, 1, False)
    fw_copyshape(lld_shape_, np.PyArray_DIMS(lld_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &b1, &bn, &lambda__, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), l_shape_, <{{ktp}}*>np.PyArray_DATA(l_), ld_shape_, <{{ktp}}*>np.PyArray_DATA(ld_), lld_shape_, <{{ktp}}*>np.PyArray_DATA(lld_), &pivmin, &gaptol, z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &wantnc, &negcnt, &ztz, &mingma, &r, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), &nrminv, &resid, &rqcorr, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, b1, bn, lambda__, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slar2v_c', 'dlar2v_c', 'clar2v_c', 'zlar2v_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slar2v', 'dlar2v', 'clar2v', 'zlar2v'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, object y, object z, fwi_integer_t incx, object c, object s, fwi_integer_t incc):
    """{{name}}(n, x, y, z, incx, c, s, incc[, n, x, y, z, incx, c, s, incc]) -> (n, x, y, z, incx, c, s, incc)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    incc : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    incc : fwi_integer, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &incx, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), s_shape_, <{{ktp}}*>np.PyArray_DATA(s_), &incc, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, y, z, incx, c, s, incc,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarf_c', 'dlarf_c', 'clarf_c', 'zlarf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarf', 'dlarf', 'clarf', 'zlarf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, fwi_integer_t m, fwi_integer_t n, object v, fwi_integer_t incv, {{ktp}} tau, object c, fwi_integer_t ldc, object work):
    """{{name}}(side, m, n, v, incv, tau, c, ldc, work[, side, m, n, v, incv, tau, c, ldc, work]) -> (side, m, n, v, incv, tau, c, ldc, work)

    Parameters
    ----------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    incv : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    incv : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    {{fc_name}}(fw_side, &m, &n, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &incv, &tau, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, m, n, v, incv, tau, c, ldc, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarfb_c', 'dlarfb_c', 'clarfb_c', 'zlarfb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarfb', 'dlarfb', 'clarfb', 'zlarfb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, object direct, object storev, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object v, fwi_integer_t ldv, object t, fwi_integer_t ldt, object c, fwi_integer_t ldc, object work, fwi_integer_t ldwork):
    """{{name}}(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork[, side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork]) -> (side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    direct : object_, intent inout
    storev : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 2D array, dimension(ldwork, *), intent inout
    ldwork : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    direct : object_, intent inout
    storev : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 2D array, dimension(ldwork, *), intent inout
    ldwork : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_direct = [0, 0]
    cdef char *fw_storev = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if ldwork != work_shape_[0]:
        raise ValueError("(ldwork == work.shape[0]) not satisifed")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_direct[0] = fw_aschar(direct)
    if fw_direct[0] == 0:
        raise ValueError("len(direct) != 1")
    fw_storev[0] = fw_aschar(storev)
    if fw_storev[0] == 0:
        raise ValueError("len(storev) != 1")
    {{fc_name}}(fw_side, fw_trans, fw_direct, fw_storev, &m, &n, &k, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &ldwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, fw_direct, fw_storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarfg_c', 'dlarfg_c', 'clarfg_c', 'zlarfg_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarfg', 'dlarfg', 'clarfg', 'zlarfg'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, {{ktp}} alpha, object x, fwi_integer_t incx, {{ktp}} tau):
    """{{name}}(n, alpha, x, incx, tau[, n, alpha, x, incx, tau]) -> (n, alpha, x, incx, tau)

    Parameters
    ----------
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    {{fc_name}}(&n, &alpha, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, &tau, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, alpha, x, incx, tau,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarfgp_c', 'dlarfgp_c', 'clarfgp_c', 'zlarfgp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarfgp', 'dlarfgp', 'clarfgp', 'zlarfgp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, {{ktp}} alpha, object x, fwi_integer_t incx, {{ktp}} tau):
    """{{name}}(n, alpha, x, incx, tau[, n, alpha, x, incx, tau]) -> (n, alpha, x, incx, tau)

    Parameters
    ----------
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    {{fc_name}}(&n, &alpha, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, &tau, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, alpha, x, incx, tau,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarft_c', 'dlarft_c', 'clarft_c', 'zlarft_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarft', 'dlarft', 'clarft', 'zlarft'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object direct, object storev, fwi_integer_t n, fwi_integer_t k, object v, fwi_integer_t ldv, object tau, object t, fwi_integer_t ldt):
    """{{name}}(direct, storev, n, k, v, ldv, tau, t, ldt[, direct, storev, n, k, v, ldv, tau, t, ldt]) -> (direct, storev, n, k, v, ldv, tau, t, ldt)

    Parameters
    ----------
    direct : object_, intent inout
    storev : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout

    Returns
    -------
    direct : object_, intent inout
    storev : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout

    """
    cdef char *fw_direct = [0, 0]
    cdef char *fw_storev = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    fw_direct[0] = fw_aschar(direct)
    if fw_direct[0] == 0:
        raise ValueError("len(direct) != 1")
    fw_storev[0] = fw_aschar(storev)
    if fw_storev[0] == 0:
        raise ValueError("len(storev) != 1")
    {{fc_name}}(fw_direct, fw_storev, &n, &k, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_direct, fw_storev, n, k, v, ldv, tau, t, ldt,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarfx_c', 'dlarfx_c', 'clarfx_c', 'zlarfx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarfx', 'dlarfx', 'clarfx', 'zlarfx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, fwi_integer_t m, fwi_integer_t n, object v, {{ktp}} tau, object c, fwi_integer_t ldc, object work):
    """{{name}}(side, m, n, v, tau, c, ldc, work[, side, m, n, v, tau, c, ldc, work]) -> (side, m, n, v, tau, c, ldc, work)

    Parameters
    ----------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    {{fc_name}}(fw_side, &m, &n, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &tau, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, m, n, v, tau, c, ldc, work,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slargv_c', 'dlargv_c', 'clargv_c', 'zlargv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slargv', 'dlargv', 'clargv', 'zlargv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, fwi_integer_t incx, object y, fwi_integer_t incy, object c, fwi_integer_t incc):
    """{{name}}(n, x, incx, y, incy, c, incc[, n, x, incx, y, incy, c, incc]) -> (n, x, incx, y, incy, c, incc)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    incc : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    incc : fwi_integer, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), &incc, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, incx, y, incy, c, incc,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarnv_c', 'dlarnv_c', 'clarnv_c', 'zlarnv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarnv', 'dlarnv', 'clarnv', 'zlarnv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t idist, object iseed, fwi_integer_t n, object x):
    """{{name}}(idist, iseed, n, x[, idist, iseed, n, x]) -> (idist, iseed, n, x)

    Parameters
    ----------
    idist : fwi_integer, intent inout
    iseed : fwi_integer, 1D array, dimension(4), intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    idist : fwi_integer, intent inout
    iseed : fwi_integer, 1D array, dimension(4), intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray iseed_
    cdef fw_shape_t iseed_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    iseed_, iseed = fw_asfortranarray(iseed, fwi_integer_t_enum, 1, False)
    fw_copyshape(iseed_shape_, np.PyArray_DIMS(iseed_), 1)
    if not (0 <= 4 <= iseed_shape_[0]):
        raise ValueError("(0 <= 4 <= iseed.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    {{fc_name}}(&idist, iseed_shape_, <fwi_integer_t*>np.PyArray_DATA(iseed_), &n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (idist, iseed, n, x,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarra_c', 'dlarra_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarra', 'dlarra'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, object e2, {{ktp}} spltol, {{ktp}} tnrm, fwi_integer_t nsplit, object isplit, fwi_integer_t info):
    """{{name}}(n, d, e, e2, spltol, tnrm, nsplit, isplit, info[, n, d, e, e2, spltol, tnrm, nsplit, isplit, info]) -> (n, d, e, e2, spltol, tnrm, nsplit, isplit, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    spltol : {{ktp}}_, intent inout
    tnrm : {{ktp}}_, intent inout
    nsplit : fwi_integer, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    spltol : {{ktp}}_, intent inout
    tnrm : {{ktp}}_, intent inout
    nsplit : fwi_integer, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray e2_
    cdef fw_shape_t e2_shape_[1]
    cdef np.ndarray isplit_
    cdef fw_shape_t isplit_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    e2_, e2 = fw_asfortranarray(e2, {{npy_enum}}, 1, False)
    fw_copyshape(e2_shape_, np.PyArray_DIMS(e2_), 1)
    isplit_, isplit = fw_asfortranarray(isplit, fwi_integer_t_enum, 1, False)
    fw_copyshape(isplit_shape_, np.PyArray_DIMS(isplit_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), e2_shape_, <{{ktp}}*>np.PyArray_DATA(e2_), &spltol, &tnrm, &nsplit, isplit_shape_, <fwi_integer_t*>np.PyArray_DATA(isplit_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, e2, spltol, tnrm, nsplit, isplit, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrb_c', 'dlarrb_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrb', 'dlarrb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object lld, fwi_integer_t ifirst, fwi_integer_t ilast, {{ktp}} rtol1, {{ktp}} rtol2, fwi_integer_t offset, object w, object wgap, object werr, object work, object iwork, {{ktp}} pivmin, {{ktp}} spdiam, fwi_integer_t twist, fwi_integer_t info):
    """{{name}}(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info[, n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info]) -> (n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    lld : {{ktp}}_, 1D array, dimension(*), intent inout
    ifirst : fwi_integer, intent inout
    ilast : fwi_integer, intent inout
    rtol1 : {{ktp}}_, intent inout
    rtol2 : {{ktp}}_, intent inout
    offset : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    spdiam : {{ktp}}_, intent inout
    twist : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    lld : {{ktp}}_, 1D array, dimension(*), intent inout
    ifirst : fwi_integer, intent inout
    ilast : fwi_integer, intent inout
    rtol1 : {{ktp}}_, intent inout
    rtol2 : {{ktp}}_, intent inout
    offset : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    spdiam : {{ktp}}_, intent inout
    twist : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray lld_
    cdef fw_shape_t lld_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray wgap_
    cdef fw_shape_t wgap_shape_[1]
    cdef np.ndarray werr_
    cdef fw_shape_t werr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    lld_, lld = fw_asfortranarray(lld, {{npy_enum}}, 1, False)
    fw_copyshape(lld_shape_, np.PyArray_DIMS(lld_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    wgap_, wgap = fw_asfortranarray(wgap, {{npy_enum}}, 1, False)
    fw_copyshape(wgap_shape_, np.PyArray_DIMS(wgap_), 1)
    werr_, werr = fw_asfortranarray(werr, {{npy_enum}}, 1, False)
    fw_copyshape(werr_shape_, np.PyArray_DIMS(werr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), lld_shape_, <{{ktp}}*>np.PyArray_DATA(lld_), &ifirst, &ilast, &rtol1, &rtol2, &offset, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), wgap_shape_, <{{ktp}}*>np.PyArray_DATA(wgap_), werr_shape_, <{{ktp}}*>np.PyArray_DATA(werr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &pivmin, &spdiam, &twist, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrc_c', 'dlarrc_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrc', 'dlarrc'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobt, fwi_integer_t n, {{ktp}} vl, {{ktp}} vu, object d, object e, {{ktp}} pivmin, fwi_integer_t eigcnt, fwi_integer_t lcnt, fwi_integer_t rcnt, fwi_integer_t info):
    """{{name}}(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info[, jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info]) -> (jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info)

    Parameters
    ----------
    jobt : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    eigcnt : fwi_integer, intent inout
    lcnt : fwi_integer, intent inout
    rcnt : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobt : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    eigcnt : fwi_integer, intent inout
    lcnt : fwi_integer, intent inout
    rcnt : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobt = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    fw_jobt[0] = fw_aschar(jobt)
    if fw_jobt[0] == 0:
        raise ValueError("len(jobt) != 1")
    {{fc_name}}(fw_jobt, &n, &vl, &vu, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &pivmin, &eigcnt, &lcnt, &rcnt, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrd_c', 'dlarrd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrd', 'dlarrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object range, object order, fwi_integer_t n, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, object gers, {{ktp}} reltol, object d, object e, object e2, {{ktp}} pivmin, fwi_integer_t nsplit, object isplit, fwi_integer_t m, object w, object werr, {{ktp}} wl, {{ktp}} wu, object iblock, object indexw, object work, object iwork, fwi_integer_t info):
    """{{name}}(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info[, range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info]) -> (range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info)

    Parameters
    ----------
    range : object_, intent inout
    order : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    gers : {{ktp}}_, 1D array, dimension(*), intent inout
    reltol : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    nsplit : fwi_integer, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    wl : {{ktp}}_, intent inout
    wu : {{ktp}}_, intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    indexw : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    range : object_, intent inout
    order : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    gers : {{ktp}}_, 1D array, dimension(*), intent inout
    reltol : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    nsplit : fwi_integer, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    wl : {{ktp}}_, intent inout
    wu : {{ktp}}_, intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    indexw : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_range = [0, 0]
    cdef char *fw_order = [0, 0]
    cdef np.ndarray gers_
    cdef fw_shape_t gers_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray e2_
    cdef fw_shape_t e2_shape_[1]
    cdef np.ndarray isplit_
    cdef fw_shape_t isplit_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray werr_
    cdef fw_shape_t werr_shape_[1]
    cdef np.ndarray iblock_
    cdef fw_shape_t iblock_shape_[1]
    cdef np.ndarray indexw_
    cdef fw_shape_t indexw_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    gers_, gers = fw_asfortranarray(gers, {{npy_enum}}, 1, False)
    fw_copyshape(gers_shape_, np.PyArray_DIMS(gers_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    e2_, e2 = fw_asfortranarray(e2, {{npy_enum}}, 1, False)
    fw_copyshape(e2_shape_, np.PyArray_DIMS(e2_), 1)
    isplit_, isplit = fw_asfortranarray(isplit, fwi_integer_t_enum, 1, False)
    fw_copyshape(isplit_shape_, np.PyArray_DIMS(isplit_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    werr_, werr = fw_asfortranarray(werr, {{npy_enum}}, 1, False)
    fw_copyshape(werr_shape_, np.PyArray_DIMS(werr_), 1)
    iblock_, iblock = fw_asfortranarray(iblock, fwi_integer_t_enum, 1, False)
    fw_copyshape(iblock_shape_, np.PyArray_DIMS(iblock_), 1)
    indexw_, indexw = fw_asfortranarray(indexw, fwi_integer_t_enum, 1, False)
    fw_copyshape(indexw_shape_, np.PyArray_DIMS(indexw_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_order[0] = fw_aschar(order)
    if fw_order[0] == 0:
        raise ValueError("len(order) != 1")
    {{fc_name}}(fw_range, fw_order, &n, &vl, &vu, &il, &iu, gers_shape_, <{{ktp}}*>np.PyArray_DATA(gers_), &reltol, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), e2_shape_, <{{ktp}}*>np.PyArray_DATA(e2_), &pivmin, &nsplit, isplit_shape_, <fwi_integer_t*>np.PyArray_DATA(isplit_), &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), werr_shape_, <{{ktp}}*>np.PyArray_DATA(werr_), &wl, &wu, iblock_shape_, <fwi_integer_t*>np.PyArray_DATA(iblock_), indexw_shape_, <fwi_integer_t*>np.PyArray_DATA(indexw_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_range, fw_order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarre_c', 'dlarre_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarre', 'dlarre'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object range, fwi_integer_t n, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, object d, object e, object e2, {{ktp}} rtol1, {{ktp}} rtol2, {{ktp}} spltol, fwi_integer_t nsplit, object isplit, fwi_integer_t m, object w, object werr, object wgap, object iblock, object indexw, object gers, {{ktp}} pivmin, object work, object iwork, fwi_integer_t info):
    """{{name}}(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info[, range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info]) -> (range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info)

    Parameters
    ----------
    range : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    rtol1 : {{ktp}}_, intent inout
    rtol2 : {{ktp}}_, intent inout
    spltol : {{ktp}}_, intent inout
    nsplit : fwi_integer, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    indexw : fwi_integer, 1D array, dimension(*), intent inout
    gers : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    range : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    rtol1 : {{ktp}}_, intent inout
    rtol2 : {{ktp}}_, intent inout
    spltol : {{ktp}}_, intent inout
    nsplit : fwi_integer, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    indexw : fwi_integer, 1D array, dimension(*), intent inout
    gers : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_range = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray e2_
    cdef fw_shape_t e2_shape_[1]
    cdef np.ndarray isplit_
    cdef fw_shape_t isplit_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray werr_
    cdef fw_shape_t werr_shape_[1]
    cdef np.ndarray wgap_
    cdef fw_shape_t wgap_shape_[1]
    cdef np.ndarray iblock_
    cdef fw_shape_t iblock_shape_[1]
    cdef np.ndarray indexw_
    cdef fw_shape_t indexw_shape_[1]
    cdef np.ndarray gers_
    cdef fw_shape_t gers_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    e2_, e2 = fw_asfortranarray(e2, {{npy_enum}}, 1, False)
    fw_copyshape(e2_shape_, np.PyArray_DIMS(e2_), 1)
    isplit_, isplit = fw_asfortranarray(isplit, fwi_integer_t_enum, 1, False)
    fw_copyshape(isplit_shape_, np.PyArray_DIMS(isplit_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    werr_, werr = fw_asfortranarray(werr, {{npy_enum}}, 1, False)
    fw_copyshape(werr_shape_, np.PyArray_DIMS(werr_), 1)
    wgap_, wgap = fw_asfortranarray(wgap, {{npy_enum}}, 1, False)
    fw_copyshape(wgap_shape_, np.PyArray_DIMS(wgap_), 1)
    iblock_, iblock = fw_asfortranarray(iblock, fwi_integer_t_enum, 1, False)
    fw_copyshape(iblock_shape_, np.PyArray_DIMS(iblock_), 1)
    indexw_, indexw = fw_asfortranarray(indexw, fwi_integer_t_enum, 1, False)
    fw_copyshape(indexw_shape_, np.PyArray_DIMS(indexw_), 1)
    gers_, gers = fw_asfortranarray(gers, {{npy_enum}}, 1, False)
    fw_copyshape(gers_shape_, np.PyArray_DIMS(gers_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    {{fc_name}}(fw_range, &n, &vl, &vu, &il, &iu, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), e2_shape_, <{{ktp}}*>np.PyArray_DATA(e2_), &rtol1, &rtol2, &spltol, &nsplit, isplit_shape_, <fwi_integer_t*>np.PyArray_DATA(isplit_), &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), werr_shape_, <{{ktp}}*>np.PyArray_DATA(werr_), wgap_shape_, <{{ktp}}*>np.PyArray_DATA(wgap_), iblock_shape_, <fwi_integer_t*>np.PyArray_DATA(iblock_), indexw_shape_, <fwi_integer_t*>np.PyArray_DATA(indexw_), gers_shape_, <{{ktp}}*>np.PyArray_DATA(gers_), &pivmin, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrf_c', 'dlarrf_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrf', 'dlarrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object l, object ld, fwi_integer_t clstrt, fwi_integer_t clend, object w, object wgap, object werr, {{ktp}} spdiam, {{ktp}} clgapl, {{ktp}} clgapr, {{ktp}} pivmin, {{ktp}} sigma, object dplus, object lplus, object work, fwi_integer_t info):
    """{{name}}(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info[, n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info]) -> (n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    l : {{ktp}}_, 1D array, dimension(*), intent inout
    ld : {{ktp}}_, 1D array, dimension(*), intent inout
    clstrt : fwi_integer, intent inout
    clend : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    spdiam : {{ktp}}_, intent inout
    clgapl : {{ktp}}_, intent inout
    clgapr : {{ktp}}_, intent inout
    pivmin : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    dplus : {{ktp}}_, 1D array, dimension(*), intent inout
    lplus : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    l : {{ktp}}_, 1D array, dimension(*), intent inout
    ld : {{ktp}}_, 1D array, dimension(*), intent inout
    clstrt : fwi_integer, intent inout
    clend : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    spdiam : {{ktp}}_, intent inout
    clgapl : {{ktp}}_, intent inout
    clgapr : {{ktp}}_, intent inout
    pivmin : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    dplus : {{ktp}}_, 1D array, dimension(*), intent inout
    lplus : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray l_
    cdef fw_shape_t l_shape_[1]
    cdef np.ndarray ld_
    cdef fw_shape_t ld_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray wgap_
    cdef fw_shape_t wgap_shape_[1]
    cdef np.ndarray werr_
    cdef fw_shape_t werr_shape_[1]
    cdef np.ndarray dplus_
    cdef fw_shape_t dplus_shape_[1]
    cdef np.ndarray lplus_
    cdef fw_shape_t lplus_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    l_, l = fw_asfortranarray(l, {{npy_enum}}, 1, False)
    fw_copyshape(l_shape_, np.PyArray_DIMS(l_), 1)
    ld_, ld = fw_asfortranarray(ld, {{npy_enum}}, 1, False)
    fw_copyshape(ld_shape_, np.PyArray_DIMS(ld_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    wgap_, wgap = fw_asfortranarray(wgap, {{npy_enum}}, 1, False)
    fw_copyshape(wgap_shape_, np.PyArray_DIMS(wgap_), 1)
    werr_, werr = fw_asfortranarray(werr, {{npy_enum}}, 1, False)
    fw_copyshape(werr_shape_, np.PyArray_DIMS(werr_), 1)
    dplus_, dplus = fw_asfortranarray(dplus, {{npy_enum}}, 1, False)
    fw_copyshape(dplus_shape_, np.PyArray_DIMS(dplus_), 1)
    lplus_, lplus = fw_asfortranarray(lplus, {{npy_enum}}, 1, False)
    fw_copyshape(lplus_shape_, np.PyArray_DIMS(lplus_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), l_shape_, <{{ktp}}*>np.PyArray_DATA(l_), ld_shape_, <{{ktp}}*>np.PyArray_DATA(ld_), &clstrt, &clend, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), wgap_shape_, <{{ktp}}*>np.PyArray_DATA(wgap_), werr_shape_, <{{ktp}}*>np.PyArray_DATA(werr_), &spdiam, &clgapl, &clgapr, &pivmin, &sigma, dplus_shape_, <{{ktp}}*>np.PyArray_DATA(dplus_), lplus_shape_, <{{ktp}}*>np.PyArray_DATA(lplus_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrj_c', 'dlarrj_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrj', 'dlarrj'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e2, fwi_integer_t ifirst, fwi_integer_t ilast, {{ktp}} rtol, fwi_integer_t offset, object w, object werr, object work, object iwork, {{ktp}} pivmin, {{ktp}} spdiam, fwi_integer_t info):
    """{{name}}(n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info[, n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info]) -> (n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ifirst : fwi_integer, intent inout
    ilast : fwi_integer, intent inout
    rtol : {{ktp}}_, intent inout
    offset : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    spdiam : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    ifirst : fwi_integer, intent inout
    ilast : fwi_integer, intent inout
    rtol : {{ktp}}_, intent inout
    offset : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    spdiam : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e2_
    cdef fw_shape_t e2_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray werr_
    cdef fw_shape_t werr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e2_, e2 = fw_asfortranarray(e2, {{npy_enum}}, 1, False)
    fw_copyshape(e2_shape_, np.PyArray_DIMS(e2_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    werr_, werr = fw_asfortranarray(werr, {{npy_enum}}, 1, False)
    fw_copyshape(werr_shape_, np.PyArray_DIMS(werr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e2_shape_, <{{ktp}}*>np.PyArray_DATA(e2_), &ifirst, &ilast, &rtol, &offset, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), werr_shape_, <{{ktp}}*>np.PyArray_DATA(werr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &pivmin, &spdiam, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrk_c', 'dlarrk_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrk', 'dlarrk'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t iw, {{ktp}} gl, {{ktp}} gu, object d, object e2, {{ktp}} pivmin, {{ktp}} reltol, {{ktp}} w, {{ktp}} werr, fwi_integer_t info):
    """{{name}}(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info[, n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info]) -> (n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    iw : fwi_integer, intent inout
    gl : {{ktp}}_, intent inout
    gu : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    reltol : {{ktp}}_, intent inout
    w : {{ktp}}_, intent inout
    werr : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    iw : fwi_integer, intent inout
    gl : {{ktp}}_, intent inout
    gu : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e2 : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    reltol : {{ktp}}_, intent inout
    w : {{ktp}}_, intent inout
    werr : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e2_
    cdef fw_shape_t e2_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e2_, e2 = fw_asfortranarray(e2, {{npy_enum}}, 1, False)
    fw_copyshape(e2_shape_, np.PyArray_DIMS(e2_), 1)
    {{fc_name}}(&n, &iw, &gl, &gu, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e2_shape_, <{{ktp}}*>np.PyArray_DATA(e2_), &pivmin, &reltol, &w, &werr, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarrr_c', 'dlarrr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slarrr', 'dlarrr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, fwi_integer_t info):
    """{{name}}(n, d, e, info[, n, d, e, info]) -> (n, d, e, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slarrv_c', 'dlarrv_c', 'clarrv_c', 'zlarrv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarrv', 'dlarrv', 'clarrv', 'zlarrv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, {{ktp}} vl, {{ktp}} vu, object d, object l, {{ktp}} pivmin, object isplit, fwi_integer_t m, fwi_integer_t dol, fwi_integer_t dou, {{ktp}} minrgp, {{ktp}} rtol1, {{ktp}} rtol2, object w, object werr, object wgap, object iblock, object indexw, object gers, object z, fwi_integer_t ldz, object isuppz, object work, object iwork, fwi_integer_t info):
    """{{name}}(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info[, n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info]) -> (n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    l : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    dol : fwi_integer, intent inout
    dou : fwi_integer, intent inout
    minrgp : {{ktp}}_, intent inout
    rtol1 : {{ktp}}_, intent inout
    rtol2 : {{ktp}}_, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    indexw : fwi_integer, 1D array, dimension(*), intent inout
    gers : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    l : {{ktp}}_, 1D array, dimension(*), intent inout
    pivmin : {{ktp}}_, intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    dol : fwi_integer, intent inout
    dou : fwi_integer, intent inout
    minrgp : {{ktp}}_, intent inout
    rtol1 : {{ktp}}_, intent inout
    rtol2 : {{ktp}}_, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    werr : {{ktp}}_, 1D array, dimension(*), intent inout
    wgap : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    indexw : fwi_integer, 1D array, dimension(*), intent inout
    gers : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray l_
    cdef fw_shape_t l_shape_[1]
    cdef np.ndarray isplit_
    cdef fw_shape_t isplit_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray werr_
    cdef fw_shape_t werr_shape_[1]
    cdef np.ndarray wgap_
    cdef fw_shape_t wgap_shape_[1]
    cdef np.ndarray iblock_
    cdef fw_shape_t iblock_shape_[1]
    cdef np.ndarray indexw_
    cdef fw_shape_t indexw_shape_[1]
    cdef np.ndarray gers_
    cdef fw_shape_t gers_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    l_, l = fw_asfortranarray(l, {{npy_enum}}, 1, False)
    fw_copyshape(l_shape_, np.PyArray_DIMS(l_), 1)
    isplit_, isplit = fw_asfortranarray(isplit, fwi_integer_t_enum, 1, False)
    fw_copyshape(isplit_shape_, np.PyArray_DIMS(isplit_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    werr_, werr = fw_asfortranarray(werr, {{npy_enum}}, 1, False)
    fw_copyshape(werr_shape_, np.PyArray_DIMS(werr_), 1)
    wgap_, wgap = fw_asfortranarray(wgap, {{npy_enum}}, 1, False)
    fw_copyshape(wgap_shape_, np.PyArray_DIMS(wgap_), 1)
    iblock_, iblock = fw_asfortranarray(iblock, fwi_integer_t_enum, 1, False)
    fw_copyshape(iblock_shape_, np.PyArray_DIMS(iblock_), 1)
    indexw_, indexw = fw_asfortranarray(indexw, fwi_integer_t_enum, 1, False)
    fw_copyshape(indexw_shape_, np.PyArray_DIMS(indexw_), 1)
    gers_, gers = fw_asfortranarray(gers, {{npy_enum}}, 1, False)
    fw_copyshape(gers_shape_, np.PyArray_DIMS(gers_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&n, &vl, &vu, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), l_shape_, <{{ktp}}*>np.PyArray_DATA(l_), &pivmin, isplit_shape_, <fwi_integer_t*>np.PyArray_DATA(isplit_), &m, &dol, &dou, &minrgp, &rtol1, &rtol2, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), werr_shape_, <{{ktp}}*>np.PyArray_DATA(werr_), wgap_shape_, <{{ktp}}*>np.PyArray_DATA(wgap_), iblock_shape_, <fwi_integer_t*>np.PyArray_DATA(iblock_), indexw_shape_, <fwi_integer_t*>np.PyArray_DATA(indexw_), gers_shape_, <{{ktp}}*>np.PyArray_DATA(gers_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &ldz, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slarscl2_c', 'dlarscl2_c', 'clarscl2_c', 'zlarscl2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarscl2', 'dlarscl2', 'clarscl2', 'zlarscl2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object d, object x, fwi_integer_t ldx):
    """{{name}}(m, n, d, x, ldx[, m, n, d, x, ldx]) -> (m, n, d, x, ldx)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp2}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp2}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum2}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    {{fc_name}}(&m, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &ldx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, d, x, ldx,)
{{endfor}}


{{for fc_name, ktp, ktp2, name
      in zip(['slartg_c', 'dlartg_c', 'clartg_c', 'zlartg_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slartg', 'dlartg', 'clartg', 'zlartg'])}}
cpdef api object {{name}}({{ktp}} f, {{ktp}} g, {{ktp2}} cs, {{ktp}} sn, {{ktp}} r):
    """{{name}}(f, g, cs, sn, r[, f, g, cs, sn, r]) -> (f, g, cs, sn, r)

    Parameters
    ----------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    cs : {{ktp2}}_, intent inout
    sn : {{ktp}}_, intent inout
    r : {{ktp}}_, intent inout

    Returns
    -------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    cs : {{ktp2}}_, intent inout
    sn : {{ktp}}_, intent inout
    r : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&f, &g, &cs, &sn, &r, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (f, g, cs, sn, r,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slartgp_c', 'dlartgp_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slartgp', 'dlartgp'])}}
cpdef api object {{name}}({{ktp}} f, {{ktp}} g, {{ktp}} cs, {{ktp}} sn, {{ktp}} r):
    """{{name}}(f, g, cs, sn, r[, f, g, cs, sn, r]) -> (f, g, cs, sn, r)

    Parameters
    ----------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    cs : {{ktp}}_, intent inout
    sn : {{ktp}}_, intent inout
    r : {{ktp}}_, intent inout

    Returns
    -------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    cs : {{ktp}}_, intent inout
    sn : {{ktp}}_, intent inout
    r : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&f, &g, &cs, &sn, &r, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (f, g, cs, sn, r,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slartgs_c', 'dlartgs_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slartgs', 'dlartgs'])}}
cpdef api object {{name}}({{ktp}} x, {{ktp}} y, {{ktp}} sigma, {{ktp}} cs, {{ktp}} sn):
    """{{name}}(x, y, sigma, cs, sn[, x, y, sigma, cs, sn]) -> (x, y, sigma, cs, sn)

    Parameters
    ----------
    x : {{ktp}}_, intent inout
    y : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    cs : {{ktp}}_, intent inout
    sn : {{ktp}}_, intent inout

    Returns
    -------
    x : {{ktp}}_, intent inout
    y : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    cs : {{ktp}}_, intent inout
    sn : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&x, &y, &sigma, &cs, &sn, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (x, y, sigma, cs, sn,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slartv_c', 'dlartv_c', 'clartv_c', 'zlartv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slartv', 'dlartv', 'clartv', 'zlartv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, fwi_integer_t incx, object y, fwi_integer_t incy, object c, object s, fwi_integer_t incc):
    """{{name}}(n, x, incx, y, incy, c, s, incc[, n, x, incx, y, incy, c, s, incc]) -> (n, x, incx, y, incy, c, s, incc)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    incc : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    y : {{ktp}}_, 1D array, dimension(*), intent inout
    incy : fwi_integer, intent inout
    c : {{ktp2}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    incc : fwi_integer, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray y_
    cdef fw_shape_t y_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    y_, y = fw_asfortranarray(y, {{npy_enum}}, 1, False)
    fw_copyshape(y_shape_, np.PyArray_DIMS(y_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum2}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, y_shape_, <{{ktp}}*>np.PyArray_DATA(y_), &incy, c_shape_, <{{ktp2}}*>np.PyArray_DATA(c_), s_shape_, <{{ktp}}*>np.PyArray_DATA(s_), &incc, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, incx, y, incy, c, s, incc,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaruv_c', 'dlaruv_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slaruv', 'dlaruv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object iseed, fwi_integer_t n, object x):
    """{{name}}(iseed, n, x[, iseed, n, x]) -> (iseed, n, x)

    Parameters
    ----------
    iseed : fwi_integer, 1D array, dimension(4), intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(n), intent inout

    Returns
    -------
    iseed : fwi_integer, 1D array, dimension(4), intent inout
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(n), intent inout

    """
    cdef np.ndarray iseed_
    cdef fw_shape_t iseed_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    iseed_, iseed = fw_asfortranarray(iseed, fwi_integer_t_enum, 1, False)
    fw_copyshape(iseed_shape_, np.PyArray_DIMS(iseed_), 1)
    if not (0 <= 4 <= iseed_shape_[0]):
        raise ValueError("(0 <= 4 <= iseed.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    if not (0 <= n <= x_shape_[0]):
        raise ValueError("(0 <= n <= x.shape[0]) not satisifed")
    {{fc_name}}(iseed_shape_, <fwi_integer_t*>np.PyArray_DATA(iseed_), &n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (iseed, n, x,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarz_c', 'dlarz_c', 'clarz_c', 'zlarz_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarz', 'dlarz', 'clarz', 'zlarz'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, fwi_integer_t m, fwi_integer_t n, fwi_integer_t l, object v, fwi_integer_t incv, {{ktp}} tau, object c, fwi_integer_t ldc, object work):
    """{{name}}(side, m, n, l, v, incv, tau, c, ldc, work[, side, m, n, l, v, incv, tau, c, ldc, work]) -> (side, m, n, l, v, incv, tau, c, ldc, work)

    Parameters
    ----------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    l : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    incv : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    l : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    incv : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    {{fc_name}}(fw_side, &m, &n, &l, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &incv, &tau, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, m, n, l, v, incv, tau, c, ldc, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarzb_c', 'dlarzb_c', 'clarzb_c', 'zlarzb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarzb', 'dlarzb', 'clarzb', 'zlarzb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object trans, object direct, object storev, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, fwi_integer_t l, object v, fwi_integer_t ldv, object t, fwi_integer_t ldt, object c, fwi_integer_t ldc, object work, fwi_integer_t ldwork):
    """{{name}}(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork[, side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork]) -> (side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    direct : object_, intent inout
    storev : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 2D array, dimension(ldwork, *), intent inout
    ldwork : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    direct : object_, intent inout
    storev : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 2D array, dimension(ldwork, *), intent inout
    ldwork : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_direct = [0, 0]
    cdef char *fw_storev = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if ldwork != work_shape_[0]:
        raise ValueError("(ldwork == work.shape[0]) not satisifed")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_direct[0] = fw_aschar(direct)
    if fw_direct[0] == 0:
        raise ValueError("len(direct) != 1")
    fw_storev[0] = fw_aschar(storev)
    if fw_storev[0] == 0:
        raise ValueError("len(storev) != 1")
    {{fc_name}}(fw_side, fw_trans, fw_direct, fw_storev, &m, &n, &k, &l, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &ldwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, fw_direct, fw_storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slarzt_c', 'dlarzt_c', 'clarzt_c', 'zlarzt_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slarzt', 'dlarzt', 'clarzt', 'zlarzt'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object direct, object storev, fwi_integer_t n, fwi_integer_t k, object v, fwi_integer_t ldv, object tau, object t, fwi_integer_t ldt):
    """{{name}}(direct, storev, n, k, v, ldv, tau, t, ldt[, direct, storev, n, k, v, ldv, tau, t, ldt]) -> (direct, storev, n, k, v, ldv, tau, t, ldt)

    Parameters
    ----------
    direct : object_, intent inout
    storev : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout

    Returns
    -------
    direct : object_, intent inout
    storev : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout

    """
    cdef char *fw_direct = [0, 0]
    cdef char *fw_storev = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    fw_direct[0] = fw_aschar(direct)
    if fw_direct[0] == 0:
        raise ValueError("len(direct) != 1")
    fw_storev[0] = fw_aschar(storev)
    if fw_storev[0] == 0:
        raise ValueError("len(storev) != 1")
    {{fc_name}}(fw_direct, fw_storev, &n, &k, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_direct, fw_storev, n, k, v, ldv, tau, t, ldt,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slas2_c', 'dlas2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slas2', 'dlas2'])}}
cpdef api object {{name}}({{ktp}} f, {{ktp}} g, {{ktp}} h, {{ktp}} ssmin, {{ktp}} ssmax):
    """{{name}}(f, g, h, ssmin, ssmax[, f, g, h, ssmin, ssmax]) -> (f, g, h, ssmin, ssmax)

    Parameters
    ----------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    h : {{ktp}}_, intent inout
    ssmin : {{ktp}}_, intent inout
    ssmax : {{ktp}}_, intent inout

    Returns
    -------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    h : {{ktp}}_, intent inout
    ssmin : {{ktp}}_, intent inout
    ssmax : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&f, &g, &h, &ssmin, &ssmax, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (f, g, h, ssmin, ssmax,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slascl_c', 'dlascl_c', 'clascl_c', 'zlascl_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slascl', 'dlascl', 'clascl', 'zlascl'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object type, fwi_integer_t kl, fwi_integer_t ku, {{ktp}} cfrom, {{ktp}} cto, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(type, kl, ku, cfrom, cto, m, n, a, lda, info[, type, kl, ku, cfrom, cto, m, n, a, lda, info]) -> (type, kl, ku, cfrom, cto, m, n, a, lda, info)

    Parameters
    ----------
    type : object_, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    cfrom : {{ktp}}_, intent inout
    cto : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    type : object_, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    cfrom : {{ktp}}_, intent inout
    cto : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_type = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_type[0] = fw_aschar(type)
    if fw_type[0] == 0:
        raise ValueError("len(type) != 1")
    {{fc_name}}(fw_type, &kl, &ku, &cfrom, &cto, &m, &n, a_shape_, <{{ktp2}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_type, kl, ku, cfrom, cto, m, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slascl2_c', 'dlascl2_c', 'clascl2_c', 'zlascl2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slascl2', 'dlascl2', 'clascl2', 'zlascl2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object d, object x, fwi_integer_t ldx):
    """{{name}}(m, n, d, x, ldx[, m, n, d, x, ldx]) -> (m, n, d, x, ldx)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp2}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp2}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum2}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    {{fc_name}}(&m, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), x_shape_, <{{ktp2}}*>np.PyArray_DATA(x_), &ldx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, d, x, ldx,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd0_c', 'dlasd0_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd0', 'dlasd0'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t sqre, object d, object e, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, fwi_integer_t smlsiz, object iwork, object work, fwi_integer_t info):
    """{{name}}(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info[, n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info]) -> (n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    smlsiz : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    smlsiz : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &sqre, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), &ldvt, &smlsiz, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd1_c', 'dlasd1_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd1', 'dlasd1'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t nl, fwi_integer_t nr, fwi_integer_t sqre, object d, {{ktp}} alpha, {{ktp}} beta, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object idxq, object iwork, object work, fwi_integer_t info):
    """{{name}}(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info[, nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info]) -> (nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info)

    Parameters
    ----------
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray idxq_
    cdef fw_shape_t idxq_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    idxq_, idxq = fw_asfortranarray(idxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxq_shape_, np.PyArray_DIMS(idxq_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&nl, &nr, &sqre, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), &alpha, &beta, u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), &ldvt, idxq_shape_, <fwi_integer_t*>np.PyArray_DATA(idxq_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd2_c', 'dlasd2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd2', 'dlasd2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t nl, fwi_integer_t nr, fwi_integer_t sqre, fwi_integer_t k, object d, object z, {{ktp}} alpha, {{ktp}} beta, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object dsigma, object u2, fwi_integer_t ldu2, object vt2, fwi_integer_t ldvt2, object idxp, object idx, object idxc, object idxq, object coltyp, fwi_integer_t info):
    """{{name}}(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info[, nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info]) -> (nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info)

    Parameters
    ----------
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    vt2 : {{ktp}}_, 2D array, dimension(ldvt2, *), intent inout
    ldvt2 : fwi_integer, intent inout
    idxp : fwi_integer, 1D array, dimension(*), intent inout
    idx : fwi_integer, 1D array, dimension(*), intent inout
    idxc : fwi_integer, 1D array, dimension(*), intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    coltyp : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    vt2 : {{ktp}}_, 2D array, dimension(ldvt2, *), intent inout
    ldvt2 : fwi_integer, intent inout
    idxp : fwi_integer, 1D array, dimension(*), intent inout
    idx : fwi_integer, 1D array, dimension(*), intent inout
    idxc : fwi_integer, 1D array, dimension(*), intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    coltyp : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray dsigma_
    cdef fw_shape_t dsigma_shape_[1]
    cdef np.ndarray u2_
    cdef fw_shape_t u2_shape_[2]
    cdef np.ndarray vt2_
    cdef fw_shape_t vt2_shape_[2]
    cdef np.ndarray idxp_
    cdef fw_shape_t idxp_shape_[1]
    cdef np.ndarray idx_
    cdef fw_shape_t idx_shape_[1]
    cdef np.ndarray idxc_
    cdef fw_shape_t idxc_shape_[1]
    cdef np.ndarray idxq_
    cdef fw_shape_t idxq_shape_[1]
    cdef np.ndarray coltyp_
    cdef fw_shape_t coltyp_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    dsigma_, dsigma = fw_asfortranarray(dsigma, {{npy_enum}}, 1, False)
    fw_copyshape(dsigma_shape_, np.PyArray_DIMS(dsigma_), 1)
    u2_, u2 = fw_asfortranarray(u2, {{npy_enum}}, 2, False)
    fw_copyshape(u2_shape_, np.PyArray_DIMS(u2_), 2)
    if ldu2 != u2_shape_[0]:
        raise ValueError("(ldu2 == u2.shape[0]) not satisifed")
    vt2_, vt2 = fw_asfortranarray(vt2, {{npy_enum}}, 2, False)
    fw_copyshape(vt2_shape_, np.PyArray_DIMS(vt2_), 2)
    if ldvt2 != vt2_shape_[0]:
        raise ValueError("(ldvt2 == vt2.shape[0]) not satisifed")
    idxp_, idxp = fw_asfortranarray(idxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxp_shape_, np.PyArray_DIMS(idxp_), 1)
    idx_, idx = fw_asfortranarray(idx, fwi_integer_t_enum, 1, False)
    fw_copyshape(idx_shape_, np.PyArray_DIMS(idx_), 1)
    idxc_, idxc = fw_asfortranarray(idxc, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxc_shape_, np.PyArray_DIMS(idxc_), 1)
    idxq_, idxq = fw_asfortranarray(idxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxq_shape_, np.PyArray_DIMS(idxq_), 1)
    coltyp_, coltyp = fw_asfortranarray(coltyp, fwi_integer_t_enum, 1, False)
    fw_copyshape(coltyp_shape_, np.PyArray_DIMS(coltyp_), 1)
    {{fc_name}}(&nl, &nr, &sqre, &k, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &alpha, &beta, u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), &ldvt, dsigma_shape_, <{{ktp}}*>np.PyArray_DATA(dsigma_), u2_shape_, <{{ktp}}*>np.PyArray_DATA(u2_), &ldu2, vt2_shape_, <{{ktp}}*>np.PyArray_DATA(vt2_), &ldvt2, idxp_shape_, <fwi_integer_t*>np.PyArray_DATA(idxp_), idx_shape_, <fwi_integer_t*>np.PyArray_DATA(idx_), idxc_shape_, <fwi_integer_t*>np.PyArray_DATA(idxc_), idxq_shape_, <fwi_integer_t*>np.PyArray_DATA(idxq_), coltyp_shape_, <fwi_integer_t*>np.PyArray_DATA(coltyp_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd3_c', 'dlasd3_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd3', 'dlasd3'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t nl, fwi_integer_t nr, fwi_integer_t sqre, fwi_integer_t k, object d, object q, fwi_integer_t ldq, object dsigma, object u, fwi_integer_t ldu, object u2, fwi_integer_t ldu2, object vt, fwi_integer_t ldvt, object vt2, fwi_integer_t ldvt2, object idxc, object ctot, object z, fwi_integer_t info):
    """{{name}}(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info[, nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info]) -> (nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info)

    Parameters
    ----------
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    vt2 : {{ktp}}_, 2D array, dimension(ldvt2, *), intent inout
    ldvt2 : fwi_integer, intent inout
    idxc : fwi_integer, 1D array, dimension(*), intent inout
    ctot : fwi_integer, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    vt2 : {{ktp}}_, 2D array, dimension(ldvt2, *), intent inout
    ldvt2 : fwi_integer, intent inout
    idxc : fwi_integer, 1D array, dimension(*), intent inout
    ctot : fwi_integer, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray dsigma_
    cdef fw_shape_t dsigma_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray u2_
    cdef fw_shape_t u2_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray vt2_
    cdef fw_shape_t vt2_shape_[2]
    cdef np.ndarray idxc_
    cdef fw_shape_t idxc_shape_[1]
    cdef np.ndarray ctot_
    cdef fw_shape_t ctot_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    dsigma_, dsigma = fw_asfortranarray(dsigma, {{npy_enum}}, 1, False)
    fw_copyshape(dsigma_shape_, np.PyArray_DIMS(dsigma_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    u2_, u2 = fw_asfortranarray(u2, {{npy_enum}}, 2, False)
    fw_copyshape(u2_shape_, np.PyArray_DIMS(u2_), 2)
    if ldu2 != u2_shape_[0]:
        raise ValueError("(ldu2 == u2.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    vt2_, vt2 = fw_asfortranarray(vt2, {{npy_enum}}, 2, False)
    fw_copyshape(vt2_shape_, np.PyArray_DIMS(vt2_), 2)
    if ldvt2 != vt2_shape_[0]:
        raise ValueError("(ldvt2 == vt2.shape[0]) not satisifed")
    idxc_, idxc = fw_asfortranarray(idxc, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxc_shape_, np.PyArray_DIMS(idxc_), 1)
    ctot_, ctot = fw_asfortranarray(ctot, fwi_integer_t_enum, 1, False)
    fw_copyshape(ctot_shape_, np.PyArray_DIMS(ctot_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{fc_name}}(&nl, &nr, &sqre, &k, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, dsigma_shape_, <{{ktp}}*>np.PyArray_DATA(dsigma_), u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, u2_shape_, <{{ktp}}*>np.PyArray_DATA(u2_), &ldu2, vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), &ldvt, vt2_shape_, <{{ktp}}*>np.PyArray_DATA(vt2_), &ldvt2, idxc_shape_, <fwi_integer_t*>np.PyArray_DATA(idxc_), ctot_shape_, <fwi_integer_t*>np.PyArray_DATA(ctot_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd4_c', 'dlasd4_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd4', 'dlasd4'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t i, object d, object z, object delta, {{ktp}} rho, {{ktp}} sigma, object work, fwi_integer_t info):
    """{{name}}(n, i, d, z, delta, rho, sigma, work, info[, n, i, d, z, delta, rho, sigma, work, info]) -> (n, i, d, z, delta, rho, sigma, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    delta : {{ktp}}_, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    delta : {{ktp}}_, 1D array, dimension(*), intent inout
    rho : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray delta_
    cdef fw_shape_t delta_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    delta_, delta = fw_asfortranarray(delta, {{npy_enum}}, 1, False)
    fw_copyshape(delta_shape_, np.PyArray_DIMS(delta_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &i, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), delta_shape_, <{{ktp}}*>np.PyArray_DATA(delta_), &rho, &sigma, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, i, d, z, delta, rho, sigma, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd5_c', 'dlasd5_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd5', 'dlasd5'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t i, object d, object z, object delta, {{ktp}} rho, {{ktp}} dsigma, object work):
    """{{name}}(i, d, z, delta, rho, dsigma, work[, i, d, z, delta, rho, dsigma, work]) -> (i, d, z, delta, rho, dsigma, work)

    Parameters
    ----------
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(2), intent inout
    z : {{ktp}}_, 1D array, dimension(2), intent inout
    delta : {{ktp}}_, 1D array, dimension(2), intent inout
    rho : {{ktp}}_, intent inout
    dsigma : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(2), intent inout

    Returns
    -------
    i : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(2), intent inout
    z : {{ktp}}_, 1D array, dimension(2), intent inout
    delta : {{ktp}}_, 1D array, dimension(2), intent inout
    rho : {{ktp}}_, intent inout
    dsigma : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(2), intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray delta_
    cdef fw_shape_t delta_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    if not (0 <= 2 <= d_shape_[0]):
        raise ValueError("(0 <= 2 <= d.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    if not (0 <= 2 <= z_shape_[0]):
        raise ValueError("(0 <= 2 <= z.shape[0]) not satisifed")
    delta_, delta = fw_asfortranarray(delta, {{npy_enum}}, 1, False)
    fw_copyshape(delta_shape_, np.PyArray_DIMS(delta_), 1)
    if not (0 <= 2 <= delta_shape_[0]):
        raise ValueError("(0 <= 2 <= delta.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    if not (0 <= 2 <= work_shape_[0]):
        raise ValueError("(0 <= 2 <= work.shape[0]) not satisifed")
    {{fc_name}}(&i, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), delta_shape_, <{{ktp}}*>np.PyArray_DATA(delta_), &rho, &dsigma, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (i, d, z, delta, rho, dsigma, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd6_c', 'dlasd6_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd6', 'dlasd6'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t icompq, fwi_integer_t nl, fwi_integer_t nr, fwi_integer_t sqre, object d, object vf, object vl, {{ktp}} alpha, {{ktp}} beta, object idxq, object perm, fwi_integer_t givptr, object givcol, fwi_integer_t ldgcol, object givnum, fwi_integer_t ldgnum, object poles, object difl, object difr, object z, fwi_integer_t k, {{ktp}} c, {{ktp}} s, object work, object iwork, fwi_integer_t info):
    """{{name}}(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info[, icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info]) -> (icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    vf : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    givnum : {{ktp}}_, 2D array, dimension(ldgnum, *), intent inout
    ldgnum : fwi_integer, intent inout
    poles : {{ktp}}_, 2D array, dimension(ldgnum, *), intent inout
    difl : {{ktp}}_, 1D array, dimension(*), intent inout
    difr : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    k : fwi_integer, intent inout
    c : {{ktp}}_, intent inout
    s : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    vf : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    givnum : {{ktp}}_, 2D array, dimension(ldgnum, *), intent inout
    ldgnum : fwi_integer, intent inout
    poles : {{ktp}}_, 2D array, dimension(ldgnum, *), intent inout
    difl : {{ktp}}_, 1D array, dimension(*), intent inout
    difr : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    k : fwi_integer, intent inout
    c : {{ktp}}_, intent inout
    s : {{ktp}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray vf_
    cdef fw_shape_t vf_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[1]
    cdef np.ndarray idxq_
    cdef fw_shape_t idxq_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray poles_
    cdef fw_shape_t poles_shape_[2]
    cdef np.ndarray difl_
    cdef fw_shape_t difl_shape_[1]
    cdef np.ndarray difr_
    cdef fw_shape_t difr_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    vf_, vf = fw_asfortranarray(vf, {{npy_enum}}, 1, False)
    fw_copyshape(vf_shape_, np.PyArray_DIMS(vf_), 1)
    vl_, vl = fw_asfortranarray(vl, {{npy_enum}}, 1, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 1)
    idxq_, idxq = fw_asfortranarray(idxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxq_shape_, np.PyArray_DIMS(idxq_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if ldgcol != givcol_shape_[0]:
        raise ValueError("(ldgcol == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, {{npy_enum}}, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if ldgnum != givnum_shape_[0]:
        raise ValueError("(ldgnum == givnum.shape[0]) not satisifed")
    poles_, poles = fw_asfortranarray(poles, {{npy_enum}}, 2, False)
    fw_copyshape(poles_shape_, np.PyArray_DIMS(poles_), 2)
    if ldgnum != poles_shape_[0]:
        raise ValueError("(ldgnum == poles.shape[0]) not satisifed")
    difl_, difl = fw_asfortranarray(difl, {{npy_enum}}, 1, False)
    fw_copyshape(difl_shape_, np.PyArray_DIMS(difl_), 1)
    difr_, difr = fw_asfortranarray(difr, {{npy_enum}}, 1, False)
    fw_copyshape(difr_shape_, np.PyArray_DIMS(difr_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&icompq, &nl, &nr, &sqre, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), vf_shape_, <{{ktp}}*>np.PyArray_DATA(vf_), vl_shape_, <{{ktp}}*>np.PyArray_DATA(vl_), &alpha, &beta, idxq_shape_, <fwi_integer_t*>np.PyArray_DATA(idxq_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), &ldgcol, givnum_shape_, <{{ktp}}*>np.PyArray_DATA(givnum_), &ldgnum, poles_shape_, <{{ktp}}*>np.PyArray_DATA(poles_), difl_shape_, <{{ktp}}*>np.PyArray_DATA(difl_), difr_shape_, <{{ktp}}*>np.PyArray_DATA(difr_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &k, &c, &s, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd7_c', 'dlasd7_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd7', 'dlasd7'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t icompq, fwi_integer_t nl, fwi_integer_t nr, fwi_integer_t sqre, fwi_integer_t k, object d, object z, object zw, object vf, object vfw, object vl, object vlw, {{ktp}} alpha, {{ktp}} beta, object dsigma, object idx, object idxp, object idxq, object perm, fwi_integer_t givptr, object givcol, fwi_integer_t ldgcol, object givnum, fwi_integer_t ldgnum, {{ktp}} c, {{ktp}} s, fwi_integer_t info):
    """{{name}}(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info[, icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info]) -> (icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    zw : {{ktp}}_, 1D array, dimension(*), intent inout
    vf : {{ktp}}_, 1D array, dimension(*), intent inout
    vfw : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, 1D array, dimension(*), intent inout
    vlw : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    idx : fwi_integer, 1D array, dimension(*), intent inout
    idxp : fwi_integer, 1D array, dimension(*), intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    givnum : {{ktp}}_, 2D array, dimension(ldgnum, *), intent inout
    ldgnum : fwi_integer, intent inout
    c : {{ktp}}_, intent inout
    s : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    nl : fwi_integer, intent inout
    nr : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    zw : {{ktp}}_, 1D array, dimension(*), intent inout
    vf : {{ktp}}_, 1D array, dimension(*), intent inout
    vfw : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, 1D array, dimension(*), intent inout
    vlw : {{ktp}}_, 1D array, dimension(*), intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    idx : fwi_integer, 1D array, dimension(*), intent inout
    idxp : fwi_integer, 1D array, dimension(*), intent inout
    idxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    givnum : {{ktp}}_, 2D array, dimension(ldgnum, *), intent inout
    ldgnum : fwi_integer, intent inout
    c : {{ktp}}_, intent inout
    s : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray zw_
    cdef fw_shape_t zw_shape_[1]
    cdef np.ndarray vf_
    cdef fw_shape_t vf_shape_[1]
    cdef np.ndarray vfw_
    cdef fw_shape_t vfw_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[1]
    cdef np.ndarray vlw_
    cdef fw_shape_t vlw_shape_[1]
    cdef np.ndarray dsigma_
    cdef fw_shape_t dsigma_shape_[1]
    cdef np.ndarray idx_
    cdef fw_shape_t idx_shape_[1]
    cdef np.ndarray idxp_
    cdef fw_shape_t idxp_shape_[1]
    cdef np.ndarray idxq_
    cdef fw_shape_t idxq_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    zw_, zw = fw_asfortranarray(zw, {{npy_enum}}, 1, False)
    fw_copyshape(zw_shape_, np.PyArray_DIMS(zw_), 1)
    vf_, vf = fw_asfortranarray(vf, {{npy_enum}}, 1, False)
    fw_copyshape(vf_shape_, np.PyArray_DIMS(vf_), 1)
    vfw_, vfw = fw_asfortranarray(vfw, {{npy_enum}}, 1, False)
    fw_copyshape(vfw_shape_, np.PyArray_DIMS(vfw_), 1)
    vl_, vl = fw_asfortranarray(vl, {{npy_enum}}, 1, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 1)
    vlw_, vlw = fw_asfortranarray(vlw, {{npy_enum}}, 1, False)
    fw_copyshape(vlw_shape_, np.PyArray_DIMS(vlw_), 1)
    dsigma_, dsigma = fw_asfortranarray(dsigma, {{npy_enum}}, 1, False)
    fw_copyshape(dsigma_shape_, np.PyArray_DIMS(dsigma_), 1)
    idx_, idx = fw_asfortranarray(idx, fwi_integer_t_enum, 1, False)
    fw_copyshape(idx_shape_, np.PyArray_DIMS(idx_), 1)
    idxp_, idxp = fw_asfortranarray(idxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxp_shape_, np.PyArray_DIMS(idxp_), 1)
    idxq_, idxq = fw_asfortranarray(idxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(idxq_shape_, np.PyArray_DIMS(idxq_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if ldgcol != givcol_shape_[0]:
        raise ValueError("(ldgcol == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, {{npy_enum}}, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if ldgnum != givnum_shape_[0]:
        raise ValueError("(ldgnum == givnum.shape[0]) not satisifed")
    {{fc_name}}(&icompq, &nl, &nr, &sqre, &k, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), zw_shape_, <{{ktp}}*>np.PyArray_DATA(zw_), vf_shape_, <{{ktp}}*>np.PyArray_DATA(vf_), vfw_shape_, <{{ktp}}*>np.PyArray_DATA(vfw_), vl_shape_, <{{ktp}}*>np.PyArray_DATA(vl_), vlw_shape_, <{{ktp}}*>np.PyArray_DATA(vlw_), &alpha, &beta, dsigma_shape_, <{{ktp}}*>np.PyArray_DATA(dsigma_), idx_shape_, <fwi_integer_t*>np.PyArray_DATA(idx_), idxp_shape_, <fwi_integer_t*>np.PyArray_DATA(idxp_), idxq_shape_, <fwi_integer_t*>np.PyArray_DATA(idxq_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), &ldgcol, givnum_shape_, <{{ktp}}*>np.PyArray_DATA(givnum_), &ldgnum, &c, &s, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasd8_c', 'dlasd8_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasd8', 'dlasd8'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t icompq, fwi_integer_t k, object d, object z, object vf, object vl, object difl, object difr, fwi_integer_t lddifr, object dsigma, object work, fwi_integer_t info):
    """{{name}}(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info[, icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info]) -> (icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    vf : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, 1D array, dimension(*), intent inout
    difl : {{ktp}}_, 1D array, dimension(*), intent inout
    difr : {{ktp}}_, 2D array, dimension(lddifr, *), intent inout
    lddifr : fwi_integer, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    k : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    vf : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, 1D array, dimension(*), intent inout
    difl : {{ktp}}_, 1D array, dimension(*), intent inout
    difr : {{ktp}}_, 2D array, dimension(lddifr, *), intent inout
    lddifr : fwi_integer, intent inout
    dsigma : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray vf_
    cdef fw_shape_t vf_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[1]
    cdef np.ndarray difl_
    cdef fw_shape_t difl_shape_[1]
    cdef np.ndarray difr_
    cdef fw_shape_t difr_shape_[2]
    cdef np.ndarray dsigma_
    cdef fw_shape_t dsigma_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    vf_, vf = fw_asfortranarray(vf, {{npy_enum}}, 1, False)
    fw_copyshape(vf_shape_, np.PyArray_DIMS(vf_), 1)
    vl_, vl = fw_asfortranarray(vl, {{npy_enum}}, 1, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 1)
    difl_, difl = fw_asfortranarray(difl, {{npy_enum}}, 1, False)
    fw_copyshape(difl_shape_, np.PyArray_DIMS(difl_), 1)
    difr_, difr = fw_asfortranarray(difr, {{npy_enum}}, 2, False)
    fw_copyshape(difr_shape_, np.PyArray_DIMS(difr_), 2)
    if lddifr != difr_shape_[0]:
        raise ValueError("(lddifr == difr.shape[0]) not satisifed")
    dsigma_, dsigma = fw_asfortranarray(dsigma, {{npy_enum}}, 1, False)
    fw_copyshape(dsigma_shape_, np.PyArray_DIMS(dsigma_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&icompq, &k, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), vf_shape_, <{{ktp}}*>np.PyArray_DATA(vf_), vl_shape_, <{{ktp}}*>np.PyArray_DATA(vl_), difl_shape_, <{{ktp}}*>np.PyArray_DATA(difl_), difr_shape_, <{{ktp}}*>np.PyArray_DATA(difr_), &lddifr, dsigma_shape_, <{{ktp}}*>np.PyArray_DATA(dsigma_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasda_c', 'dlasda_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasda', 'dlasda'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t icompq, fwi_integer_t smlsiz, fwi_integer_t n, fwi_integer_t sqre, object d, object e, object u, fwi_integer_t ldu, object vt, object k, object difl, object difr, object z, object poles, object givptr, object givcol, fwi_integer_t ldgcol, object perm, object givnum, object c, object s, object work, object iwork, fwi_integer_t info):
    """{{name}}(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info[, icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info]) -> (icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info)

    Parameters
    ----------
    icompq : fwi_integer, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout
    difl : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    difr : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    z : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    poles : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    perm : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    givnum : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    icompq : fwi_integer, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    sqre : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    k : fwi_integer, 1D array, dimension(*), intent inout
    difl : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    difr : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    z : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    poles : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    ldgcol : fwi_integer, intent inout
    perm : fwi_integer, 2D array, dimension(ldgcol, *), intent inout
    givnum : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray k_
    cdef fw_shape_t k_shape_[1]
    cdef np.ndarray difl_
    cdef fw_shape_t difl_shape_[2]
    cdef np.ndarray difr_
    cdef fw_shape_t difr_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray poles_
    cdef fw_shape_t poles_shape_[2]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldu != vt_shape_[0]:
        raise ValueError("(ldu == vt.shape[0]) not satisifed")
    k_, k = fw_asfortranarray(k, fwi_integer_t_enum, 1, False)
    fw_copyshape(k_shape_, np.PyArray_DIMS(k_), 1)
    difl_, difl = fw_asfortranarray(difl, {{npy_enum}}, 2, False)
    fw_copyshape(difl_shape_, np.PyArray_DIMS(difl_), 2)
    if ldu != difl_shape_[0]:
        raise ValueError("(ldu == difl.shape[0]) not satisifed")
    difr_, difr = fw_asfortranarray(difr, {{npy_enum}}, 2, False)
    fw_copyshape(difr_shape_, np.PyArray_DIMS(difr_), 2)
    if ldu != difr_shape_[0]:
        raise ValueError("(ldu == difr.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldu != z_shape_[0]:
        raise ValueError("(ldu == z.shape[0]) not satisifed")
    poles_, poles = fw_asfortranarray(poles, {{npy_enum}}, 2, False)
    fw_copyshape(poles_shape_, np.PyArray_DIMS(poles_), 2)
    if ldu != poles_shape_[0]:
        raise ValueError("(ldu == poles.shape[0]) not satisifed")
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if ldgcol != givcol_shape_[0]:
        raise ValueError("(ldgcol == givcol.shape[0]) not satisifed")
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 2, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 2)
    if ldgcol != perm_shape_[0]:
        raise ValueError("(ldgcol == perm.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, {{npy_enum}}, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if ldu != givnum_shape_[0]:
        raise ValueError("(ldu == givnum.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    {{fc_name}}(&icompq, &smlsiz, &n, &sqre, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), k_shape_, <fwi_integer_t*>np.PyArray_DATA(k_), difl_shape_, <{{ktp}}*>np.PyArray_DATA(difl_), difr_shape_, <{{ktp}}*>np.PyArray_DATA(difr_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), poles_shape_, <{{ktp}}*>np.PyArray_DATA(poles_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), &ldgcol, perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givnum_shape_, <{{ktp}}*>np.PyArray_DATA(givnum_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), s_shape_, <{{ktp}}*>np.PyArray_DATA(s_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasdq_c', 'dlasdq_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasdq', 'dlasdq'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t sqre, fwi_integer_t n, fwi_integer_t ncvt, fwi_integer_t nru, fwi_integer_t ncc, object d, object e, object vt, fwi_integer_t ldvt, object u, fwi_integer_t ldu, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info[, uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info]) -> (uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    sqre : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncvt : fwi_integer, intent inout
    nru : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    sqre : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncvt : fwi_integer, intent inout
    nru : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vt : {{ktp}}_, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    vt_, vt = fw_asfortranarray(vt, {{npy_enum}}, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &sqre, &n, &ncvt, &nru, &ncc, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), vt_shape_, <{{ktp}}*>np.PyArray_DATA(vt_), &ldvt, u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info,)
{{endfor}}


{{for fc_name, name
      in zip(['slasdt_c', 'dlasdt_c'],
             ['slasdt', 'dlasdt'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t lvl, fwi_integer_t nd, object inode, object ndiml, object ndimr, fwi_integer_t msub):
    """{{name}}(n, lvl, nd, inode, ndiml, ndimr, msub[, n, lvl, nd, inode, ndiml, ndimr, msub]) -> (n, lvl, nd, inode, ndiml, ndimr, msub)

    Parameters
    ----------
    n : fwi_integer, intent inout
    lvl : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    inode : fwi_integer, 1D array, dimension(*), intent inout
    ndiml : fwi_integer, 1D array, dimension(*), intent inout
    ndimr : fwi_integer, 1D array, dimension(*), intent inout
    msub : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    lvl : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    inode : fwi_integer, 1D array, dimension(*), intent inout
    ndiml : fwi_integer, 1D array, dimension(*), intent inout
    ndimr : fwi_integer, 1D array, dimension(*), intent inout
    msub : fwi_integer, intent inout

    """
    cdef np.ndarray inode_
    cdef fw_shape_t inode_shape_[1]
    cdef np.ndarray ndiml_
    cdef fw_shape_t ndiml_shape_[1]
    cdef np.ndarray ndimr_
    cdef fw_shape_t ndimr_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    inode_, inode = fw_asfortranarray(inode, fwi_integer_t_enum, 1, False)
    fw_copyshape(inode_shape_, np.PyArray_DIMS(inode_), 1)
    ndiml_, ndiml = fw_asfortranarray(ndiml, fwi_integer_t_enum, 1, False)
    fw_copyshape(ndiml_shape_, np.PyArray_DIMS(ndiml_), 1)
    ndimr_, ndimr = fw_asfortranarray(ndimr, fwi_integer_t_enum, 1, False)
    fw_copyshape(ndimr_shape_, np.PyArray_DIMS(ndimr_), 1)
    {{fc_name}}(&n, &lvl, &nd, inode_shape_, <fwi_integer_t*>np.PyArray_DATA(inode_), ndiml_shape_, <fwi_integer_t*>np.PyArray_DATA(ndiml_), ndimr_shape_, <fwi_integer_t*>np.PyArray_DATA(ndimr_), &msub, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, lvl, nd, inode, ndiml, ndimr, msub,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaset_c', 'dlaset_c', 'claset_c', 'zlaset_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slaset', 'dlaset', 'claset', 'zlaset'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t m, fwi_integer_t n, {{ktp}} alpha, {{ktp}} beta, object a, fwi_integer_t lda):
    """{{name}}(uplo, m, n, alpha, beta, a, lda[, uplo, m, n, alpha, beta, a, lda]) -> (uplo, m, n, alpha, beta, a, lda)

    Parameters
    ----------
    uplo : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    beta : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &m, &n, &alpha, &beta, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, m, n, alpha, beta, a, lda,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasq1_c', 'dlasq1_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasq1', 'dlasq1'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, object work, fwi_integer_t info):
    """{{name}}(n, d, e, work, info[, n, d, e, work, info]) -> (n, d, e, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasq2_c', 'dlasq2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasq2', 'dlasq2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object z, fwi_integer_t info):
    """{{name}}(n, z, info[, n, z, info]) -> (n, z, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{fc_name}}(&n, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, z, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasq3_c', 'dlasq3_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasq3', 'dlasq3'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t i0, fwi_integer_t n0, object z, fwi_integer_t pp, {{ktp}} dmin, {{ktp}} sigma, {{ktp}} desig, {{ktp}} qmax, fwi_integer_t nfail, fwi_integer_t iter, fwi_integer_t ndiv, fwl_logical_t ieee, fwi_integer_t ttype, {{ktp}} dmin1, {{ktp}} dmin2, {{ktp}} dn, {{ktp}} dn1, {{ktp}} dn2, {{ktp}} g, {{ktp}} tau):
    """{{name}}(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau[, i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau]) -> (i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau)

    Parameters
    ----------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    dmin : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    desig : {{ktp}}_, intent inout
    qmax : {{ktp}}_, intent inout
    nfail : fwi_integer, intent inout
    iter : fwi_integer, intent inout
    ndiv : fwi_integer, intent inout
    ieee : fwl_logical, intent inout
    ttype : fwi_integer, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dn1 : {{ktp}}_, intent inout
    dn2 : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    tau : {{ktp}}_, intent inout

    Returns
    -------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    dmin : {{ktp}}_, intent inout
    sigma : {{ktp}}_, intent inout
    desig : {{ktp}}_, intent inout
    qmax : {{ktp}}_, intent inout
    nfail : fwi_integer, intent inout
    iter : fwi_integer, intent inout
    ndiv : fwi_integer, intent inout
    ieee : fwl_logical, intent inout
    ttype : fwi_integer, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dn1 : {{ktp}}_, intent inout
    dn2 : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    tau : {{ktp}}_, intent inout

    """
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{fc_name}}(&i0, &n0, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &pp, &dmin, &sigma, &desig, &qmax, &nfail, &iter, &ndiv, &ieee, &ttype, &dmin1, &dmin2, &dn, &dn1, &dn2, &g, &tau, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasq4_c', 'dlasq4_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasq4', 'dlasq4'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t i0, fwi_integer_t n0, object z, fwi_integer_t pp, fwi_integer_t n0in, {{ktp}} dmin, {{ktp}} dmin1, {{ktp}} dmin2, {{ktp}} dn, {{ktp}} dn1, {{ktp}} dn2, {{ktp}} tau, fwi_integer_t ttype, {{ktp}} g):
    """{{name}}(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g[, i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g]) -> (i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g)

    Parameters
    ----------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    n0in : fwi_integer, intent inout
    dmin : {{ktp}}_, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dn1 : {{ktp}}_, intent inout
    dn2 : {{ktp}}_, intent inout
    tau : {{ktp}}_, intent inout
    ttype : fwi_integer, intent inout
    g : {{ktp}}_, intent inout

    Returns
    -------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    n0in : fwi_integer, intent inout
    dmin : {{ktp}}_, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dn1 : {{ktp}}_, intent inout
    dn2 : {{ktp}}_, intent inout
    tau : {{ktp}}_, intent inout
    ttype : fwi_integer, intent inout
    g : {{ktp}}_, intent inout

    """
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{fc_name}}(&i0, &n0, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &pp, &n0in, &dmin, &dmin1, &dmin2, &dn, &dn1, &dn2, &tau, &ttype, &g, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasq5_c', 'dlasq5_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasq5', 'dlasq5'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t i0, fwi_integer_t n0, object z, fwi_integer_t pp, {{ktp}} tau, {{ktp}} dmin, {{ktp}} dmin1, {{ktp}} dmin2, {{ktp}} dn, {{ktp}} dnm1, {{ktp}} dnm2, fwl_logical_t ieee):
    """{{name}}(i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee[, i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee]) -> (i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee)

    Parameters
    ----------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    dmin : {{ktp}}_, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dnm1 : {{ktp}}_, intent inout
    dnm2 : {{ktp}}_, intent inout
    ieee : fwl_logical, intent inout

    Returns
    -------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    dmin : {{ktp}}_, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dnm1 : {{ktp}}_, intent inout
    dnm2 : {{ktp}}_, intent inout
    ieee : fwl_logical, intent inout

    """
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{fc_name}}(&i0, &n0, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &pp, &tau, &dmin, &dmin1, &dmin2, &dn, &dnm1, &dnm2, &ieee, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasq6_c', 'dlasq6_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasq6', 'dlasq6'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t i0, fwi_integer_t n0, object z, fwi_integer_t pp, {{ktp}} dmin, {{ktp}} dmin1, {{ktp}} dmin2, {{ktp}} dn, {{ktp}} dnm1, {{ktp}} dnm2):
    """{{name}}(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2[, i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2]) -> (i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2)

    Parameters
    ----------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    dmin : {{ktp}}_, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dnm1 : {{ktp}}_, intent inout
    dnm2 : {{ktp}}_, intent inout

    Returns
    -------
    i0 : fwi_integer, intent inout
    n0 : fwi_integer, intent inout
    z : {{ktp}}_, 1D array, dimension(*), intent inout
    pp : fwi_integer, intent inout
    dmin : {{ktp}}_, intent inout
    dmin1 : {{ktp}}_, intent inout
    dmin2 : {{ktp}}_, intent inout
    dn : {{ktp}}_, intent inout
    dnm1 : {{ktp}}_, intent inout
    dnm2 : {{ktp}}_, intent inout

    """
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    {{fc_name}}(&i0, &n0, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &pp, &dmin, &dmin1, &dmin2, &dn, &dnm1, &dnm2, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slasr_c', 'dlasr_c', 'clasr_c', 'zlasr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slasr', 'dlasr', 'clasr', 'zlasr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, object pivot, object direct, fwi_integer_t m, fwi_integer_t n, object c, object s, object a, fwi_integer_t lda):
    """{{name}}(side, pivot, direct, m, n, c, s, a, lda[, side, pivot, direct, m, n, c, s, a, lda]) -> (side, pivot, direct, m, n, c, s, a, lda)

    Parameters
    ----------
    side : object_, intent inout
    pivot : object_, intent inout
    direct : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    pivot : object_, intent inout
    direct : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp}}_, 1D array, dimension(*), intent inout
    a : {{ktp2}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_pivot = [0, 0]
    cdef char *fw_direct = [0, 0]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    a_, a = fw_asfortranarray(a, {{npy_enum2}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_pivot[0] = fw_aschar(pivot)
    if fw_pivot[0] == 0:
        raise ValueError("len(pivot) != 1")
    fw_direct[0] = fw_aschar(direct)
    if fw_direct[0] == 0:
        raise ValueError("len(direct) != 1")
    {{fc_name}}(fw_side, fw_pivot, fw_direct, &m, &n, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), s_shape_, <{{ktp}}*>np.PyArray_DATA(s_), a_shape_, <{{ktp2}}*>np.PyArray_DATA(a_), &lda, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_pivot, fw_direct, m, n, c, s, a, lda,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasrt_c', 'dlasrt_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasrt', 'dlasrt'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object id, fwi_integer_t n, object d, fwi_integer_t info):
    """{{name}}(id, n, d, info[, id, n, d, info]) -> (id, n, d, info)

    Parameters
    ----------
    id : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    id : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_id = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    fw_id[0] = fw_aschar(id)
    if fw_id[0] == 0:
        raise ValueError("len(id) != 1")
    {{fc_name}}(fw_id, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_id, n, d, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slassq_c', 'dlassq_c', 'classq_c', 'zlassq_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slassq', 'dlassq', 'classq', 'zlassq'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object x, fwi_integer_t incx, {{ktp2}} scale, {{ktp2}} sumsq):
    """{{name}}(n, x, incx, scale, sumsq[, n, x, incx, scale, sumsq]) -> (n, x, incx, scale, sumsq)

    Parameters
    ----------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    scale : {{ktp2}}_, intent inout
    sumsq : {{ktp2}}_, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout
    scale : {{ktp2}}_, intent inout
    sumsq : {{ktp2}}_, intent inout

    """
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    {{fc_name}}(&n, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &incx, &scale, &sumsq, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, x, incx, scale, sumsq,)
{{endfor}}


{{for fc_name, ktp, name
      in zip(['slasv2_c', 'dlasv2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasv2', 'dlasv2'])}}
cpdef api object {{name}}({{ktp}} f, {{ktp}} g, {{ktp}} h, {{ktp}} ssmin, {{ktp}} ssmax, {{ktp}} snr, {{ktp}} csr, {{ktp}} snl, {{ktp}} csl):
    """{{name}}(f, g, h, ssmin, ssmax, snr, csr, snl, csl[, f, g, h, ssmin, ssmax, snr, csr, snl, csl]) -> (f, g, h, ssmin, ssmax, snr, csr, snl, csl)

    Parameters
    ----------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    h : {{ktp}}_, intent inout
    ssmin : {{ktp}}_, intent inout
    ssmax : {{ktp}}_, intent inout
    snr : {{ktp}}_, intent inout
    csr : {{ktp}}_, intent inout
    snl : {{ktp}}_, intent inout
    csl : {{ktp}}_, intent inout

    Returns
    -------
    f : {{ktp}}_, intent inout
    g : {{ktp}}_, intent inout
    h : {{ktp}}_, intent inout
    ssmin : {{ktp}}_, intent inout
    ssmax : {{ktp}}_, intent inout
    snr : {{ktp}}_, intent inout
    csr : {{ktp}}_, intent inout
    snl : {{ktp}}_, intent inout
    csl : {{ktp}}_, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    {{fc_name}}(&f, &g, &h, &ssmin, &ssmax, &snr, &csr, &snl, &csl, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (f, g, h, ssmin, ssmax, snr, csr, snl, csl,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slaswp_c', 'dlaswp_c', 'claswp_c', 'zlaswp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slaswp', 'dlaswp', 'claswp', 'zlaswp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t k1, fwi_integer_t k2, object ipiv, fwi_integer_t incx):
    """{{name}}(n, a, lda, k1, k2, ipiv, incx[, n, a, lda, k1, k2, ipiv, incx]) -> (n, a, lda, k1, k2, ipiv, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    k1 : fwi_integer, intent inout
    k2 : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    k1 : fwi_integer, intent inout
    k2 : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &k1, &k2, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lda, k1, k2, ipiv, incx,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasy2_c', 'dlasy2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['slasy2', 'dlasy2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwl_logical_t ltranl, fwl_logical_t ltranr, fwi_integer_t isgn, fwi_integer_t n1, fwi_integer_t n2, object tl, fwi_integer_t ldtl, object tr, fwi_integer_t ldtr, object b, fwi_integer_t ldb, {{ktp}} scale, object x, fwi_integer_t ldx, {{ktp}} xnorm, fwi_integer_t info):
    """{{name}}(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info[, ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info]) -> (ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info)

    Parameters
    ----------
    ltranl : fwl_logical, intent inout
    ltranr : fwl_logical, intent inout
    isgn : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    tl : {{ktp}}_, 2D array, dimension(ldtl, *), intent inout
    ldtl : fwi_integer, intent inout
    tr : {{ktp}}_, 2D array, dimension(ldtr, *), intent inout
    ldtr : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    scale : {{ktp}}_, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    xnorm : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ltranl : fwl_logical, intent inout
    ltranr : fwl_logical, intent inout
    isgn : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    tl : {{ktp}}_, 2D array, dimension(ldtl, *), intent inout
    ldtl : fwi_integer, intent inout
    tr : {{ktp}}_, 2D array, dimension(ldtr, *), intent inout
    ldtr : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    scale : {{ktp}}_, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    xnorm : {{ktp}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray tl_
    cdef fw_shape_t tl_shape_[2]
    cdef np.ndarray tr_
    cdef fw_shape_t tr_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    tl_, tl = fw_asfortranarray(tl, {{npy_enum}}, 2, False)
    fw_copyshape(tl_shape_, np.PyArray_DIMS(tl_), 2)
    if ldtl != tl_shape_[0]:
        raise ValueError("(ldtl == tl.shape[0]) not satisifed")
    tr_, tr = fw_asfortranarray(tr, {{npy_enum}}, 2, False)
    fw_copyshape(tr_shape_, np.PyArray_DIMS(tr_), 2)
    if ldtr != tr_shape_[0]:
        raise ValueError("(ldtr == tr.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    {{fc_name}}(&ltranl, &ltranr, &isgn, &n1, &n2, tl_shape_, <{{ktp}}*>np.PyArray_DATA(tl_), &ldtl, tr_shape_, <{{ktp}}*>np.PyArray_DATA(tr_), &ldtr, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &scale, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &xnorm, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slasyf_c', 'dlasyf_c', 'clasyf_c', 'zlasyf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slasyf', 'dlasyf', 'clasyf', 'zlasyf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nb, fwi_integer_t kb, object a, fwi_integer_t lda, object ipiv, object w, fwi_integer_t ldw, fwi_integer_t info):
    """{{name}}(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info[, uplo, n, nb, kb, a, lda, ipiv, w, ldw, info]) -> (uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 2D array, dimension(ldw, *), intent inout
    ldw : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 2D array, dimension(ldw, *), intent inout
    ldw : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 2, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 2)
    if ldw != w_shape_[0]:
        raise ValueError("(ldw == w.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nb, &kb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), &ldw, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nb, kb, a, lda, ipiv, w, ldw, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slatbs_c', 'dlatbs_c', 'clatbs_c', 'zlatbs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slatbs', 'dlatbs', 'clatbs', 'zlatbs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, object normin, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object x, {{ktp2}} scale, object cnorm, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info[, uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info]) -> (uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    normin : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout
    cnorm : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    normin : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout
    cnorm : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef char *fw_normin = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray cnorm_
    cdef fw_shape_t cnorm_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    cnorm_, cnorm = fw_asfortranarray(cnorm, {{npy_enum2}}, 1, False)
    fw_copyshape(cnorm_shape_, np.PyArray_DIMS(cnorm_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    fw_normin[0] = fw_aschar(normin)
    if fw_normin[0] == 0:
        raise ValueError("len(normin) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, fw_normin, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &scale, cnorm_shape_, <{{ktp2}}*>np.PyArray_DATA(cnorm_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, fw_normin, n, kd, ab, ldab, x, scale, cnorm, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['slatdf_c', 'dlatdf_c', 'clatdf_c', 'zlatdf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slatdf', 'dlatdf', 'clatdf', 'zlatdf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t ijob, fwi_integer_t n, object z, fwi_integer_t ldz, object rhs, {{ktp2}} rdsum, {{ktp2}} rdscal, object ipiv, object jpiv):
    """{{name}}(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv[, ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv]) -> (ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv)

    Parameters
    ----------
    ijob : fwi_integer, intent inout
    n : fwi_integer, intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    rhs : {{ktp}}_, 1D array, dimension(*), intent inout
    rdsum : {{ktp2}}_, intent inout
    rdscal : {{ktp2}}_, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    jpiv : fwi_integer, 1D array, dimension(*), intent inout

    Returns
    -------
    ijob : fwi_integer, intent inout
    n : fwi_integer, intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    rhs : {{ktp}}_, 1D array, dimension(*), intent inout
    rdsum : {{ktp2}}_, intent inout
    rdscal : {{ktp2}}_, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    jpiv : fwi_integer, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray rhs_
    cdef fw_shape_t rhs_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray jpiv_
    cdef fw_shape_t jpiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    rhs_, rhs = fw_asfortranarray(rhs, {{npy_enum}}, 1, False)
    fw_copyshape(rhs_shape_, np.PyArray_DIMS(rhs_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    jpiv_, jpiv = fw_asfortranarray(jpiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpiv_shape_, np.PyArray_DIMS(jpiv_), 1)
    {{fc_name}}(&ijob, &n, z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, rhs_shape_, <{{ktp}}*>np.PyArray_DATA(rhs_), &rdsum, &rdscal, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), jpiv_shape_, <fwi_integer_t*>np.PyArray_DATA(jpiv_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slatps_c', 'dlatps_c', 'clatps_c', 'zlatps_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slatps', 'dlatps', 'clatps', 'zlatps'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, object normin, fwi_integer_t n, object ap, object x, {{ktp2}} scale, object cnorm, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info[, uplo, trans, diag, normin, n, ap, x, scale, cnorm, info]) -> (uplo, trans, diag, normin, n, ap, x, scale, cnorm, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    normin : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout
    cnorm : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    normin : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout
    cnorm : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef char *fw_normin = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray cnorm_
    cdef fw_shape_t cnorm_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    cnorm_, cnorm = fw_asfortranarray(cnorm, {{npy_enum2}}, 1, False)
    fw_copyshape(cnorm_shape_, np.PyArray_DIMS(cnorm_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    fw_normin[0] = fw_aschar(normin)
    if fw_normin[0] == 0:
        raise ValueError("len(normin) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, fw_normin, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &scale, cnorm_shape_, <{{ktp2}}*>np.PyArray_DATA(cnorm_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, fw_normin, n, ap, x, scale, cnorm, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slatrd_c', 'dlatrd_c', 'clatrd_c', 'zlatrd_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slatrd', 'dlatrd', 'clatrd', 'zlatrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nb, object a, fwi_integer_t lda, object e, object tau, object w, fwi_integer_t ldw):
    """{{name}}(uplo, n, nb, a, lda, e, tau, w, ldw[, uplo, n, nb, a, lda, e, tau, w, ldw]) -> (uplo, n, nb, a, lda, e, tau, w, ldw)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 2D array, dimension(ldw, *), intent inout
    ldw : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nb : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 2D array, dimension(ldw, *), intent inout
    ldw : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 2, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 2)
    if ldw != w_shape_[0]:
        raise ValueError("(ldw == w.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nb, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), &ldw, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nb, a, lda, e, tau, w, ldw,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['slatrs_c', 'dlatrs_c', 'clatrs_c', 'zlatrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['slatrs', 'dlatrs', 'clatrs', 'zlatrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, object normin, fwi_integer_t n, object a, fwi_integer_t lda, object x, {{ktp2}} scale, object cnorm, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info[, uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info]) -> (uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    normin : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout
    cnorm : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    normin : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    x : {{ktp}}_, 1D array, dimension(*), intent inout
    scale : {{ktp2}}_, intent inout
    cnorm : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef char *fw_normin = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray cnorm_
    cdef fw_shape_t cnorm_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    cnorm_, cnorm = fw_asfortranarray(cnorm, {{npy_enum2}}, 1, False)
    fw_copyshape(cnorm_shape_, np.PyArray_DIMS(cnorm_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    fw_normin[0] = fw_aschar(normin)
    if fw_normin[0] == 0:
        raise ValueError("len(normin) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, fw_normin, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &scale, cnorm_shape_, <{{ktp2}}*>np.PyArray_DATA(cnorm_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, fw_normin, n, a, lda, x, scale, cnorm, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slatrz_c', 'dlatrz_c', 'clatrz_c', 'zlatrz_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slatrz', 'dlatrz', 'clatrz', 'zlatrz'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t l, object a, fwi_integer_t lda, object tau, object work):
    """{{name}}(m, n, l, a, lda, tau, work[, m, n, l, a, lda, tau, work]) -> (m, n, l, a, lda, tau, work)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &l, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, l, a, lda, tau, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slatzm_c', 'dlatzm_c', 'clatzm_c', 'zlatzm_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slatzm', 'dlatzm', 'clatzm', 'zlatzm'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object side, fwi_integer_t m, fwi_integer_t n, object v, fwi_integer_t incv, {{ktp}} tau, object c1, object c2, fwi_integer_t ldc, object work):
    """{{name}}(side, m, n, v, incv, tau, c1, c2, ldc, work[, side, m, n, v, incv, tau, c1, c2, ldc, work]) -> (side, m, n, v, incv, tau, c1, c2, ldc, work)

    Parameters
    ----------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    incv : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    c1 : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    c2 : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    side : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    v : {{ktp}}_, 1D array, dimension(*), intent inout
    incv : fwi_integer, intent inout
    tau : {{ktp}}_, intent inout
    c1 : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    c2 : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray c1_
    cdef fw_shape_t c1_shape_[2]
    cdef np.ndarray c2_
    cdef fw_shape_t c2_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    c1_, c1 = fw_asfortranarray(c1, {{npy_enum}}, 2, False)
    fw_copyshape(c1_shape_, np.PyArray_DIMS(c1_), 2)
    if ldc != c1_shape_[0]:
        raise ValueError("(ldc == c1.shape[0]) not satisifed")
    c2_, c2 = fw_asfortranarray(c2, {{npy_enum}}, 2, False)
    fw_copyshape(c2_shape_, np.PyArray_DIMS(c2_), 2)
    if ldc != c2_shape_[0]:
        raise ValueError("(ldc == c2.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    {{fc_name}}(fw_side, &m, &n, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &incv, &tau, c1_shape_, <{{ktp}}*>np.PyArray_DATA(c1_), c2_shape_, <{{ktp}}*>np.PyArray_DATA(c2_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, m, n, v, incv, tau, c1, c2, ldc, work,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slauu2_c', 'dlauu2_c', 'clauu2_c', 'zlauu2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slauu2', 'dlauu2', 'clauu2', 'zlauu2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, info[, uplo, n, a, lda, info]) -> (uplo, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['slauum_c', 'dlauum_c', 'clauum_c', 'zlauum_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['slauum', 'dlauum', 'clauum', 'zlauum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, info[, uplo, n, a, lda, info]) -> (uplo, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sopgtr_c', 'dopgtr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sopgtr', 'dopgtr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object tau, object q, fwi_integer_t ldq, object work, fwi_integer_t info):
    """{{name}}(uplo, n, ap, tau, q, ldq, work, info[, uplo, n, ap, tau, q, ldq, work, info]) -> (uplo, n, ap, tau, q, ldq, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, tau, q, ldq, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sopmtr_c', 'dopmtr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sopmtr', 'dopmtr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object uplo, object trans, fwi_integer_t m, fwi_integer_t n, object ap, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, uplo, trans, m, n, ap, tau, c, ldc, work, info[, side, uplo, trans, m, n, ap, tau, c, ldc, work, info]) -> (side, uplo, trans, m, n, ap, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_uplo, fw_trans, &m, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_uplo, fw_trans, m, n, ap, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorbdb_c', 'dorbdb_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorbdb', 'dorbdb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object trans, object signs, fwi_integer_t m, fwi_integer_t p, fwi_integer_t q, object x11, fwi_integer_t ldx11, object x12, fwi_integer_t ldx12, object x21, fwi_integer_t ldx21, object x22, fwi_integer_t ldx22, object theta, object phi, object taup1, object taup2, object tauq1, object tauq2, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info[, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info]) -> (trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info)

    Parameters
    ----------
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp}}_, 1D array, dimension(*), intent inout
    phi : {{ktp}}_, 1D array, dimension(*), intent inout
    taup1 : {{ktp}}_, 1D array, dimension(*), intent inout
    taup2 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq1 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq2 : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp}}_, 1D array, dimension(*), intent inout
    phi : {{ktp}}_, 1D array, dimension(*), intent inout
    taup1 : {{ktp}}_, 1D array, dimension(*), intent inout
    taup2 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq1 : {{ktp}}_, 1D array, dimension(*), intent inout
    tauq2 : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef char *fw_signs = [0, 0]
    cdef np.ndarray x11_
    cdef fw_shape_t x11_shape_[2]
    cdef np.ndarray x12_
    cdef fw_shape_t x12_shape_[2]
    cdef np.ndarray x21_
    cdef fw_shape_t x21_shape_[2]
    cdef np.ndarray x22_
    cdef fw_shape_t x22_shape_[2]
    cdef np.ndarray theta_
    cdef fw_shape_t theta_shape_[1]
    cdef np.ndarray phi_
    cdef fw_shape_t phi_shape_[1]
    cdef np.ndarray taup1_
    cdef fw_shape_t taup1_shape_[1]
    cdef np.ndarray taup2_
    cdef fw_shape_t taup2_shape_[1]
    cdef np.ndarray tauq1_
    cdef fw_shape_t tauq1_shape_[1]
    cdef np.ndarray tauq2_
    cdef fw_shape_t tauq2_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x11_, x11 = fw_asfortranarray(x11, {{npy_enum}}, 2, False)
    fw_copyshape(x11_shape_, np.PyArray_DIMS(x11_), 2)
    if ldx11 != x11_shape_[0]:
        raise ValueError("(ldx11 == x11.shape[0]) not satisifed")
    x12_, x12 = fw_asfortranarray(x12, {{npy_enum}}, 2, False)
    fw_copyshape(x12_shape_, np.PyArray_DIMS(x12_), 2)
    if ldx12 != x12_shape_[0]:
        raise ValueError("(ldx12 == x12.shape[0]) not satisifed")
    x21_, x21 = fw_asfortranarray(x21, {{npy_enum}}, 2, False)
    fw_copyshape(x21_shape_, np.PyArray_DIMS(x21_), 2)
    if ldx21 != x21_shape_[0]:
        raise ValueError("(ldx21 == x21.shape[0]) not satisifed")
    x22_, x22 = fw_asfortranarray(x22, {{npy_enum}}, 2, False)
    fw_copyshape(x22_shape_, np.PyArray_DIMS(x22_), 2)
    if ldx22 != x22_shape_[0]:
        raise ValueError("(ldx22 == x22.shape[0]) not satisifed")
    theta_, theta = fw_asfortranarray(theta, {{npy_enum}}, 1, False)
    fw_copyshape(theta_shape_, np.PyArray_DIMS(theta_), 1)
    phi_, phi = fw_asfortranarray(phi, {{npy_enum}}, 1, False)
    fw_copyshape(phi_shape_, np.PyArray_DIMS(phi_), 1)
    taup1_, taup1 = fw_asfortranarray(taup1, {{npy_enum}}, 1, False)
    fw_copyshape(taup1_shape_, np.PyArray_DIMS(taup1_), 1)
    taup2_, taup2 = fw_asfortranarray(taup2, {{npy_enum}}, 1, False)
    fw_copyshape(taup2_shape_, np.PyArray_DIMS(taup2_), 1)
    tauq1_, tauq1 = fw_asfortranarray(tauq1, {{npy_enum}}, 1, False)
    fw_copyshape(tauq1_shape_, np.PyArray_DIMS(tauq1_), 1)
    tauq2_, tauq2 = fw_asfortranarray(tauq2, {{npy_enum}}, 1, False)
    fw_copyshape(tauq2_shape_, np.PyArray_DIMS(tauq2_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_signs[0] = fw_aschar(signs)
    if fw_signs[0] == 0:
        raise ValueError("len(signs) != 1")
    {{fc_name}}(fw_trans, fw_signs, &m, &p, &q, x11_shape_, <{{ktp}}*>np.PyArray_DATA(x11_), &ldx11, x12_shape_, <{{ktp}}*>np.PyArray_DATA(x12_), &ldx12, x21_shape_, <{{ktp}}*>np.PyArray_DATA(x21_), &ldx21, x22_shape_, <{{ktp}}*>np.PyArray_DATA(x22_), &ldx22, theta_shape_, <{{ktp}}*>np.PyArray_DATA(theta_), phi_shape_, <{{ktp}}*>np.PyArray_DATA(phi_), taup1_shape_, <{{ktp}}*>np.PyArray_DATA(taup1_), taup2_shape_, <{{ktp}}*>np.PyArray_DATA(taup2_), tauq1_shape_, <{{ktp}}*>np.PyArray_DATA(tauq1_), tauq2_shape_, <{{ktp}}*>np.PyArray_DATA(tauq2_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, fw_signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorcsd_c', 'dorcsd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorcsd', 'dorcsd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobu1, object jobu2, object jobv1t, object jobv2t, object trans, object signs, fwi_integer_t m, fwi_integer_t p, fwi_integer_t q, object x11, fwi_integer_t ldx11, object x12, fwi_integer_t ldx12, object x21, fwi_integer_t ldx21, object x22, fwi_integer_t ldx22, object theta, object u1, fwi_integer_t ldu1, object u2, fwi_integer_t ldu2, object v1t, fwi_integer_t ldv1t, object v2t, fwi_integer_t ldv2t, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """{{name}}(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info[, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info]) -> (jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info)

    Parameters
    ----------
    jobu1 : object_, intent inout
    jobu2 : object_, intent inout
    jobv1t : object_, intent inout
    jobv2t : object_, intent inout
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp}}_, 1D array, dimension(*), intent inout
    u1 : {{ktp}}_, 2D array, dimension(ldu1, *), intent inout
    ldu1 : fwi_integer, intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    v1t : {{ktp}}_, 2D array, dimension(ldv1t, *), intent inout
    ldv1t : fwi_integer, intent inout
    v2t : {{ktp}}_, 2D array, dimension(ldv2t, *), intent inout
    ldv2t : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu1 : object_, intent inout
    jobu2 : object_, intent inout
    jobv1t : object_, intent inout
    jobv2t : object_, intent inout
    trans : object_, intent inout
    signs : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    q : fwi_integer, intent inout
    x11 : {{ktp}}_, 2D array, dimension(ldx11, *), intent inout
    ldx11 : fwi_integer, intent inout
    x12 : {{ktp}}_, 2D array, dimension(ldx12, *), intent inout
    ldx12 : fwi_integer, intent inout
    x21 : {{ktp}}_, 2D array, dimension(ldx21, *), intent inout
    ldx21 : fwi_integer, intent inout
    x22 : {{ktp}}_, 2D array, dimension(ldx22, *), intent inout
    ldx22 : fwi_integer, intent inout
    theta : {{ktp}}_, 1D array, dimension(*), intent inout
    u1 : {{ktp}}_, 2D array, dimension(ldu1, *), intent inout
    ldu1 : fwi_integer, intent inout
    u2 : {{ktp}}_, 2D array, dimension(ldu2, *), intent inout
    ldu2 : fwi_integer, intent inout
    v1t : {{ktp}}_, 2D array, dimension(ldv1t, *), intent inout
    ldv1t : fwi_integer, intent inout
    v2t : {{ktp}}_, 2D array, dimension(ldv2t, *), intent inout
    ldv2t : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu1 = [0, 0]
    cdef char *fw_jobu2 = [0, 0]
    cdef char *fw_jobv1t = [0, 0]
    cdef char *fw_jobv2t = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_signs = [0, 0]
    cdef np.ndarray x11_
    cdef fw_shape_t x11_shape_[2]
    cdef np.ndarray x12_
    cdef fw_shape_t x12_shape_[2]
    cdef np.ndarray x21_
    cdef fw_shape_t x21_shape_[2]
    cdef np.ndarray x22_
    cdef fw_shape_t x22_shape_[2]
    cdef np.ndarray theta_
    cdef fw_shape_t theta_shape_[1]
    cdef np.ndarray u1_
    cdef fw_shape_t u1_shape_[2]
    cdef np.ndarray u2_
    cdef fw_shape_t u2_shape_[2]
    cdef np.ndarray v1t_
    cdef fw_shape_t v1t_shape_[2]
    cdef np.ndarray v2t_
    cdef fw_shape_t v2t_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    x11_, x11 = fw_asfortranarray(x11, {{npy_enum}}, 2, False)
    fw_copyshape(x11_shape_, np.PyArray_DIMS(x11_), 2)
    if ldx11 != x11_shape_[0]:
        raise ValueError("(ldx11 == x11.shape[0]) not satisifed")
    x12_, x12 = fw_asfortranarray(x12, {{npy_enum}}, 2, False)
    fw_copyshape(x12_shape_, np.PyArray_DIMS(x12_), 2)
    if ldx12 != x12_shape_[0]:
        raise ValueError("(ldx12 == x12.shape[0]) not satisifed")
    x21_, x21 = fw_asfortranarray(x21, {{npy_enum}}, 2, False)
    fw_copyshape(x21_shape_, np.PyArray_DIMS(x21_), 2)
    if ldx21 != x21_shape_[0]:
        raise ValueError("(ldx21 == x21.shape[0]) not satisifed")
    x22_, x22 = fw_asfortranarray(x22, {{npy_enum}}, 2, False)
    fw_copyshape(x22_shape_, np.PyArray_DIMS(x22_), 2)
    if ldx22 != x22_shape_[0]:
        raise ValueError("(ldx22 == x22.shape[0]) not satisifed")
    theta_, theta = fw_asfortranarray(theta, {{npy_enum}}, 1, False)
    fw_copyshape(theta_shape_, np.PyArray_DIMS(theta_), 1)
    u1_, u1 = fw_asfortranarray(u1, {{npy_enum}}, 2, False)
    fw_copyshape(u1_shape_, np.PyArray_DIMS(u1_), 2)
    if ldu1 != u1_shape_[0]:
        raise ValueError("(ldu1 == u1.shape[0]) not satisifed")
    u2_, u2 = fw_asfortranarray(u2, {{npy_enum}}, 2, False)
    fw_copyshape(u2_shape_, np.PyArray_DIMS(u2_), 2)
    if ldu2 != u2_shape_[0]:
        raise ValueError("(ldu2 == u2.shape[0]) not satisifed")
    v1t_, v1t = fw_asfortranarray(v1t, {{npy_enum}}, 2, False)
    fw_copyshape(v1t_shape_, np.PyArray_DIMS(v1t_), 2)
    if ldv1t != v1t_shape_[0]:
        raise ValueError("(ldv1t == v1t.shape[0]) not satisifed")
    v2t_, v2t = fw_asfortranarray(v2t, {{npy_enum}}, 2, False)
    fw_copyshape(v2t_shape_, np.PyArray_DIMS(v2t_), 2)
    if ldv2t != v2t_shape_[0]:
        raise ValueError("(ldv2t == v2t.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobu1[0] = fw_aschar(jobu1)
    if fw_jobu1[0] == 0:
        raise ValueError("len(jobu1) != 1")
    fw_jobu2[0] = fw_aschar(jobu2)
    if fw_jobu2[0] == 0:
        raise ValueError("len(jobu2) != 1")
    fw_jobv1t[0] = fw_aschar(jobv1t)
    if fw_jobv1t[0] == 0:
        raise ValueError("len(jobv1t) != 1")
    fw_jobv2t[0] = fw_aschar(jobv2t)
    if fw_jobv2t[0] == 0:
        raise ValueError("len(jobv2t) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_signs[0] = fw_aschar(signs)
    if fw_signs[0] == 0:
        raise ValueError("len(signs) != 1")
    {{fc_name}}(fw_jobu1, fw_jobu2, fw_jobv1t, fw_jobv2t, fw_trans, fw_signs, &m, &p, &q, x11_shape_, <{{ktp}}*>np.PyArray_DATA(x11_), &ldx11, x12_shape_, <{{ktp}}*>np.PyArray_DATA(x12_), &ldx12, x21_shape_, <{{ktp}}*>np.PyArray_DATA(x21_), &ldx21, x22_shape_, <{{ktp}}*>np.PyArray_DATA(x22_), &ldx22, theta_shape_, <{{ktp}}*>np.PyArray_DATA(theta_), u1_shape_, <{{ktp}}*>np.PyArray_DATA(u1_), &ldu1, u2_shape_, <{{ktp}}*>np.PyArray_DATA(u2_), &ldu2, v1t_shape_, <{{ktp}}*>np.PyArray_DATA(v1t_), &ldv1t, v2t_shape_, <{{ktp}}*>np.PyArray_DATA(v2t_), &ldv2t, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobu1, fw_jobu2, fw_jobv1t, fw_jobv2t, fw_trans, fw_signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorg2l_c', 'dorg2l_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorg2l', 'dorg2l'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorg2r_c', 'dorg2r_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorg2r', 'dorg2r'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgbr_c', 'dorgbr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgbr', 'dorgbr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object vect, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(vect, m, n, k, a, lda, tau, work, lwork, info[, vect, m, n, k, a, lda, tau, work, lwork, info]) -> (vect, m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    {{fc_name}}(fw_vect, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorghr_c', 'dorghr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorghr', 'dorghr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(n, ilo, ihi, a, lda, tau, work, lwork, info[, n, ilo, ihi, a, lda, tau, work, lwork, info]) -> (n, ilo, ihi, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, ilo, ihi, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgl2_c', 'dorgl2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgl2', 'dorgl2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorglq_c', 'dorglq_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorglq', 'dorglq'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgql_c', 'dorgql_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgql', 'dorgql'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgqr_c', 'dorgqr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgqr', 'dorgqr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgr2_c', 'dorgr2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgr2', 'dorgr2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, info[, m, n, k, a, lda, tau, work, info]) -> (m, n, k, a, lda, tau, work, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgrq_c', 'dorgrq_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgrq', 'dorgrq'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, k, a, lda, tau, work, lwork, info[, m, n, k, a, lda, tau, work, lwork, info]) -> (m, n, k, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, k, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorgtr_c', 'dorgtr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorgtr', 'dorgtr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, tau, work, lwork, info[, uplo, n, a, lda, tau, work, lwork, info]) -> (uplo, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorm2l_c', 'dorm2l_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorm2l', 'dorm2l'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorm2r_c', 'dorm2r_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorm2r', 'dorm2r'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormbr_c', 'dormbr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormbr', 'dormbr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object vect, object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_vect, fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormhr_c', 'dormhr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormhr', 'dormhr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &ilo, &ihi, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sorml2_c', 'dorml2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sorml2', 'dorml2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormlq_c', 'dormlq_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormlq', 'dormlq'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormql_c', 'dormql_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormql', 'dormql'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormqr_c', 'dormqr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormqr', 'dormqr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormr2_c', 'dormr2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormr2', 'dormr2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormr3_c', 'dormr3_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormr3', 'dormr3'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info[, side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info]) -> (side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, &l, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, l, a, lda, tau, c, ldc, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormrq_c', 'dormrq_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormrq', 'dormrq'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormrz_c', 'dormrz_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormrz', 'dormrz'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object trans, fwi_integer_t m, fwi_integer_t n, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info[, side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info]) -> (side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_trans, &m, &n, &k, &l, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sormtr_c', 'dormtr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sormtr', 'dormtr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object side, object uplo, object trans, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object c, fwi_integer_t ldc, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info[, side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info]) -> (side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)

    Parameters
    ----------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_side, fw_uplo, fw_trans, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_side, fw_uplo, fw_trans, m, n, a, lda, tau, c, ldc, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['spbcon_c', 'dpbcon_c', 'cpbcon_c', 'zpbcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spbcon', 'dpbcon', 'cpbcon', 'zpbcon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, {{ktp2}} anorm, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, kd, ab, ldab, anorm, rcond, work, {{name2}}, info[, uplo, n, kd, ab, ldab, anorm, rcond, work, {{name2}}, info]) -> (uplo, n, kd, ab, ldab, anorm, rcond, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, anorm, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spbequ_c', 'dpbequ_c', 'cpbequ_c', 'zpbequ_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spbequ', 'dpbequ', 'cpbequ', 'zpbequ'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object s, {{ktp2}} scond, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(uplo, n, kd, ab, ldab, s, scond, amax, info[, uplo, n, kd, ab, ldab, s, scond, amax, info]) -> (uplo, n, kd, ab, ldab, s, scond, amax, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, s, scond, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['spbrfs_c', 'dpbrfs_c', 'cpbrfs_c', 'zpbrfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spbrfs', 'dpbrfs', 'cpbrfs', 'zpbrfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spbstf_c', 'dpbstf_c', 'cpbstf_c', 'zpbstf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spbstf', 'dpbstf', 'cpbstf', 'zpbstf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, fwi_integer_t info):
    """{{name}}(uplo, n, kd, ab, ldab, info[, uplo, n, kd, ab, ldab, info]) -> (uplo, n, kd, ab, ldab, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spbsv_c', 'dpbsv_c', 'cpbsv_c', 'zpbsv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spbsv', 'dpbsv', 'cpbsv', 'zpbsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, kd, nrhs, ab, ldab, b, ldb, info[, uplo, n, kd, nrhs, ab, ldab, b, ldb, info]) -> (uplo, n, kd, nrhs, ab, ldab, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, nrhs, ab, ldab, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['spbsvx_c', 'dpbsvx_c', 'cpbsvx_c', 'zpbsvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spbsvx', 'dpbsvx', 'cpbsvx', 'zpbsvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t kd, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object afb, fwi_integer_t ldafb, object equed, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    afb : {{ktp}}_, 2D array, dimension(ldafb, *), intent inout
    ldafb : fwi_integer, intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray afb_
    cdef fw_shape_t afb_shape_[2]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    afb_, afb = fw_asfortranarray(afb, {{npy_enum}}, 2, False)
    fw_copyshape(afb_shape_, np.PyArray_DIMS(afb_), 2)
    if ldafb != afb_shape_[0]:
        raise ValueError("(ldafb == afb.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &kd, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, afb_shape_, <{{ktp}}*>np.PyArray_DATA(afb_), &ldafb, fw_equed, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, kd, nrhs, ab, ldab, afb, ldafb, fw_equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spbtf2_c', 'dpbtf2_c', 'cpbtf2_c', 'zpbtf2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spbtf2', 'dpbtf2', 'cpbtf2', 'zpbtf2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, fwi_integer_t info):
    """{{name}}(uplo, n, kd, ab, ldab, info[, uplo, n, kd, ab, ldab, info]) -> (uplo, n, kd, ab, ldab, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spbtrf_c', 'dpbtrf_c', 'cpbtrf_c', 'zpbtrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spbtrf', 'dpbtrf', 'cpbtrf', 'zpbtrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, fwi_integer_t info):
    """{{name}}(uplo, n, kd, ab, ldab, info[, uplo, n, kd, ab, ldab, info]) -> (uplo, n, kd, ab, ldab, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, ab, ldab, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spbtrs_c', 'dpbtrs_c', 'cpbtrs_c', 'zpbtrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spbtrs', 'dpbtrs', 'cpbtrs', 'zpbtrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t kd, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, kd, nrhs, ab, ldab, b, ldb, info[, uplo, n, kd, nrhs, ab, ldab, b, ldb, info]) -> (uplo, n, kd, nrhs, ab, ldab, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &kd, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, kd, nrhs, ab, ldab, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spftrf_c', 'dpftrf_c', 'cpftrf_c', 'zpftrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spftrf', 'dpftrf', 'cpftrf', 'zpftrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, object a, fwi_integer_t info):
    """{{name}}(transr, uplo, n, a, info[, transr, uplo, n, a, info]) -> (transr, uplo, n, a, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, a, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spftri_c', 'dpftri_c', 'cpftri_c', 'zpftri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spftri', 'dpftri', 'cpftri', 'zpftri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, object a, fwi_integer_t info):
    """{{name}}(transr, uplo, n, a, info[, transr, uplo, n, a, info]) -> (transr, uplo, n, a, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, a, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spftrs_c', 'dpftrs_c', 'cpftrs_c', 'zpftrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spftrs', 'dpftrs', 'cpftrs', 'zpftrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(transr, uplo, n, nrhs, a, b, ldb, info[, transr, uplo, n, nrhs, a, b, ldb, info]) -> (transr, uplo, n, nrhs, a, b, ldb, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, nrhs, a, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['spocon_c', 'dpocon_c', 'cpocon_c', 'zpocon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spocon', 'dpocon', 'cpocon', 'zpocon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp2}} anorm, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, anorm, rcond, work, {{name2}}, info[, uplo, n, a, lda, anorm, rcond, work, {{name2}}, info]) -> (uplo, n, a, lda, anorm, rcond, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, anorm, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spoequ_c', 'dpoequ_c', 'cpoequ_c', 'zpoequ_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spoequ', 'dpoequ', 'cpoequ', 'zpoequ'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, fwi_integer_t lda, object s, {{ktp2}} scond, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(n, a, lda, s, scond, amax, info[, n, a, lda, s, scond, amax, info]) -> (n, a, lda, s, scond, amax, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lda, s, scond, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spoequb_c', 'dpoequb_c', 'cpoequb_c', 'zpoequb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spoequb', 'dpoequb', 'cpoequb', 'zpoequb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object a, fwi_integer_t lda, object s, {{ktp2}} scond, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(n, a, lda, s, scond, amax, info[, n, a, lda, s, scond, amax, info]) -> (n, a, lda, s, scond, amax, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    {{fc_name}}(&n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, a, lda, s, scond, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sporfs_c', 'dporfs_c', 'cporfs_c', 'zporfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sporfs', 'dporfs', 'cporfs', 'zporfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sporfsx_c', 'dporfsx_c', 'cporfsx_c', 'zporfsx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sporfsx', 'dporfsx', 'cporfsx', 'zporfsx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object equed, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, fw_equed, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sposv_c', 'dposv_c', 'cposv_c', 'zposv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sposv', 'dposv', 'cposv', 'zposv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, b, ldb, info[, uplo, n, nrhs, a, lda, b, ldb, info]) -> (uplo, n, nrhs, a, lda, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sposvx_c', 'dposvx_c', 'cposvx_c', 'zposvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sposvx', 'dposvx', 'cposvx', 'zposvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object equed, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, fw_equed, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, a, lda, af, ldaf, fw_equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sposvxx_c', 'dposvxx_c', 'cposvxx_c', 'zposvxx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sposvxx', 'dposvxx', 'cposvxx', 'zposvxx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object equed, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, {{ktp2}} rpvgrw, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, fw_equed, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, &rpvgrw, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, a, lda, af, ldaf, fw_equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spotf2_c', 'dpotf2_c', 'cpotf2_c', 'zpotf2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spotf2', 'dpotf2', 'cpotf2', 'zpotf2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, info[, uplo, n, a, lda, info]) -> (uplo, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spotrf_c', 'dpotrf_c', 'cpotrf_c', 'zpotrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spotrf', 'dpotrf', 'cpotrf', 'zpotrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, info[, uplo, n, a, lda, info]) -> (uplo, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spotri_c', 'dpotri_c', 'cpotri_c', 'zpotri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spotri', 'dpotri', 'cpotri', 'zpotri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, info[, uplo, n, a, lda, info]) -> (uplo, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spotrs_c', 'dpotrs_c', 'cpotrs_c', 'zpotrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spotrs', 'dpotrs', 'cpotrs', 'zpotrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, b, ldb, info[, uplo, n, nrhs, a, lda, b, ldb, info]) -> (uplo, n, nrhs, a, lda, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['sppcon_c', 'dppcon_c', 'cppcon_c', 'zppcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sppcon', 'dppcon', 'cppcon', 'zppcon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, {{ktp2}} anorm, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, ap, anorm, rcond, work, {{name2}}, info[, uplo, n, ap, anorm, rcond, work, {{name2}}, info]) -> (uplo, n, ap, anorm, rcond, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    anorm : {{ktp2}}_, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &anorm, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, anorm, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sppequ_c', 'dppequ_c', 'cppequ_c', 'zppequ_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sppequ', 'dppequ', 'cppequ', 'zppequ'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object s, {{ktp2}} scond, {{ktp2}} amax, fwi_integer_t info):
    """{{name}}(uplo, n, ap, s, scond, amax, info[, uplo, n, ap, s, scond, amax, info]) -> (uplo, n, ap, s, scond, amax, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, s, scond, amax, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['spprfs_c', 'dpprfs_c', 'cpprfs_c', 'zpprfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spprfs', 'dpprfs', 'cpprfs', 'zpprfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object afp, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray afp_
    cdef fw_shape_t afp_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    afp_, afp = fw_asfortranarray(afp, {{npy_enum}}, 1, False)
    fw_copyshape(afp_shape_, np.PyArray_DIMS(afp_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), afp_shape_, <{{ktp}}*>np.PyArray_DATA(afp_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sppsv_c', 'dppsv_c', 'cppsv_c', 'zppsv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sppsv', 'dppsv', 'cppsv', 'zppsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, b, ldb, info[, uplo, n, nrhs, ap, b, ldb, info]) -> (uplo, n, nrhs, ap, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sppsvx_c', 'dppsvx_c', 'cppsvx_c', 'zppsvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sppsvx', 'dppsvx', 'cppsvx', 'zppsvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object afp, object equed, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray afp_
    cdef fw_shape_t afp_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    afp_, afp = fw_asfortranarray(afp, {{npy_enum}}, 1, False)
    fw_copyshape(afp_shape_, np.PyArray_DIMS(afp_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), afp_shape_, <{{ktp}}*>np.PyArray_DATA(afp_), fw_equed, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, ap, afp, fw_equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spptrf_c', 'dpptrf_c', 'cpptrf_c', 'zpptrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spptrf', 'dpptrf', 'cpptrf', 'zpptrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, fwi_integer_t info):
    """{{name}}(uplo, n, ap, info[, uplo, n, ap, info]) -> (uplo, n, ap, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spptri_c', 'dpptri_c', 'cpptri_c', 'zpptri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spptri', 'dpptri', 'cpptri', 'zpptri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, fwi_integer_t info):
    """{{name}}(uplo, n, ap, info[, uplo, n, ap, info]) -> (uplo, n, ap, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['spptrs_c', 'dpptrs_c', 'cpptrs_c', 'zpptrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spptrs', 'dpptrs', 'cpptrs', 'zpptrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, b, ldb, info[, uplo, n, nrhs, ap, b, ldb, info]) -> (uplo, n, nrhs, ap, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spstf2_c', 'dpstf2_c', 'cpstf2_c', 'zpstf2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spstf2', 'dpstf2', 'cpstf2', 'zpstf2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object piv, fwi_integer_t rank, {{ktp2}} tol, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, piv, rank, tol, work, info[, uplo, n, a, lda, piv, rank, tol, work, info]) -> (uplo, n, a, lda, piv, rank, tol, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    piv : fwi_integer, 1D array, dimension(n), intent inout
    rank : fwi_integer, intent inout
    tol : {{ktp2}}_, intent inout
    work : {{ktp2}}_, 1D array, dimension(2*n), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    piv : fwi_integer, 1D array, dimension(n), intent inout
    rank : fwi_integer, intent inout
    tol : {{ktp2}}_, intent inout
    work : {{ktp2}}_, 1D array, dimension(2*n), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray piv_
    cdef fw_shape_t piv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    piv_, piv = fw_asfortranarray(piv, fwi_integer_t_enum, 1, False)
    fw_copyshape(piv_shape_, np.PyArray_DIMS(piv_), 1)
    if not (0 <= n <= piv_shape_[0]):
        raise ValueError("(0 <= n <= piv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, piv_shape_, <fwi_integer_t*>np.PyArray_DATA(piv_), &rank, &tol, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, piv, rank, tol, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spstrf_c', 'dpstrf_c', 'cpstrf_c', 'zpstrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['spstrf', 'dpstrf', 'cpstrf', 'zpstrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object piv, fwi_integer_t rank, {{ktp2}} tol, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, piv, rank, tol, work, info[, uplo, n, a, lda, piv, rank, tol, work, info]) -> (uplo, n, a, lda, piv, rank, tol, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    piv : fwi_integer, 1D array, dimension(n), intent inout
    rank : fwi_integer, intent inout
    tol : {{ktp2}}_, intent inout
    work : {{ktp2}}_, 1D array, dimension(2*n), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    piv : fwi_integer, 1D array, dimension(n), intent inout
    rank : fwi_integer, intent inout
    tol : {{ktp2}}_, intent inout
    work : {{ktp2}}_, 1D array, dimension(2*n), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray piv_
    cdef fw_shape_t piv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    piv_, piv = fw_asfortranarray(piv, fwi_integer_t_enum, 1, False)
    fw_copyshape(piv_shape_, np.PyArray_DIMS(piv_), 1)
    if not (0 <= n <= piv_shape_[0]):
        raise ValueError("(0 <= n <= piv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum2}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, piv_shape_, <fwi_integer_t*>np.PyArray_DATA(piv_), &rank, &tol, work_shape_, <{{ktp2}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, piv, rank, tol, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, name2, npy_enum, npy_enum2
      in zip(['sptcon_c', 'dptcon_c', 'cptcon_c', 'zptcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sptcon', 'dptcon', 'cptcon', 'zptcon'],
             ['work', 'work', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, {{ktp}} anorm, {{ktp}} rcond, object {{name2}}, fwi_integer_t info):
    """{{name}}(n, d, e, anorm, rcond, {{name2}}, info[, n, d, e, anorm, rcond, {{name2}}, info]) -> (n, d, e, anorm, rcond, {{name2}}, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    anorm : {{ktp}}_, intent inout
    rcond : {{ktp}}_, intent inout
    {{name2}} : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    anorm : {{ktp}}_, intent inout
    rcond : {{ktp}}_, intent inout
    {{name2}} : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), &anorm, &rcond, {{name2}}_shape_, <{{ktp}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, anorm, rcond, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spteqr_c', 'dpteqr_c', 'cpteqr_c', 'zpteqr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spteqr', 'dpteqr', 'cpteqr', 'zpteqr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object compz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(compz, n, d, e, z, ldz, work, info[, compz, n, d, e, z, ldz, work, info]) -> (compz, n, d, e, z, ldz, work, info)

    Parameters
    ----------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    {{fc_name}}(fw_compz, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_compz, n, d, e, z, ldz, work, info,)
{{endfor}}


cpdef api object sptrfs(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, fwi_integer_t info):
    """sptrfs(n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info[, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info]) -> (n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_real, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_real, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_real_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwr_real_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwr_real_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_real_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_real_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    sptrfs_c(&n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), df_shape_, <fwr_real_t*>np.PyArray_DATA(df_), ef_shape_, <fwr_real_t*>np.PyArray_DATA(ef_), b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwr_real_t*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <fwr_real_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_real_t*>np.PyArray_DATA(berr_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sptrfs' wrapper.")
    return (n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sptsv_c', 'dptsv_c', 'cptsv_c', 'zptsv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sptsv', 'dptsv', 'cptsv', 'zptsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(n, nrhs, d, e, b, ldb, info[, n, nrhs, d, e, b, ldb, info]) -> (n, nrhs, d, e, b, ldb, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp2}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum2}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    {{fc_name}}(&n, &nrhs, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), b_shape_, <{{ktp2}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, nrhs, d, e, b, ldb, info,)
{{endfor}}


cpdef api object sptsvx(object fact, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, fwr_real_t rcond, object ferr, object berr, object work, fwi_integer_t info):
    """sptsvx(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info[, fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info]) -> (fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info)

    Parameters
    ----------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_real, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    df : fwr_real, 1D array, dimension(*), intent inout
    ef : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwr_real, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_real, intent inout
    ferr : fwr_real, 1D array, dimension(*), intent inout
    berr : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_real_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwr_real_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwr_real_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_real_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_real_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    sptsvx_c(fw_fact, &n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), df_shape_, <fwr_real_t*>np.PyArray_DATA(df_), ef_shape_, <fwr_real_t*>np.PyArray_DATA(ef_), b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwr_real_t*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <fwr_real_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_real_t*>np.PyArray_DATA(berr_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sptsvx' wrapper.")
    return (fw_fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['spttrf_c', 'dpttrf_c', 'cpttrf_c', 'zpttrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['spttrf', 'dpttrf', 'cpttrf', 'zpttrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, fwi_integer_t info):
    """{{name}}(n, d, e, info[, n, d, e, info]) -> (n, d, e, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp2}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum2}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp2}}*>np.PyArray_DATA(e_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, info,)
{{endfor}}


cpdef api object spttrs(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwi_integer_t info):
    """spttrs(n, nrhs, d, e, b, ldb, info[, n, nrhs, d, e, b, ldb, info]) -> (n, nrhs, d, e, b, ldb, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    spttrs_c(&n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'spttrs' wrapper.")
    return (n, nrhs, d, e, b, ldb, info,)


cpdef api object sptts2(fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb):
    """sptts2(n, nrhs, d, e, b, ldb[, n, nrhs, d, e, b, ldb]) -> (n, nrhs, d, e, b, ldb)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    sptts2_c(&n, &nrhs, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sptts2' wrapper.")
    return (n, nrhs, d, e, b, ldb,)


{{for fc_name, ktp, name, npy_enum
      in zip(['srscl_c', 'drscl_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['srscl', 'drscl'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, {{ktp}} sa, object sx, fwi_integer_t incx):
    """{{name}}(n, sa, sx, incx[, n, sa, sx, incx]) -> (n, sa, sx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    sa : {{ktp}}_, intent inout
    sx : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    sa : {{ktp}}_, intent inout
    sx : {{ktp}}_, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray sx_
    cdef fw_shape_t sx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    sx_, sx = fw_asfortranarray(sx, {{npy_enum}}, 1, False)
    fw_copyshape(sx_shape_, np.PyArray_DIMS(sx_), 1)
    {{fc_name}}(&n, &sa, sx_shape_, <{{ktp}}*>np.PyArray_DATA(sx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, sa, sx, incx,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbev_c', 'dsbev_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbev', 'dsbev'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info[, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info]) -> (jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, kd, ab, ldab, w, z, ldz, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbevd_c', 'dsbevd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbevd', 'dsbevd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info[, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info]) -> (jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbevx_c', 'dsbevx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbevx', 'dsbevx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object q, fwi_integer_t ldq, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info[, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info]) -> (jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbgst_c', 'dsbgst_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbgst', 'dsbgst'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object vect, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object x, fwi_integer_t ldx, object work, fwi_integer_t info):
    """{{name}}(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info[, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info]) -> (vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info)

    Parameters
    ----------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_vect, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbgv_c', 'dsbgv_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbgv', 'dsbgv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info[, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info]) -> (jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbgvd_c', 'dsbgvd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbgvd', 'dsbgvd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info[, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info]) -> (jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbgvx_c', 'dsbgvx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbgvx', 'dsbgvx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, fwi_integer_t ka, fwi_integer_t kb, object ab, fwi_integer_t ldab, object bb, fwi_integer_t ldbb, object q, fwi_integer_t ldq, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info[, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info]) -> (jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ka : fwi_integer, intent inout
    kb : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    bb : {{ktp}}_, 2D array, dimension(ldbb, *), intent inout
    ldbb : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray bb_
    cdef fw_shape_t bb_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    bb_, bb = fw_asfortranarray(bb, {{npy_enum}}, 2, False)
    fw_copyshape(bb_shape_, np.PyArray_DIMS(bb_), 2)
    if ldbb != bb_shape_[0]:
        raise ValueError("(ldbb == bb.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, &ka, &kb, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, bb_shape_, <{{ktp}}*>np.PyArray_DATA(bb_), &ldbb, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssbtrd_c', 'dsbtrd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssbtrd', 'dsbtrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object vect, object uplo, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, object d, object e, object q, fwi_integer_t ldq, object work, fwi_integer_t info):
    """{{name}}(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info[, vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info]) -> (vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info)

    Parameters
    ----------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_vect, fw_uplo, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_vect, fw_uplo, n, kd, ab, ldab, d, e, q, ldq, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssfrk_c', 'dsfrk_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssfrk', 'dsfrk'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, object trans, fwi_integer_t n, fwi_integer_t k, {{ktp}} alpha, object a, fwi_integer_t lda, {{ktp}} beta, object c):
    """{{name}}(transr, uplo, trans, n, k, alpha, a, lda, beta, c[, transr, uplo, trans, n, k, alpha, a, lda, beta, c]) -> (transr, uplo, trans, n, k, alpha, a, lda, beta, c)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    beta : {{ktp}}_, intent inout
    c : {{ktp}}_, 1D array, dimension(*), intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 1, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_transr, fw_uplo, fw_trans, &n, &k, &alpha, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &beta, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, fw_trans, n, k, alpha, a, lda, beta, c,)
{{endfor}}


cpdef api object sspcon(object uplo, fwi_integer_t n, object ap, object ipiv, fwr_real_t anorm, fwr_real_t rcond, object work, object iwork, fwi_integer_t info):
    """sspcon(uplo, n, ap, ipiv, anorm, rcond, work, iwork, info[, uplo, n, ap, ipiv, anorm, rcond, work, iwork, info]) -> (uplo, n, ap, ipiv, anorm, rcond, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwr_real, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwr_real, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, fwr_real_t_enum, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    sspcon_c(fw_uplo, &n, ap_shape_, <fwr_real_t*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sspcon' wrapper.")
    return (fw_uplo, n, ap, ipiv, anorm, rcond, work, iwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['sspev_c', 'dspev_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspev', 'dspev'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object ap, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ap, w, z, ldz, work, info[, jobz, uplo, n, ap, w, z, ldz, work, info]) -> (jobz, uplo, n, ap, w, z, ldz, work, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ap, w, z, ldz, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspevd_c', 'dspevd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspevd', 'dspevd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object ap, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info[, jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info]) -> (jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspevx_c', 'dspevx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspevx', 'dspevx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, object ap, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info[, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info]) -> (jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspgst_c', 'dspgst_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspgst', 'dspgst'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object uplo, fwi_integer_t n, object ap, object bp, fwi_integer_t info):
    """{{name}}(itype, uplo, n, ap, bp, info[, itype, uplo, n, ap, bp, info]) -> (itype, uplo, n, ap, bp, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_uplo, n, ap, bp, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspgv_c', 'dspgv_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspgv', 'dspgv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object ap, object bp, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info[, itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info]) -> (itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, ap, bp, w, z, ldz, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspgvd_c', 'dspgvd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspgvd', 'dspgvd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object ap, object bp, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info[, itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info]) -> (itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspgvx_c', 'dspgvx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sspgvx', 'dspgvx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object range, object uplo, fwi_integer_t n, object ap, object bp, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info[, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info]) -> (itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    bp : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray bp_
    cdef fw_shape_t bp_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    bp_, bp = fw_asfortranarray(bp, {{npy_enum}}, 1, False)
    fw_copyshape(bp_shape_, np.PyArray_DIMS(bp_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_range, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), bp_shape_, <{{ktp}}*>np.PyArray_DATA(bp_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_range, fw_uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['ssprfs_c', 'dsprfs_c', 'csprfs_c', 'zsprfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['ssprfs', 'dsprfs', 'csprfs', 'zsprfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object afp, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray afp_
    cdef fw_shape_t afp_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    afp_, afp = fw_asfortranarray(afp, {{npy_enum}}, 1, False)
    fw_copyshape(afp_shape_, np.PyArray_DIMS(afp_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), afp_shape_, <{{ktp}}*>np.PyArray_DATA(afp_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sspsv_c', 'dspsv_c', 'cspsv_c', 'zspsv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sspsv', 'dspsv', 'cspsv', 'zspsv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, ipiv, b, ldb, info[, uplo, n, nrhs, ap, ipiv, b, ldb, info]) -> (uplo, n, nrhs, ap, ipiv, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['sspsvx_c', 'dspsvx_c', 'cspsvx_c', 'zspsvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['sspsvx', 'dspsvx', 'cspsvx', 'zspsvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object afp, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info[, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info]) -> (fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    afp : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray afp_
    cdef fw_shape_t afp_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    afp_, afp = fw_asfortranarray(afp, {{npy_enum}}, 1, False)
    fw_copyshape(afp_shape_, np.PyArray_DIMS(afp_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), afp_shape_, <{{ktp}}*>np.PyArray_DATA(afp_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssptrd_c', 'dsptrd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssptrd', 'dsptrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object d, object e, object tau, fwi_integer_t info):
    """{{name}}(uplo, n, ap, d, e, tau, info[, uplo, n, ap, d, e, tau, info]) -> (uplo, n, ap, d, e, tau, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, d, e, tau, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssptrf_c', 'dsptrf_c', 'csptrf_c', 'zsptrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssptrf', 'dsptrf', 'csptrf', 'zsptrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object ipiv, fwi_integer_t info):
    """{{name}}(uplo, n, ap, ipiv, info[, uplo, n, ap, ipiv, info]) -> (uplo, n, ap, ipiv, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssptri_c', 'dsptri_c', 'csptri_c', 'zsptri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssptri', 'dsptri', 'csptri', 'zsptri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object ipiv, object work, fwi_integer_t info):
    """{{name}}(uplo, n, ap, ipiv, work, info[, uplo, n, ap, ipiv, work, info]) -> (uplo, n, ap, ipiv, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, ipiv, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssptrs_c', 'dsptrs_c', 'csptrs_c', 'zsptrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssptrs', 'dsptrs', 'csptrs', 'zsptrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object ap, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, ap, ipiv, b, ldb, info[, uplo, n, nrhs, ap, ipiv, b, ldb, info]) -> (uplo, n, nrhs, ap, ipiv, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, ap, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sstebz_c', 'dstebz_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sstebz', 'dstebz'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object range, object order, fwi_integer_t n, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, object d, object e, fwi_integer_t m, fwi_integer_t nsplit, object w, object iblock, object isplit, object work, object iwork, fwi_integer_t info):
    """{{name}}(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info[, range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info]) -> (range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info)

    Parameters
    ----------
    range : object_, intent inout
    order : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    nsplit : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    range : object_, intent inout
    order : object_, intent inout
    n : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    nsplit : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_range = [0, 0]
    cdef char *fw_order = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray iblock_
    cdef fw_shape_t iblock_shape_[1]
    cdef np.ndarray isplit_
    cdef fw_shape_t isplit_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    iblock_, iblock = fw_asfortranarray(iblock, fwi_integer_t_enum, 1, False)
    fw_copyshape(iblock_shape_, np.PyArray_DIMS(iblock_), 1)
    isplit_, isplit = fw_asfortranarray(isplit, fwi_integer_t_enum, 1, False)
    fw_copyshape(isplit_shape_, np.PyArray_DIMS(isplit_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_order[0] = fw_aschar(order)
    if fw_order[0] == 0:
        raise ValueError("len(order) != 1")
    {{fc_name}}(fw_range, fw_order, &n, &vl, &vu, &il, &iu, &abstol, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &m, &nsplit, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), iblock_shape_, <fwi_integer_t*>np.PyArray_DATA(iblock_), isplit_shape_, <fwi_integer_t*>np.PyArray_DATA(isplit_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_range, fw_order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info,)
{{endfor}}


cpdef api object sstedc(object compz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """sstedc(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info[, compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info]) -> (compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_real, 1D array, dimension(*), intent inout
    e : fwr_real, 1D array, dimension(*), intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    sstedc_c(fw_compz, &n, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'sstedc' wrapper.")
    return (fw_compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sstegr_c', 'dstegr_c', 'cstegr_c', 'zstegr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sstegr', 'dstegr', 'cstegr', 'zstegr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, fwi_integer_t n, object d, object e, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object isuppz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info[, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info]) -> (jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    {{fc_name}}(fw_jobz, fw_range, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &ldz, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sstein_c', 'dstein_c', 'cstein_c', 'zstein_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sstein', 'dstein', 'cstein', 'zstein'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, fwi_integer_t m, object w, object iblock, object isplit, object z, fwi_integer_t ldz, object work, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info[, n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info]) -> (n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    iblock : fwi_integer, 1D array, dimension(*), intent inout
    isplit : fwi_integer, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray iblock_
    cdef fw_shape_t iblock_shape_[1]
    cdef np.ndarray isplit_
    cdef fw_shape_t isplit_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    iblock_, iblock = fw_asfortranarray(iblock, fwi_integer_t_enum, 1, False)
    fw_copyshape(iblock_shape_, np.PyArray_DIMS(iblock_), 1)
    isplit_, isplit = fw_asfortranarray(isplit, fwi_integer_t_enum, 1, False)
    fw_copyshape(isplit_shape_, np.PyArray_DIMS(isplit_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), iblock_shape_, <fwi_integer_t*>np.PyArray_DATA(iblock_), isplit_shape_, <fwi_integer_t*>np.PyArray_DATA(isplit_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['sstemr_c', 'dstemr_c', 'cstemr_c', 'zstemr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['sstemr', 'dstemr', 'cstemr', 'zstemr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, fwi_integer_t n, object d, object e, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, fwi_integer_t m, object w, object z, fwi_integer_t ldz, fwi_integer_t nzc, object isuppz, fwl_logical_t tryrac, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info[, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info]) -> (jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    nzc : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    tryrac : fwl_logical, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    nzc : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    tryrac : fwl_logical, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    {{fc_name}}(fw_jobz, fw_range, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &vl, &vu, &il, &iu, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &ldz, &nzc, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), &tryrac, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['ssteqr_c', 'dsteqr_c', 'csteqr_c', 'zsteqr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssteqr', 'dsteqr', 'csteqr', 'zsteqr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object compz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(compz, n, d, e, z, ldz, work, info[, compz, n, d, e, z, ldz, work, info]) -> (compz, n, d, e, z, ldz, work, info)

    Parameters
    ----------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp2}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum2}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    {{fc_name}}(fw_compz, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), z_shape_, <{{ktp2}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_compz, n, d, e, z, ldz, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssterf_c', 'dsterf_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssterf', 'dsterf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t n, object d, object e, fwi_integer_t info):
    """{{name}}(n, d, e, info[, n, d, e, info]) -> (n, d, e, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    {{fc_name}}(&n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (n, d, e, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sstev_c', 'dstev_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sstev', 'dstev'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t info):
    """{{name}}(jobz, n, d, e, z, ldz, work, info[, jobz, n, d, e, z, ldz, work, info]) -> (jobz, n, d, e, z, ldz, work, info)

    Parameters
    ----------
    jobz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    {{fc_name}}(fw_jobz, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, n, d, e, z, ldz, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sstevd_c', 'dstevd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sstevd', 'dstevd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info[, jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info]) -> (jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    {{fc_name}}(fw_jobz, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sstevr_c', 'dstevr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sstevr', 'dstevr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, fwi_integer_t n, object d, object e, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object isuppz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info[, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info]) -> (jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    {{fc_name}}(fw_jobz, fw_range, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['sstevx_c', 'dstevx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['sstevx', 'dstevx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, fwi_integer_t n, object d, object e, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info[, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info]) -> (jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    n : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    {{fc_name}}(fw_jobz, fw_range, &n, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info,)
{{endfor}}


cpdef api object ssycon(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwr_real_t anorm, fwr_real_t rcond, object work, object iwork, fwi_integer_t info):
    """ssycon(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info[, uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info]) -> (uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_real, intent inout
    rcond : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    ssycon_c(fw_uplo, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ssycon' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info,)


{{for fc_name, ktp, name, npy_enum
      in zip(['ssyconv_c', 'dsyconv_c', 'csyconv_c', 'zsyconv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_dbl_complex_t'],
             ['ssyconv', 'dsyconv', 'csyconv', 'zsyconv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_dbl_complex_t_enum'])}}
cpdef api object {{name}}(object uplo, object way, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t info):
    """{{name}}(uplo, way, n, a, lda, ipiv, work, info[, uplo, way, n, a, lda, ipiv, work, info]) -> (uplo, way, n, a, lda, ipiv, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    way : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    way : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_way = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_way[0] = fw_aschar(way)
    if fw_way[0] == 0:
        raise ValueError("len(way) != 1")
    {{fc_name}}(fw_uplo, fw_way, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_way, n, a, lda, ipiv, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['ssyequb_c', 'dsyequb_c', 'csyequb_c', 'zsyequb_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['ssyequb', 'dsyequb', 'csyequb', 'zsyequb'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object s, {{ktp2}} scond, {{ktp2}} amax, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, s, scond, amax, work, info[, uplo, n, a, lda, s, scond, amax, work, info]) -> (uplo, n, a, lda, s, scond, amax, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    scond : {{ktp2}}_, intent inout
    amax : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), &scond, &amax, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, s, scond, amax, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssyev_c', 'dsyev_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssyev', 'dsyev'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object w, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, a, lda, w, work, lwork, info[, jobz, uplo, n, a, lda, w, work, lwork, info]) -> (jobz, uplo, n, a, lda, w, work, lwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, a, lda, w, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssyevd_c', 'dsyevd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssyevd', 'dsyevd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object w, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info[, jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info]) -> (jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_uplo, n, a, lda, w, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssyevr_c', 'dsyevr_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssyevr', 'dsyevr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object isuppz, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info[, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info]) -> (jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    isuppz : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray isuppz_
    cdef fw_shape_t isuppz_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    isuppz_, isuppz = fw_asfortranarray(isuppz, fwi_integer_t_enum, 1, False)
    fw_copyshape(isuppz_shape_, np.PyArray_DIMS(isuppz_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, isuppz_shape_, <fwi_integer_t*>np.PyArray_DATA(isuppz_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssyevx_c', 'dsyevx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssyevx', 'dsyevx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobz, object range, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info[, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info]) -> (jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)

    Parameters
    ----------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_jobz, fw_range, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobz, fw_range, fw_uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssygs2_c', 'dsygs2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssygs2', 'dsygs2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(itype, uplo, n, a, lda, b, ldb, info[, itype, uplo, n, a, lda, b, ldb, info]) -> (itype, uplo, n, a, lda, b, ldb, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_uplo, n, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssygst_c', 'dsygst_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssygst', 'dsygst'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(itype, uplo, n, a, lda, b, ldb, info[, itype, uplo, n, a, lda, b, ldb, info]) -> (itype, uplo, n, a, lda, b, ldb, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_uplo, n, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssygv_c', 'dsygv_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssygv', 'dsygv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object w, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info[, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info]) -> (itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, a, lda, b, ldb, w, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssygvd_c', 'dsygvd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssygvd', 'dsygvd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object w, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """{{name}}(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info[, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info]) -> (itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssygvx_c', 'dsygvx_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssygvx', 'dsygvx'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t itype, object jobz, object range, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, {{ktp}} vl, {{ktp}} vu, fwi_integer_t il, fwi_integer_t iu, {{ktp}} abstol, fwi_integer_t m, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object iwork, object ifail, fwi_integer_t info):
    """{{name}}(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info[, itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info]) -> (itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)

    Parameters
    ----------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    itype : fwi_integer, intent inout
    jobz : object_, intent inout
    range : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    vl : {{ktp}}_, intent inout
    vu : {{ktp}}_, intent inout
    il : fwi_integer, intent inout
    iu : fwi_integer, intent inout
    abstol : {{ktp}}_, intent inout
    m : fwi_integer, intent inout
    w : {{ktp}}_, 1D array, dimension(*), intent inout
    z : {{ktp}}_, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    ifail : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef char *fw_range = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray ifail_
    cdef fw_shape_t ifail_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, {{npy_enum}}, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, {{npy_enum}}, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ifail_, ifail = fw_asfortranarray(ifail, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifail_shape_, np.PyArray_DIMS(ifail_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    fw_range[0] = fw_aschar(range)
    if fw_range[0] == 0:
        raise ValueError("len(range) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(&itype, fw_jobz, fw_range, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &vl, &vu, &il, &iu, &abstol, &m, w_shape_, <{{ktp}}*>np.PyArray_DATA(w_), z_shape_, <{{ktp}}*>np.PyArray_DATA(z_), &ldz, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), ifail_shape_, <fwi_integer_t*>np.PyArray_DATA(ifail_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (itype, fw_jobz, fw_range, fw_uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['ssyrfs_c', 'dsyrfs_c', 'csyrfs_c', 'zsyrfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['ssyrfs', 'dsyrfs', 'csyrfs', 'zsyrfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['ssyrfsx_c', 'dsyrfsx_c', 'csyrfsx_c', 'zsyrfsx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['ssyrfsx', 'dsyrfsx', 'csyrfsx', 'zsyrfsx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object equed, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    equed : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_uplo, fw_equed, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssysv_c', 'dsysv_c', 'csysv_c', 'zsysv_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssysv', 'dsysv', 'csysv', 'zsysv'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info[, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info]) -> (uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['ssysvx_c', 'dsysvx_c', 'csysvx_c', 'zsysvx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['ssysvx', 'dsysvx', 'csysvx', 'zsysvx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, object ferr, object berr, object work, fwi_integer_t lwork, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, {{name2}}, info[, fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, {{name2}}, info]) -> (fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['ssysvxx_c', 'dsysvxx_c', 'csysvxx_c', 'zsysvxx_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['ssysvxx', 'dsysvxx', 'csysvxx', 'zsysvxx'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object fact, object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object af, fwi_integer_t ldaf, object ipiv, object equed, object s, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, {{ktp2}} rcond, {{ktp2}} rpvgrw, object berr, fwi_integer_t n_err_bnds, object err_bnds_norm, object err_bnds_comp, fwi_integer_t nparams, object params, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info[, fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info]) -> (fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info)

    Parameters
    ----------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    af : {{ktp}}_, 2D array, dimension(ldaf, *), intent inout
    ldaf : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    equed : object_, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    rpvgrw : {{ktp2}}_, intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    n_err_bnds : fwi_integer, intent inout
    err_bnds_norm : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    err_bnds_comp : {{ktp2}}_, 2D array, dimension(nrhs, *), intent inout
    nparams : fwi_integer, intent inout
    params : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray af_
    cdef fw_shape_t af_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef char *fw_equed = [0, 0]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray err_bnds_norm_
    cdef fw_shape_t err_bnds_norm_shape_[2]
    cdef np.ndarray err_bnds_comp_
    cdef fw_shape_t err_bnds_comp_shape_[2]
    cdef np.ndarray params_
    cdef fw_shape_t params_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    af_, af = fw_asfortranarray(af, {{npy_enum}}, 2, False)
    fw_copyshape(af_shape_, np.PyArray_DIMS(af_), 2)
    if ldaf != af_shape_[0]:
        raise ValueError("(ldaf == af.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    err_bnds_norm_, err_bnds_norm = fw_asfortranarray(err_bnds_norm, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_norm_shape_, np.PyArray_DIMS(err_bnds_norm_), 2)
    if nrhs != err_bnds_norm_shape_[0]:
        raise ValueError("(nrhs == err_bnds_norm.shape[0]) not satisifed")
    err_bnds_comp_, err_bnds_comp = fw_asfortranarray(err_bnds_comp, {{npy_enum2}}, 2, False)
    fw_copyshape(err_bnds_comp_shape_, np.PyArray_DIMS(err_bnds_comp_), 2)
    if nrhs != err_bnds_comp_shape_[0]:
        raise ValueError("(nrhs == err_bnds_comp.shape[0]) not satisifed")
    params_, params = fw_asfortranarray(params, {{npy_enum2}}, 1, False)
    fw_copyshape(params_shape_, np.PyArray_DIMS(params_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_equed[0] = fw_aschar(equed)
    if fw_equed[0] == 0:
        raise ValueError("len(equed) != 1")
    {{fc_name}}(fw_fact, fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, af_shape_, <{{ktp}}*>np.PyArray_DATA(af_), &ldaf, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), fw_equed, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, &rcond, &rpvgrw, berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), &n_err_bnds, err_bnds_norm_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_norm_), err_bnds_comp_shape_, <{{ktp2}}*>np.PyArray_DATA(err_bnds_comp_), &nparams, params_shape_, <{{ktp2}}*>np.PyArray_DATA(params_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_fact, fw_uplo, n, nrhs, a, lda, af, ldaf, ipiv, fw_equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssyswapr_c', 'dsyswapr_c', 'csyswapr_c', 'zsyswapr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_dbl_complex_t'],
             ['ssyswapr', 'dsyswapr', 'csyswapr', 'zsyswapr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_dbl_complex_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t i1, fwi_integer_t i2):
    """{{name}}(uplo, n, a, i1, i2[, uplo, n, a, i1, i2]) -> (uplo, n, a, i1, i2)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(n, n), intent inout
    i1 : fwi_integer, intent inout
    i2 : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(n, n), intent inout
    i1 : fwi_integer, intent inout
    i2 : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if n != a_shape_[0]:
        raise ValueError("(n == a.shape[0]) not satisifed")
    if not (0 <= n <= a_shape_[1]):
        raise ValueError("(0 <= n <= a.shape[1]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &i1, &i2, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, i1, i2,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytd2_c', 'dsytd2_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssytd2', 'dsytd2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object d, object e, object tau, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, d, e, tau, info[, uplo, n, a, lda, d, e, tau, info]) -> (uplo, n, a, lda, d, e, tau, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, d, e, tau, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytf2_c', 'dsytf2_c', 'csytf2_c', 'zsytf2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssytf2', 'dsytf2', 'csytf2', 'zsytf2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, info[, uplo, n, a, lda, ipiv, info]) -> (uplo, n, a, lda, ipiv, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytrd_c', 'dsytrd_c'],
             ['fwr_real_t', 'fwr_dbl_t'],
             ['ssytrd', 'dsytrd'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object d, object e, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, d, e, tau, work, lwork, info[, uplo, n, a, lda, d, e, tau, work, lwork, info]) -> (uplo, n, a, lda, d, e, tau, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    d : {{ktp}}_, 1D array, dimension(*), intent inout
    e : {{ktp}}_, 1D array, dimension(*), intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, d, e, tau, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytrf_c', 'dsytrf_c', 'csytrf_c', 'zsytrf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssytrf', 'dsytrf', 'csytrf', 'zsytrf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, work, lwork, info[, uplo, n, a, lda, ipiv, work, lwork, info]) -> (uplo, n, a, lda, ipiv, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytri_c', 'dsytri_c', 'csytri_c', 'zsytri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssytri', 'dsytri', 'csytri', 'zsytri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, work, info[, uplo, n, a, lda, ipiv, work, info]) -> (uplo, n, a, lda, ipiv, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, work, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytri2_c', 'dsytri2_c', 'csytri2_c', 'zsytri2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_dbl_complex_t'],
             ['ssytri2', 'dsytri2', 'csytri2', 'zsytri2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_dbl_complex_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, work, lwork, info[, uplo, n, a, lda, ipiv, work, lwork, info]) -> (uplo, n, a, lda, ipiv, work, lwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, work, lwork, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytri2x_c', 'dsytri2x_c', 'csytri2x_c', 'zsytri2x_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_dbl_complex_t'],
             ['ssytri2x', 'dsytri2x', 'csytri2x', 'zsytri2x'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_dbl_complex_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, object work, fwi_integer_t nb, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ipiv, work, nb, info[, uplo, n, a, lda, ipiv, work, nb, info]) -> (uplo, n, a, lda, ipiv, work, nb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 2D array, dimension(n+nb+1, *), intent inout
    nb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 2D array, dimension(n+nb+1, *), intent inout
    nb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &nb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, work, nb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytrs_c', 'dsytrs_c', 'csytrs_c', 'zsytrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['ssytrs', 'dsytrs', 'csytrs', 'zsytrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, ipiv, b, ldb, info[, uplo, n, nrhs, a, lda, ipiv, b, ldb, info]) -> (uplo, n, nrhs, a, lda, ipiv, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, ipiv, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['ssytrs2_c', 'dsytrs2_c', 'csytrs2_c', 'zsytrs2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_dbl_complex_t'],
             ['ssytrs2', 'dsytrs2', 'csytrs2', 'zsytrs2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_dbl_complex_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, object work, fwi_integer_t info):
    """{{name}}(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info[, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info]) -> (uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['stbcon_c', 'dtbcon_c', 'ctbcon_c', 'ztbcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stbcon', 'dtbcon', 'ctbcon', 'ztbcon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, object diag, fwi_integer_t n, fwi_integer_t kd, object ab, fwi_integer_t ldab, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(norm, uplo, diag, n, kd, ab, ldab, rcond, work, {{name2}}, info[, norm, uplo, diag, n, kd, ab, ldab, rcond, work, {{name2}}, info]) -> (norm, uplo, diag, n, kd, ab, ldab, rcond, work, {{name2}}, info)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_norm, fw_uplo, fw_diag, &n, &kd, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_norm, fw_uplo, fw_diag, n, kd, ab, ldab, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['stbrfs_c', 'dtbrfs_c', 'ctbrfs_c', 'ztbrfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stbrfs', 'dtbrfs', 'ctbrfs', 'ztbrfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, fwi_integer_t n, fwi_integer_t kd, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, &n, &kd, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stbtrs_c', 'dtbtrs_c', 'ctbtrs_c', 'ztbtrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stbtrs', 'dtbtrs', 'ctbtrs', 'ztbtrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, fwi_integer_t n, fwi_integer_t kd, fwi_integer_t nrhs, object ab, fwi_integer_t ldab, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info[, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info]) -> (uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    kd : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ab : {{ktp}}_, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, {{npy_enum}}, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, &n, &kd, &nrhs, ab_shape_, <{{ktp}}*>np.PyArray_DATA(ab_), &ldab, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, n, kd, nrhs, ab, ldab, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stfsm_c', 'dtfsm_c', 'ctfsm_c', 'ztfsm_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stfsm', 'dtfsm', 'ctfsm', 'ztfsm'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object side, object uplo, object trans, object diag, fwi_integer_t m, fwi_integer_t n, {{ktp}} alpha, object a, object b, fwi_integer_t ldb):
    """{{name}}(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb[, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb]) -> (transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb)

    Parameters
    ----------
    transr : object_, intent inout
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    b : {{ktp}}_, 2D array, dimension(0:ldb-1, 0:*), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    side : object_, intent inout
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    alpha : {{ktp}}_, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    b : {{ktp}}_, 2D array, dimension(0:ldb-1, 0:*), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_side = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_transr, fw_side, fw_uplo, fw_trans, fw_diag, &m, &n, &alpha, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_side, fw_uplo, fw_trans, fw_diag, m, n, alpha, a, b, ldb,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stftri_c', 'dtftri_c', 'ctftri_c', 'ztftri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stftri', 'dtftri', 'ctftri', 'ztftri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, object diag, fwi_integer_t n, object a, fwi_integer_t info):
    """{{name}}(transr, uplo, diag, n, a, info[, transr, uplo, diag, n, a, info]) -> (transr, uplo, diag, n, a, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 1, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_transr, fw_uplo, fw_diag, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, fw_diag, n, a, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stfttp_c', 'dtfttp_c', 'ctfttp_c', 'ztfttp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stfttp', 'dtfttp', 'ctfttp', 'ztfttp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, object arf, object ap, fwi_integer_t info):
    """{{name}}(transr, uplo, n, arf, ap, info[, transr, uplo, n, arf, ap, info]) -> (transr, uplo, n, arf, ap, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    ap : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    ap : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray arf_
    cdef fw_shape_t arf_shape_[1]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    arf_, arf = fw_asfortranarray(arf, {{npy_enum}}, 1, False)
    fw_copyshape(arf_shape_, np.PyArray_DIMS(arf_), 1)
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, arf_shape_, <{{ktp}}*>np.PyArray_DATA(arf_), ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, arf, ap, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stfttr_c', 'dtfttr_c', 'ctfttr_c', 'ztfttr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stfttr', 'dtfttr', 'ctfttr', 'ztfttr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, object arf, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(transr, uplo, n, arf, a, lda, info[, transr, uplo, n, arf, a, lda, info]) -> (transr, uplo, n, arf, a, lda, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    a : {{ktp}}_, 2D array, dimension(0:lda-1, 0:*), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    a : {{ktp}}_, 2D array, dimension(0:lda-1, 0:*), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray arf_
    cdef fw_shape_t arf_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    arf_, arf = fw_asfortranarray(arf, {{npy_enum}}, 1, False)
    fw_copyshape(arf_shape_, np.PyArray_DIMS(arf_), 1)
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, arf_shape_, <{{ktp}}*>np.PyArray_DATA(arf_), a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, arf, a, lda, info,)
{{endfor}}


cpdef api object stgevc(object side, object howmny, object select, fwi_integer_t n, object s, fwi_integer_t lds, object p, fwi_integer_t ldp, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, fwi_integer_t info):
    """stgevc(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info[, side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info]) -> (side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwr_real, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwr_real, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwr_real, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwr_real, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[2]
    cdef np.ndarray p_
    cdef fw_shape_t p_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    s_, s = fw_asfortranarray(s, fwr_real_t_enum, 2, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 2)
    if lds != s_shape_[0]:
        raise ValueError("(lds == s.shape[0]) not satisifed")
    p_, p = fw_asfortranarray(p, fwr_real_t_enum, 2, False)
    fw_copyshape(p_shape_, np.PyArray_DIMS(p_), 2)
    if ldp != p_shape_[0]:
        raise ValueError("(ldp == p.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    stgevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, s_shape_, <fwr_real_t*>np.PyArray_DATA(s_), &lds, p_shape_, <fwr_real_t*>np.PyArray_DATA(p_), &ldp, vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'stgevc' wrapper.")
    return (fw_side, fw_howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info,)


cpdef api object stgex2(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t j1, fwi_integer_t n1, fwi_integer_t n2, object work, fwi_integer_t lwork, fwi_integer_t info):
    """stgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    n1 : fwi_integer, intent inout
    n2 : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    stgex2_c(&wantq_, &wantz_, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, &j1, &n1, &n2, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'stgex2' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info,)


cpdef api object stgexc(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t ifst, fwi_integer_t ilst, object work, fwi_integer_t lwork, fwi_integer_t info):
    """stgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    stgexc_c(&wantq_, &wantz_, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, &ifst, &ilst, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'stgexc' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info,)


cpdef api object stgsen(fwi_integer_t ijob, bint wantq, bint wantz, object select, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alphar, object alphai, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t m, fwr_real_t pl, fwr_real_t pr, object dif, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """stgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info[, ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info]) -> (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_real, intent inout
    pr : fwr_real, intent inout
    dif : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alphar : fwr_real, 1D array, dimension(*), intent inout
    alphai : fwr_real, 1D array, dimension(*), intent inout
    beta : fwr_real, 1D array, dimension(*), intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwr_real, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_real, intent inout
    pr : fwr_real, intent inout
    dif : fwr_real, 1D array, dimension(*), intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alphar_
    cdef fw_shape_t alphar_shape_[1]
    cdef np.ndarray alphai_
    cdef fw_shape_t alphai_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray dif_
    cdef fw_shape_t dif_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alphar_, alphar = fw_asfortranarray(alphar, fwr_real_t_enum, 1, False)
    fw_copyshape(alphar_shape_, np.PyArray_DIMS(alphar_), 1)
    alphai_, alphai = fw_asfortranarray(alphai, fwr_real_t_enum, 1, False)
    fw_copyshape(alphai_shape_, np.PyArray_DIMS(alphai_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_real_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwr_real_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    dif_, dif = fw_asfortranarray(dif, fwr_real_t_enum, 1, False)
    fw_copyshape(dif_shape_, np.PyArray_DIMS(dif_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    stgsen_c(&ijob, &wantq_, &wantz_, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, alphar_shape_, <fwr_real_t*>np.PyArray_DATA(alphar_), alphai_shape_, <fwr_real_t*>np.PyArray_DATA(alphai_), beta_shape_, <fwr_real_t*>np.PyArray_DATA(beta_), q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwr_real_t*>np.PyArray_DATA(z_), &ldz, &m, &pl, &pr, dif_shape_, <fwr_real_t*>np.PyArray_DATA(dif_), work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'stgsen' wrapper.")
    return (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info,)


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['stgsja_c', 'dtgsja_c', 'ctgsja_c', 'ztgsja_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stgsja', 'dtgsja', 'ctgsja', 'ztgsja'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t p, fwi_integer_t n, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, {{ktp2}} tola, {{ktp2}} tolb, object alpha, object beta, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object work, fwi_integer_t ncycle, fwi_integer_t info):
    """{{name}}(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info[, jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info]) -> (jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : {{ktp2}}_, intent inout
    tolb : {{ktp2}}_, intent inout
    alpha : {{ktp2}}_, 1D array, dimension(*), intent inout
    beta : {{ktp2}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    ncycle : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : {{ktp2}}_, intent inout
    tolb : {{ktp2}}_, intent inout
    alpha : {{ktp2}}_, 1D array, dimension(*), intent inout
    beta : {{ktp2}}_, 1D array, dimension(*), intent inout
    u : {{ktp}}_, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : {{ktp}}_, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : {{ktp}}_, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    ncycle : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, {{npy_enum2}}, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, {{npy_enum2}}, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    u_, u = fw_asfortranarray(u, {{npy_enum}}, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, {{npy_enum}}, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, {{npy_enum}}, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    {{fc_name}}(fw_jobu, fw_jobv, fw_jobq, &m, &p, &n, &k, &l, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &tola, &tolb, alpha_shape_, <{{ktp2}}*>np.PyArray_DATA(alpha_), beta_shape_, <{{ktp2}}*>np.PyArray_DATA(beta_), u_shape_, <{{ktp}}*>np.PyArray_DATA(u_), &ldu, v_shape_, <{{ktp}}*>np.PyArray_DATA(v_), &ldv, q_shape_, <{{ktp}}*>np.PyArray_DATA(q_), &ldq, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &ncycle, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum, npy_enum2
      in zip(['stgsna_c', 'dtgsna_c', 'ctgsna_c', 'ztgsna_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stgsna', 'dtgsna', 'ctgsna', 'ztgsna'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object job, object howmny, object select, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object s, object dif, fwi_integer_t mm, fwi_integer_t m, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """{{name}}(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info[, job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info]) -> (job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info)

    Parameters
    ----------
    job : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    vl : {{ktp}}_, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : {{ktp}}_, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    dif : {{ktp2}}_, 1D array, dimension(*), intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    vl : {{ktp}}_, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : {{ktp}}_, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    dif : {{ktp2}}_, 1D array, dimension(*), intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray dif_
    cdef fw_shape_t dif_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, {{npy_enum}}, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, {{npy_enum}}, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    dif_, dif = fw_asfortranarray(dif, {{npy_enum2}}, 1, False)
    fw_copyshape(dif_shape_, np.PyArray_DIMS(dif_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    {{fc_name}}(fw_job, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, vl_shape_, <{{ktp}}*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <{{ktp}}*>np.PyArray_DATA(vr_), &ldvr, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), dif_shape_, <{{ktp2}}*>np.PyArray_DATA(dif_), &mm, &m, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, fw_howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info,)
{{endfor}}


cpdef api object stgsy2(object trans, fwi_integer_t ijob, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object d, fwi_integer_t ldd, object e, fwi_integer_t lde, object f, fwi_integer_t ldf, fwr_real_t scale, fwr_real_t rdsum, fwr_real_t rdscal, object iwork, fwi_integer_t pq, fwi_integer_t info):
    """stgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info[, trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info]) -> (trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info)

    Parameters
    ----------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwr_real, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwr_real, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwr_real, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwr_real, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_real, intent inout
    rdsum : fwr_real, intent inout
    rdscal : fwr_real, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pq : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwr_real, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwr_real, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwr_real, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwr_real, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwr_real, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwr_real, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_real, intent inout
    rdsum : fwr_real, intent inout
    rdscal : fwr_real, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    pq : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[2]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[2]
    cdef np.ndarray f_
    cdef fw_shape_t f_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwr_real_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwr_real_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwr_real_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_real_t_enum, 2, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 2)
    if ldd != d_shape_[0]:
        raise ValueError("(ldd == d.shape[0]) not satisifed")
    e_, e = fw_asfortranarray(e, fwr_real_t_enum, 2, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 2)
    if lde != e_shape_[0]:
        raise ValueError("(lde == e.shape[0]) not satisifed")
    f_, f = fw_asfortranarray(f, fwr_real_t_enum, 2, False)
    fw_copyshape(f_shape_, np.PyArray_DIMS(f_), 2)
    if ldf != f_shape_[0]:
        raise ValueError("(ldf == f.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    stgsy2_c(fw_trans, &ijob, &m, &n, a_shape_, <fwr_real_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwr_real_t*>np.PyArray_DATA(b_), &ldb, c_shape_, <fwr_real_t*>np.PyArray_DATA(c_), &ldc, d_shape_, <fwr_real_t*>np.PyArray_DATA(d_), &ldd, e_shape_, <fwr_real_t*>np.PyArray_DATA(e_), &lde, f_shape_, <fwr_real_t*>np.PyArray_DATA(f_), &ldf, &scale, &rdsum, &rdscal, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &pq, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'stgsy2' wrapper.")
    return (fw_trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info,)


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['stgsyl_c', 'dtgsyl_c', 'ctgsyl_c', 'ztgsyl_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stgsyl', 'dtgsyl', 'ctgsyl', 'ztgsyl'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trans, fwi_integer_t ijob, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object d, fwi_integer_t ldd, object e, fwi_integer_t lde, object f, fwi_integer_t ldf, {{ktp2}} scale, {{ktp2}} dif, object work, fwi_integer_t lwork, object iwork, fwi_integer_t info):
    """{{name}}(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info[, trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info]) -> (trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info)

    Parameters
    ----------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : {{ktp}}_, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : {{ktp}}_, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : {{ktp}}_, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : {{ktp2}}_, intent inout
    dif : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : {{ktp}}_, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : {{ktp}}_, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : {{ktp}}_, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : {{ktp2}}_, intent inout
    dif : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[2]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[2]
    cdef np.ndarray f_
    cdef fw_shape_t f_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, {{npy_enum}}, 2, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 2)
    if ldd != d_shape_[0]:
        raise ValueError("(ldd == d.shape[0]) not satisifed")
    e_, e = fw_asfortranarray(e, {{npy_enum}}, 2, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 2)
    if lde != e_shape_[0]:
        raise ValueError("(lde == e.shape[0]) not satisifed")
    f_, f = fw_asfortranarray(f, {{npy_enum}}, 2, False)
    fw_copyshape(f_shape_, np.PyArray_DIMS(f_), 2)
    if ldf != f_shape_[0]:
        raise ValueError("(ldf == f.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    {{fc_name}}(fw_trans, &ijob, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, d_shape_, <{{ktp}}*>np.PyArray_DATA(d_), &ldd, e_shape_, <{{ktp}}*>np.PyArray_DATA(e_), &lde, f_shape_, <{{ktp}}*>np.PyArray_DATA(f_), &ldf, &scale, &dif, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['stpcon_c', 'dtpcon_c', 'ctpcon_c', 'ztpcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stpcon', 'dtpcon', 'ctpcon', 'ztpcon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, object diag, fwi_integer_t n, object ap, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(norm, uplo, diag, n, ap, rcond, work, {{name2}}, info[, norm, uplo, diag, n, ap, rcond, work, {{name2}}, info]) -> (norm, uplo, diag, n, ap, rcond, work, {{name2}}, info)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_norm, fw_uplo, fw_diag, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_norm, fw_uplo, fw_diag, n, ap, rcond, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['stprfs_c', 'dtprfs_c', 'ctprfs_c', 'ztprfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['stprfs', 'dtprfs', 'ctprfs', 'ztprfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, fwi_integer_t n, fwi_integer_t nrhs, object ap, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stptri_c', 'dtptri_c', 'ctptri_c', 'ztptri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stptri', 'dtptri', 'ctptri', 'ztptri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, object diag, fwi_integer_t n, object ap, fwi_integer_t info):
    """{{name}}(uplo, diag, n, ap, info[, uplo, diag, n, ap, info]) -> (uplo, diag, n, ap, info)

    Parameters
    ----------
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_diag, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_diag, n, ap, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stptrs_c', 'dtptrs_c', 'ctptrs_c', 'ztptrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stptrs', 'dtptrs', 'ctptrs', 'ztptrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, fwi_integer_t n, fwi_integer_t nrhs, object ap, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, n, nrhs, ap, b, ldb, info[, uplo, trans, diag, n, nrhs, ap, b, ldb, info]) -> (uplo, trans, diag, n, nrhs, ap, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, &n, &nrhs, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, n, nrhs, ap, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stpttf_c', 'dtpttf_c', 'ctpttf_c', 'ztpttf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stpttf', 'dtpttf', 'ctpttf', 'ztpttf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, object ap, object arf, fwi_integer_t info):
    """{{name}}(transr, uplo, n, ap, arf, info[, transr, uplo, n, ap, arf, info]) -> (transr, uplo, n, ap, arf, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(0:*), intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(0:*), intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray arf_
    cdef fw_shape_t arf_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    arf_, arf = fw_asfortranarray(arf, {{npy_enum}}, 1, False)
    fw_copyshape(arf_shape_, np.PyArray_DIMS(arf_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), arf_shape_, <{{ktp}}*>np.PyArray_DATA(arf_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, ap, arf, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stpttr_c', 'dtpttr_c', 'ctpttr_c', 'ztpttr_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stpttr', 'dtpttr', 'ctpttr', 'ztpttr'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object ap, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, n, ap, a, lda, info[, uplo, n, ap, a, lda, info]) -> (uplo, n, ap, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, ap, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2
      in zip(['strcon_c', 'dtrcon_c', 'ctrcon_c', 'ztrcon_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['strcon', 'dtrcon', 'ctrcon', 'ztrcon'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object norm, object uplo, object diag, fwi_integer_t n, object a, fwi_integer_t lda, {{ktp2}} rcond, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(norm, uplo, diag, n, a, lda, rcond, work, {{name2}}, info[, norm, uplo, diag, n, a, lda, rcond, work, {{name2}}, info]) -> (norm, uplo, diag, n, a, lda, rcond, work, {{name2}}, info)

    Parameters
    ----------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    rcond : {{ktp2}}_, intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum2}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_norm, fw_uplo, fw_diag, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &rcond, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_norm, fw_uplo, fw_diag, n, a, lda, rcond, work, {{name2}}, info,)
{{endfor}}


cpdef api object strevc(object side, object howmny, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, fwi_integer_t info):
    """strevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info[, side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info]) -> (side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwr_real, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwr_real, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwr_real_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwr_real_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwr_real_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    strevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwr_real_t*>np.PyArray_DATA(t_), &ldt, vl_shape_, <fwr_real_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwr_real_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'strevc' wrapper.")
    return (fw_side, fw_howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info,)


cpdef api object strexc(object compq, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, fwi_integer_t ifst, fwi_integer_t ilst, object work, fwi_integer_t info):
    """strexc(compq, n, t, ldt, q, ldq, ifst, ilst, work, info[, compq, n, t, ldt, q, ldq, ifst, ilst, work, info]) -> (compq, n, t, ldt, q, ldq, ifst, ilst, work, info)

    Parameters
    ----------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    t_, t = fw_asfortranarray(t, fwr_real_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    strexc_c(fw_compq, &n, t_shape_, <fwr_real_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, &ifst, &ilst, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'strexc' wrapper.")
    return (fw_compq, n, t, ldt, q, ldq, ifst, ilst, work, info,)


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['strrfs_c', 'dtrrfs_c', 'ctrrfs_c', 'ztrrfs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['strrfs', 'dtrrfs', 'ctrrfs', 'ztrrfs'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object {{name2}}, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info[, uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info]) -> (uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : {{ktp}}_, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : {{ktp2}}_, 1D array, dimension(*), intent inout
    berr : {{ktp2}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, {{npy_enum}}, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, {{npy_enum2}}, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, {{npy_enum2}}, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, x_shape_, <{{ktp}}*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <{{ktp2}}*>np.PyArray_DATA(ferr_), berr_shape_, <{{ktp2}}*>np.PyArray_DATA(berr_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, {{name2}}, info,)
{{endfor}}


cpdef api object strsen(object job, object compq, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, object wr, object wi, fwi_integer_t m, fwr_real_t s, fwr_real_t sep, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """strsen(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info[, job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info]) -> (job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_real, intent inout
    sep : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwr_real, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwr_real, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    wr : fwr_real, 1D array, dimension(*), intent inout
    wi : fwr_real, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_real, intent inout
    sep : fwr_real, intent inout
    work : fwr_real, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray wr_
    cdef fw_shape_t wr_shape_[1]
    cdef np.ndarray wi_
    cdef fw_shape_t wi_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwr_real_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwr_real_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    wr_, wr = fw_asfortranarray(wr, fwr_real_t_enum, 1, False)
    fw_copyshape(wr_shape_, np.PyArray_DIMS(wr_), 1)
    wi_, wi = fw_asfortranarray(wi, fwr_real_t_enum, 1, False)
    fw_copyshape(wi_shape_, np.PyArray_DIMS(wi_), 1)
    work_, work = fw_asfortranarray(work, fwr_real_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    strsen_c(fw_job, fw_compq, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwr_real_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwr_real_t*>np.PyArray_DATA(q_), &ldq, wr_shape_, <fwr_real_t*>np.PyArray_DATA(wr_), wi_shape_, <fwr_real_t*>np.PyArray_DATA(wi_), &m, &s, &sep, work_shape_, <fwr_real_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'strsen' wrapper.")
    return (fw_job, fw_compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info,)


{{for fc_name, ktp, ktp2, ktp3, name, name2, npy_enum, npy_enum2, npy_enum3
      in zip(['strsna_c', 'dtrsna_c', 'ctrsna_c', 'ztrsna_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['fwi_integer_t', 'fwi_integer_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['strsna', 'dtrsna', 'ctrsna', 'ztrsna'],
             ['iwork', 'iwork', 'rwork', 'rwork'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'],
             ['fwi_integer_t_enum', 'fwi_integer_t_enum', 'fwr_real_t_enum', 'fwr_dbl_t_enum'])}}
cpdef api object {{name}}(object job, object howmny, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object s, object sep, fwi_integer_t mm, fwi_integer_t m, object work, fwi_integer_t ldwork, object {{name2}}, fwi_integer_t info):
    """{{name}}(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, {{name2}}, info[, job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, {{name2}}, info]) -> (job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, {{name2}}, info)

    Parameters
    ----------
    job : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : {{ktp}}_, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : {{ktp}}_, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    sep : {{ktp2}}_, 1D array, dimension(*), intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : {{ktp}}_, 2D array, dimension(ldwork, *), intent inout
    ldwork : fwi_integer, intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : {{ktp}}_, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : {{ktp}}_, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : {{ktp}}_, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    s : {{ktp2}}_, 1D array, dimension(*), intent inout
    sep : {{ktp2}}_, 1D array, dimension(*), intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : {{ktp}}_, 2D array, dimension(ldwork, *), intent inout
    ldwork : fwi_integer, intent inout
    {{name2}} : {{ktp3}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray sep_
    cdef fw_shape_t sep_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef np.ndarray {{name2}}_
    cdef fw_shape_t {{name2}}_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, {{npy_enum}}, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, {{npy_enum}}, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, {{npy_enum}}, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, {{npy_enum2}}, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    sep_, sep = fw_asfortranarray(sep, {{npy_enum2}}, 1, False)
    fw_copyshape(sep_shape_, np.PyArray_DIMS(sep_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if ldwork != work_shape_[0]:
        raise ValueError("(ldwork == work.shape[0]) not satisifed")
    {{name2}}_, {{name2}} = fw_asfortranarray({{name2}}, {{npy_enum3}}, 1, False)
    fw_copyshape({{name2}}_shape_, np.PyArray_DIMS({{name2}}_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    {{fc_name}}(fw_job, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <{{ktp}}*>np.PyArray_DATA(t_), &ldt, vl_shape_, <{{ktp}}*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <{{ktp}}*>np.PyArray_DATA(vr_), &ldvr, s_shape_, <{{ktp2}}*>np.PyArray_DATA(s_), sep_shape_, <{{ktp2}}*>np.PyArray_DATA(sep_), &mm, &m, work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &ldwork, {{name2}}_shape_, <{{ktp3}}*>np.PyArray_DATA({{name2}}_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_job, fw_howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, {{name2}}, info,)
{{endfor}}


{{for fc_name, ktp, ktp2, name, npy_enum
      in zip(['strsyl_c', 'dtrsyl_c', 'ctrsyl_c', 'ztrsyl_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwr_real_t', 'fwr_dbl_t'],
             ['strsyl', 'dtrsyl', 'ctrsyl', 'ztrsyl'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object trana, object tranb, fwi_integer_t isgn, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, {{ktp2}} scale, fwi_integer_t info):
    """{{name}}(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info[, trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info]) -> (trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)

    Parameters
    ----------
    trana : object_, intent inout
    tranb : object_, intent inout
    isgn : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    scale : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trana : object_, intent inout
    tranb : object_, intent inout
    isgn : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : {{ktp}}_, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    scale : {{ktp2}}_, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trana = [0, 0]
    cdef char *fw_tranb = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, {{npy_enum}}, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    fw_trana[0] = fw_aschar(trana)
    if fw_trana[0] == 0:
        raise ValueError("len(trana) != 1")
    fw_tranb[0] = fw_aschar(tranb)
    if fw_tranb[0] == 0:
        raise ValueError("len(tranb) != 1")
    {{fc_name}}(fw_trana, fw_tranb, &isgn, &m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, c_shape_, <{{ktp}}*>np.PyArray_DATA(c_), &ldc, &scale, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_trana, fw_tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['strti2_c', 'dtrti2_c', 'ctrti2_c', 'ztrti2_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['strti2', 'dtrti2', 'ctrti2', 'ztrti2'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, object diag, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, diag, n, a, lda, info[, uplo, diag, n, a, lda, info]) -> (uplo, diag, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_diag, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_diag, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['strtri_c', 'dtrtri_c', 'ctrtri_c', 'ztrtri_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['strtri', 'dtrtri', 'ctrtri', 'ztrtri'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, object diag, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t info):
    """{{name}}(uplo, diag, n, a, lda, info[, uplo, diag, n, a, lda, info]) -> (uplo, diag, n, a, lda, info)

    Parameters
    ----------
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_diag, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_diag, n, a, lda, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['strtrs_c', 'dtrtrs_c', 'ctrtrs_c', 'ztrtrs_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['strtrs', 'dtrtrs', 'ctrtrs', 'ztrtrs'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, object trans, object diag, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t info):
    """{{name}}(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info[, uplo, trans, diag, n, nrhs, a, lda, b, ldb, info]) -> (uplo, trans, diag, n, nrhs, a, lda, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    trans : object_, intent inout
    diag : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : {{ktp}}_, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef char *fw_trans = [0, 0]
    cdef char *fw_diag = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, {{npy_enum}}, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    fw_diag[0] = fw_aschar(diag)
    if fw_diag[0] == 0:
        raise ValueError("len(diag) != 1")
    {{fc_name}}(fw_uplo, fw_trans, fw_diag, &n, &nrhs, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, b_shape_, <{{ktp}}*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, fw_trans, fw_diag, n, nrhs, a, lda, b, ldb, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['strttf_c', 'dtrttf_c', 'ctrttf_c', 'ztrttf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['strttf', 'dtrttf', 'ctrttf', 'ztrttf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object transr, object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object arf, fwi_integer_t info):
    """{{name}}(transr, uplo, n, a, lda, arf, info[, transr, uplo, n, a, lda, arf, info]) -> (transr, uplo, n, a, lda, arf, info)

    Parameters
    ----------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(0:lda-1, 0:*), intent inout
    lda : fwi_integer, intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    transr : object_, intent inout
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(0:lda-1, 0:*), intent inout
    lda : fwi_integer, intent inout
    arf : {{ktp}}_, 1D array, dimension(0:*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_transr = [0, 0]
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray arf_
    cdef fw_shape_t arf_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    arf_, arf = fw_asfortranarray(arf, {{npy_enum}}, 1, False)
    fw_copyshape(arf_shape_, np.PyArray_DIMS(arf_), 1)
    fw_transr[0] = fw_aschar(transr)
    if fw_transr[0] == 0:
        raise ValueError("len(transr) != 1")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_transr, fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, arf_shape_, <{{ktp}}*>np.PyArray_DATA(arf_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_transr, fw_uplo, n, a, lda, arf, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['strttp_c', 'dtrttp_c', 'ctrttp_c', 'ztrttp_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['strttp', 'dtrttp', 'ctrttp', 'ztrttp'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ap, fwi_integer_t info):
    """{{name}}(uplo, n, a, lda, ap, info[, uplo, n, a, lda, ap, info]) -> (uplo, n, a, lda, ap, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ap : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ap_, ap = fw_asfortranarray(ap, {{npy_enum}}, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    {{fc_name}}(fw_uplo, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, ap_shape_, <{{ktp}}*>np.PyArray_DATA(ap_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (fw_uplo, n, a, lda, ap, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stzrqf_c', 'dtzrqf_c', 'ctzrqf_c', 'ztzrqf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stzrqf', 'dtzrqf', 'ctzrqf', 'ztzrqf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, info[, m, n, a, lda, tau, info]) -> (m, n, a, lda, tau, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, info,)
{{endfor}}


{{for fc_name, ktp, name, npy_enum
      in zip(['stzrzf_c', 'dtzrzf_c', 'ctzrzf_c', 'ztzrzf_c'],
             ['fwr_real_t', 'fwr_dbl_t', 'fwc_complex_t', 'fwc_complex_x16_t'],
             ['stzrzf', 'dtzrzf', 'ctzrzf', 'ztzrzf'],
             ['fwr_real_t_enum', 'fwr_dbl_t_enum', 'fwc_complex_t_enum', 'fwc_complex_x16_t_enum'])}}
cpdef api object {{name}}(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object tau, object work, fwi_integer_t lwork, fwi_integer_t info):
    """{{name}}(m, n, a, lda, tau, work, lwork, info[, m, n, a, lda, tau, work, lwork, info]) -> (m, n, a, lda, tau, work, lwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : {{ktp}}_, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    tau : {{ktp}}_, 1D array, dimension(*), intent inout
    work : {{ktp}}_, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, {{npy_enum}}, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    tau_, tau = fw_asfortranarray(tau, {{npy_enum}}, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, {{npy_enum}}, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    {{fc_name}}(&m, &n, a_shape_, <{{ktp}}*>np.PyArray_DATA(a_), &lda, tau_shape_, <{{ktp}}*>np.PyArray_DATA(tau_), work_shape_, <{{ktp}}*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the '{{name}}' wrapper.")
    return (m, n, a, lda, tau, work, lwork, info,)
{{endfor}}


cpdef api object zcgesv(fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object ipiv, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object work, object swork, object rwork, fwi_integer_t iter, fwi_integer_t info):
    """zcgesv(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, rwork, iter, info[, n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, rwork, iter, info]) -> (n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, rwork, iter, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwc_complex_x16, 2D array, dimension(n, *), intent inout
    swork : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwc_complex_x16, 2D array, dimension(n, *), intent inout
    swork : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef np.ndarray swork_
    cdef fw_shape_t swork_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if n != work_shape_[0]:
        raise ValueError("(n == work.shape[0]) not satisifed")
    swork_, swork = fw_asfortranarray(swork, fwc_complex_t_enum, 1, False)
    fw_copyshape(swork_shape_, np.PyArray_DIMS(swork_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zcgesv_c(&n, &nrhs, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(x_), &ldx, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), swork_shape_, <fwc_complex_t*>np.PyArray_DATA(swork_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &iter, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zcgesv' wrapper.")
    return (n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, rwork, iter, info,)


cpdef api object zcposv(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object work, object swork, object rwork, fwi_integer_t iter, fwi_integer_t info):
    """zcposv(uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, rwork, iter, info[, uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, rwork, iter, info]) -> (uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, rwork, iter, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwc_complex_x16, 2D array, dimension(n, *), intent inout
    swork : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    work : fwc_complex_x16, 2D array, dimension(n, *), intent inout
    swork : fwc_complex, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iter : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[2]
    cdef np.ndarray swork_
    cdef fw_shape_t swork_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 2)
    if n != work_shape_[0]:
        raise ValueError("(n == work.shape[0]) not satisifed")
    swork_, swork = fw_asfortranarray(swork, fwc_complex_t_enum, 1, False)
    fw_copyshape(swork_shape_, np.PyArray_DIMS(swork_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zcposv_c(fw_uplo, &n, &nrhs, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(x_), &ldx, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), swork_shape_, <fwc_complex_t*>np.PyArray_DATA(swork_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &iter, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zcposv' wrapper.")
    return (fw_uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, rwork, iter, info,)


cpdef api object zdrscl(fwi_integer_t n, fwr_dbl_t sa, object sx, fwi_integer_t incx):
    """zdrscl(n, sa, sx, incx[, n, sa, sx, incx]) -> (n, sa, sx, incx)

    Parameters
    ----------
    n : fwi_integer, intent inout
    sa : fwr_dbl, intent inout
    sx : fwc_complex_x16, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    sa : fwr_dbl, intent inout
    sx : fwc_complex_x16, 1D array, dimension(*), intent inout
    incx : fwi_integer, intent inout

    """
    cdef np.ndarray sx_
    cdef fw_shape_t sx_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    sx_, sx = fw_asfortranarray(sx, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(sx_shape_, np.PyArray_DIMS(sx_), 1)
    zdrscl_c(&n, &sa, sx_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(sx_), &incx, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zdrscl' wrapper.")
    return (n, sa, sx, incx,)


cpdef api object zgbbrd(object vect, fwi_integer_t m, fwi_integer_t n, fwi_integer_t ncc, fwi_integer_t kl, fwi_integer_t ku, object ab, fwi_integer_t ldab, object d, object e, object q, fwi_integer_t ldq, object pt, fwi_integer_t ldpt, object c, fwi_integer_t ldc, object work, object rwork, fwi_integer_t info):
    """zgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info[, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info]) -> (vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info)

    Parameters
    ----------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwc_complex_x16, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwc_complex_x16, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwc_complex_x16, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    vect : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ncc : fwi_integer, intent inout
    kl : fwi_integer, intent inout
    ku : fwi_integer, intent inout
    ab : fwc_complex_x16, 2D array, dimension(ldab, *), intent inout
    ldab : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    pt : fwc_complex_x16, 2D array, dimension(ldpt, *), intent inout
    ldpt : fwi_integer, intent inout
    c : fwc_complex_x16, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_vect = [0, 0]
    cdef np.ndarray ab_
    cdef fw_shape_t ab_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray pt_
    cdef fw_shape_t pt_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ab_, ab = fw_asfortranarray(ab, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(ab_shape_, np.PyArray_DIMS(ab_), 2)
    if ldab != ab_shape_[0]:
        raise ValueError("(ldab == ab.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    pt_, pt = fw_asfortranarray(pt, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(pt_shape_, np.PyArray_DIMS(pt_), 2)
    if ldpt != pt_shape_[0]:
        raise ValueError("(ldpt == pt.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_vect[0] = fw_aschar(vect)
    if fw_vect[0] == 0:
        raise ValueError("len(vect) != 1")
    zgbbrd_c(fw_vect, &m, &n, &ncc, &kl, &ku, ab_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(ab_), &ldab, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, pt_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(pt_), &ldpt, c_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(c_), &ldc, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgbbrd' wrapper.")
    return (fw_vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info,)


cpdef api object zgees(object jobvs, object sort, bint select, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object w, object vs, fwi_integer_t ldvs, object work, fwi_integer_t lwork, object rwork, object bwork, fwi_integer_t info):
    """zgees(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info[, jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info]) -> (jobvs, sort, select_, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vs : fwc_complex_x16, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vs : fwc_complex_x16, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vs_, vs = fw_asfortranarray(vs, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    zgees_c(fw_jobvs, fw_sort, &select_, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, &sdim, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), vs_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vs_), &ldvs, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgees' wrapper.")
    return (fw_jobvs, fw_sort, select_, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info,)


cpdef api object zgeesx(object jobvs, object sort, bint select, object sense, fwi_integer_t n, object a, fwi_integer_t lda, fwi_integer_t sdim, object w, object vs, fwi_integer_t ldvs, fwr_dbl_t rconde, fwr_dbl_t rcondv, object work, fwi_integer_t lwork, object rwork, object bwork, fwi_integer_t info):
    """zgeesx(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info[, jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info]) -> (jobvs, sort, select_, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info)

    Parameters
    ----------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vs : fwc_complex_x16, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_dbl, intent inout
    rcondv : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvs : object_, intent inout
    sort : object_, intent inout
    select : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vs : fwc_complex_x16, 2D array, dimension(ldvs, *), intent inout
    ldvs : fwi_integer, intent inout
    rconde : fwr_dbl, intent inout
    rcondv : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvs = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t select_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vs_
    cdef fw_shape_t vs_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_ = 1 if select else 0
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vs_, vs = fw_asfortranarray(vs, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vs_shape_, np.PyArray_DIMS(vs_), 2)
    if ldvs != vs_shape_[0]:
        raise ValueError("(ldvs == vs.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvs[0] = fw_aschar(jobvs)
    if fw_jobvs[0] == 0:
        raise ValueError("len(jobvs) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    zgeesx_c(fw_jobvs, fw_sort, &select_, fw_sense, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, &sdim, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), vs_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vs_), &ldvs, &rconde, &rcondv, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgeesx' wrapper.")
    return (fw_jobvs, fw_sort, select_, fw_sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info,)


cpdef api object zgeev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object w, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgeev(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info[, jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info]) -> (jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    zgeev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgeev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info,)


cpdef api object zgeevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object w, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object scale, fwr_dbl_t abnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgeevx(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    scale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray scale_
    cdef fw_shape_t scale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    scale_, scale = fw_asfortranarray(scale, fwr_dbl_t_enum, 1, False)
    fw_copyshape(scale_shape_, np.PyArray_DIMS(scale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    zgeevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, scale_shape_, <fwr_dbl_t*>np.PyArray_DATA(scale_), &abnrm, rconde_shape_, <fwr_dbl_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_dbl_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgeevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info,)


cpdef api object zgegs(object jobvsl, object jobvsr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info[, jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info]) -> (jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vsl : fwc_complex_x16, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex_x16, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vsl : fwc_complex_x16, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex_x16, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    zgegs_c(fw_jobvsl, fw_jobvsr, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgegs' wrapper.")
    return (fw_jobvsl, fw_jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info,)


cpdef api object zgegv(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgegv(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    zgegv_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgegv' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info,)


cpdef api object zgelsd(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object rwork, object iwork, fwi_integer_t info):
    """zgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    zgelsd_c(&m, &n, &nrhs, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgelsd' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info,)


cpdef api object zgelss(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object s, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgelss(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info[, m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info]) -> (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zgelss_c(&m, &n, &nrhs, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), &rcond, &rank, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgelss' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info,)


cpdef api object zgelsx(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_dbl_t rcond, fwi_integer_t rank, object work, object rwork, fwi_integer_t info):
    """zgelsx(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zgelsx_c(&m, &n, &nrhs, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgelsx' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info,)


cpdef api object zgelsy(fwi_integer_t m, fwi_integer_t n, fwi_integer_t nrhs, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object jpvt, fwr_dbl_t rcond, fwi_integer_t rank, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info[, m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info]) -> (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zgelsy_c(&m, &n, &nrhs, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), &rcond, &rank, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgelsy' wrapper.")
    return (m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info,)


cpdef api object zgeqp3(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgeqp3(m, n, a, lda, jpvt, tau, work, lwork, rwork, info[, m, n, a, lda, jpvt, tau, work, lwork, rwork, info]) -> (m, n, a, lda, jpvt, tau, work, lwork, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex_x16, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex_x16, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zgeqp3_c(&m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(tau_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgeqp3' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, lwork, rwork, info,)


cpdef api object zgeqpf(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object jpvt, object tau, object work, object rwork, fwi_integer_t info):
    """zgeqpf(m, n, a, lda, jpvt, tau, work, rwork, info[, m, n, a, lda, jpvt, tau, work, rwork, info]) -> (m, n, a, lda, jpvt, tau, work, rwork, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex_x16, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    jpvt : fwi_integer, 1D array, dimension(*), intent inout
    tau : fwc_complex_x16, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray jpvt_
    cdef fw_shape_t jpvt_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    jpvt_, jpvt = fw_asfortranarray(jpvt, fwi_integer_t_enum, 1, False)
    fw_copyshape(jpvt_shape_, np.PyArray_DIMS(jpvt_), 1)
    tau_, tau = fw_asfortranarray(tau, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zgeqpf_c(&m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, jpvt_shape_, <fwi_integer_t*>np.PyArray_DATA(jpvt_), tau_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(tau_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgeqpf' wrapper.")
    return (m, n, a, lda, jpvt, tau, work, rwork, info,)


cpdef api object zgesdd(object jobz, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, object rwork, object iwork, fwi_integer_t info):
    """zgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info[, jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info]) -> (jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info)

    Parameters
    ----------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex_x16, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobz : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex_x16, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobz = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobz[0] = fw_aschar(jobz)
    if fw_jobz[0] == 0:
        raise ValueError("len(jobz) != 1")
    zgesdd_c(fw_jobz, &m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), u_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgesdd' wrapper.")
    return (fw_jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info,)


cpdef api object zgesvd(object jobu, object jobvt, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object s, object u, fwi_integer_t ldu, object vt, fwi_integer_t ldvt, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zgesvd(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info[, jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info]) -> (jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex_x16, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobvt : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    s : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    vt : fwc_complex_x16, 2D array, dimension(ldvt, *), intent inout
    ldvt : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobvt = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray vt_
    cdef fw_shape_t vt_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    s_, s = fw_asfortranarray(s, fwr_dbl_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    u_, u = fw_asfortranarray(u, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    vt_, vt = fw_asfortranarray(vt, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vt_shape_, np.PyArray_DIMS(vt_), 2)
    if ldvt != vt_shape_[0]:
        raise ValueError("(ldvt == vt.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobvt[0] = fw_aschar(jobvt)
    if fw_jobvt[0] == 0:
        raise ValueError("len(jobvt) != 1")
    zgesvd_c(fw_jobu, fw_jobvt, &m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, s_shape_, <fwr_dbl_t*>np.PyArray_DATA(s_), u_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(u_), &ldu, vt_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vt_), &ldvt, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgesvd' wrapper.")
    return (fw_jobu, fw_jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info,)


cpdef api object zgges(object jobvsl, object jobvsr, object sort, bint selctg, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alpha, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object work, fwi_integer_t lwork, object rwork, object bwork, fwi_integer_t info):
    """zgges(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info[, jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vsl : fwc_complex_x16, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex_x16, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vsl : fwc_complex_x16, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex_x16, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    zgges_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, &sdim, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vsr_), &ldvsr, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgges' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info,)


cpdef api object zggesx(object jobvsl, object jobvsr, object sort, bint selctg, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwi_integer_t sdim, object alpha, object beta, object vsl, fwi_integer_t ldvsl, object vsr, fwi_integer_t ldvsr, object rconde, object rcondv, object work, fwi_integer_t lwork, object rwork, object iwork, fwi_integer_t liwork, object bwork, fwi_integer_t info):
    """zggesx(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info[, jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info]) -> (jobvsl, jobvsr, sort, selctg_, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info)

    Parameters
    ----------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vsl : fwc_complex_x16, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex_x16, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_dbl, 1D array, dimension(2), intent inout
    rcondv : fwr_dbl, 1D array, dimension(2), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvsl : object_, intent inout
    jobvsr : object_, intent inout
    sort : object_, intent inout
    selctg : fwl_logical, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    sdim : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vsl : fwc_complex_x16, 2D array, dimension(ldvsl, *), intent inout
    ldvsl : fwi_integer, intent inout
    vsr : fwc_complex_x16, 2D array, dimension(ldvsr, *), intent inout
    ldvsr : fwi_integer, intent inout
    rconde : fwr_dbl, 1D array, dimension(2), intent inout
    rcondv : fwr_dbl, 1D array, dimension(2), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvsl = [0, 0]
    cdef char *fw_jobvsr = [0, 0]
    cdef char *fw_sort = [0, 0]
    cdef fwl_logical_t selctg_
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vsl_
    cdef fw_shape_t vsl_shape_[2]
    cdef np.ndarray vsr_
    cdef fw_shape_t vsr_shape_[2]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    selctg_ = 1 if selctg else 0
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vsl_, vsl = fw_asfortranarray(vsl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vsl_shape_, np.PyArray_DIMS(vsl_), 2)
    if ldvsl != vsl_shape_[0]:
        raise ValueError("(ldvsl == vsl.shape[0]) not satisifed")
    vsr_, vsr = fw_asfortranarray(vsr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vsr_shape_, np.PyArray_DIMS(vsr_), 2)
    if ldvsr != vsr_shape_[0]:
        raise ValueError("(ldvsr == vsr.shape[0]) not satisifed")
    rconde_, rconde = fw_asfortranarray(rconde, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    if not (0 <= 2 <= rconde_shape_[0]):
        raise ValueError("(0 <= 2 <= rconde.shape[0]) not satisifed")
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    if not (0 <= 2 <= rcondv_shape_[0]):
        raise ValueError("(0 <= 2 <= rcondv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_jobvsl[0] = fw_aschar(jobvsl)
    if fw_jobvsl[0] == 0:
        raise ValueError("len(jobvsl) != 1")
    fw_jobvsr[0] = fw_aschar(jobvsr)
    if fw_jobvsr[0] == 0:
        raise ValueError("len(jobvsr) != 1")
    fw_sort[0] = fw_aschar(sort)
    if fw_sort[0] == 0:
        raise ValueError("len(sort) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    zggesx_c(fw_jobvsl, fw_jobvsr, fw_sort, &selctg_, fw_sense, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, &sdim, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), vsl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vsl_), &ldvsl, vsr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vsr_), &ldvsr, rconde_shape_, <fwr_dbl_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_dbl_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zggesx' wrapper.")
    return (fw_jobvsl, fw_jobvsr, fw_sort, selctg_, fw_sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info,)


cpdef api object zggev(object jobvl, object jobvr, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zggev(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info[, jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info]) -> (jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)

    Parameters
    ----------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    zggev_c(fw_jobvl, fw_jobvr, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zggev' wrapper.")
    return (fw_jobvl, fw_jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info,)


cpdef api object zggevx(object balanc, object jobvl, object jobvr, object sense, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t ilo, fwi_integer_t ihi, object lscale, object rscale, fwr_dbl_t abnrm, fwr_dbl_t bbnrm, object rconde, object rcondv, object work, fwi_integer_t lwork, object rwork, object iwork, object bwork, fwi_integer_t info):
    """zggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info[, balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info]) -> (balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info)

    Parameters
    ----------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_dbl, 1D array, dimension(*), intent inout
    rscale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    bbnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    balanc : object_, intent inout
    jobvl : object_, intent inout
    jobvr : object_, intent inout
    sense : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    lscale : fwr_dbl, 1D array, dimension(*), intent inout
    rscale : fwr_dbl, 1D array, dimension(*), intent inout
    abnrm : fwr_dbl, intent inout
    bbnrm : fwr_dbl, intent inout
    rconde : fwr_dbl, 1D array, dimension(*), intent inout
    rcondv : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    bwork : fwl_logical, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_balanc = [0, 0]
    cdef char *fw_jobvl = [0, 0]
    cdef char *fw_jobvr = [0, 0]
    cdef char *fw_sense = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray lscale_
    cdef fw_shape_t lscale_shape_[1]
    cdef np.ndarray rscale_
    cdef fw_shape_t rscale_shape_[1]
    cdef np.ndarray rconde_
    cdef fw_shape_t rconde_shape_[1]
    cdef np.ndarray rcondv_
    cdef fw_shape_t rcondv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray bwork_
    cdef fw_shape_t bwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    lscale_, lscale = fw_asfortranarray(lscale, fwr_dbl_t_enum, 1, False)
    fw_copyshape(lscale_shape_, np.PyArray_DIMS(lscale_), 1)
    rscale_, rscale = fw_asfortranarray(rscale, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rscale_shape_, np.PyArray_DIMS(rscale_), 1)
    rconde_, rconde = fw_asfortranarray(rconde, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rconde_shape_, np.PyArray_DIMS(rconde_), 1)
    rcondv_, rcondv = fw_asfortranarray(rcondv, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rcondv_shape_, np.PyArray_DIMS(rcondv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    bwork_, bwork = fw_asfortranarray(bwork, fwl_logical_t_enum, 1, False)
    fw_copyshape(bwork_shape_, np.PyArray_DIMS(bwork_), 1)
    fw_balanc[0] = fw_aschar(balanc)
    if fw_balanc[0] == 0:
        raise ValueError("len(balanc) != 1")
    fw_jobvl[0] = fw_aschar(jobvl)
    if fw_jobvl[0] == 0:
        raise ValueError("len(jobvl) != 1")
    fw_jobvr[0] = fw_aschar(jobvr)
    if fw_jobvr[0] == 0:
        raise ValueError("len(jobvr) != 1")
    fw_sense[0] = fw_aschar(sense)
    if fw_sense[0] == 0:
        raise ValueError("len(sense) != 1")
    zggevx_c(fw_balanc, fw_jobvl, fw_jobvr, fw_sense, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, &ilo, &ihi, lscale_shape_, <fwr_dbl_t*>np.PyArray_DATA(lscale_), rscale_shape_, <fwr_dbl_t*>np.PyArray_DATA(rscale_), &abnrm, &bbnrm, rconde_shape_, <fwr_dbl_t*>np.PyArray_DATA(rconde_), rcondv_shape_, <fwr_dbl_t*>np.PyArray_DATA(rcondv_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), bwork_shape_, <fwl_logical_t*>np.PyArray_DATA(bwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zggevx' wrapper.")
    return (fw_balanc, fw_jobvl, fw_jobvr, fw_sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info,)


cpdef api object zggsvd(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t n, fwi_integer_t p, fwi_integer_t k, fwi_integer_t l, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object work, object rwork, object iwork, fwi_integer_t info):
    """zggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info[, jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info]) -> (jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    p : fwi_integer, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwr_dbl, 1D array, dimension(*), intent inout
    beta : fwr_dbl, 1D array, dimension(*), intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwr_dbl_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwr_dbl_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    u_, u = fw_asfortranarray(u, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    zggsvd_c(fw_jobu, fw_jobv, fw_jobq, &m, &n, &p, &k, &l, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwr_dbl_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwr_dbl_t*>np.PyArray_DATA(beta_), u_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zggsvd' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info,)


cpdef api object zggsvp(object jobu, object jobv, object jobq, fwi_integer_t m, fwi_integer_t p, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, fwr_dbl_t tola, fwr_dbl_t tolb, fwi_integer_t k, fwi_integer_t l, object u, fwi_integer_t ldu, object v, fwi_integer_t ldv, object q, fwi_integer_t ldq, object iwork, object rwork, object tau, object work, fwi_integer_t info):
    """zggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info[, jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info]) -> (jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info)

    Parameters
    ----------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_dbl, intent inout
    tolb : fwr_dbl, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    tau : fwc_complex_x16, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    jobu : object_, intent inout
    jobv : object_, intent inout
    jobq : object_, intent inout
    m : fwi_integer, intent inout
    p : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    tola : fwr_dbl, intent inout
    tolb : fwr_dbl, intent inout
    k : fwi_integer, intent inout
    l : fwi_integer, intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    tau : fwc_complex_x16, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_jobu = [0, 0]
    cdef char *fw_jobv = [0, 0]
    cdef char *fw_jobq = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray tau_
    cdef fw_shape_t tau_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    tau_, tau = fw_asfortranarray(tau, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(tau_shape_, np.PyArray_DIMS(tau_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_jobu[0] = fw_aschar(jobu)
    if fw_jobu[0] == 0:
        raise ValueError("len(jobu) != 1")
    fw_jobv[0] = fw_aschar(jobv)
    if fw_jobv[0] == 0:
        raise ValueError("len(jobv) != 1")
    fw_jobq[0] = fw_aschar(jobq)
    if fw_jobq[0] == 0:
        raise ValueError("len(jobq) != 1")
    zggsvp_c(fw_jobu, fw_jobv, fw_jobq, &m, &p, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, &tola, &tolb, &k, &l, u_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(u_), &ldu, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), &ldv, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), tau_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(tau_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zggsvp' wrapper.")
    return (fw_jobu, fw_jobv, fw_jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info,)


cpdef api object zgtcon(object norm, fwi_integer_t n, object dl, object d, object du, object du2, object ipiv, fwr_dbl_t anorm, fwr_dbl_t rcond, object work, fwi_integer_t info):
    """zgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info[, norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info]) -> (norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwc_complex_x16, 1D array, dimension(*), intent inout
    d : fwc_complex_x16, 1D array, dimension(*), intent inout
    du : fwc_complex_x16, 1D array, dimension(*), intent inout
    du2 : fwc_complex_x16, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    norm : object_, intent inout
    n : fwi_integer, intent inout
    dl : fwc_complex_x16, 1D array, dimension(*), intent inout
    d : fwc_complex_x16, 1D array, dimension(*), intent inout
    du : fwc_complex_x16, 1D array, dimension(*), intent inout
    du2 : fwc_complex_x16, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_norm = [0, 0]
    cdef np.ndarray dl_
    cdef fw_shape_t dl_shape_[1]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray du_
    cdef fw_shape_t du_shape_[1]
    cdef np.ndarray du2_
    cdef fw_shape_t du2_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    dl_, dl = fw_asfortranarray(dl, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(dl_shape_, np.PyArray_DIMS(dl_), 1)
    d_, d = fw_asfortranarray(d, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    du_, du = fw_asfortranarray(du, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(du_shape_, np.PyArray_DIMS(du_), 1)
    du2_, du2 = fw_asfortranarray(du2, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(du2_shape_, np.PyArray_DIMS(du2_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_norm[0] = fw_aschar(norm)
    if fw_norm[0] == 0:
        raise ValueError("len(norm) != 1")
    zgtcon_c(fw_norm, &n, dl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(dl_), d_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(d_), du_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(du_), du2_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(du2_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zgtcon' wrapper.")
    return (fw_norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info,)


cpdef api object zhgeqz(object job, object compq, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object t, fwi_integer_t ldt, object alpha, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t info):
    """zhgeqz(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info[, job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info]) -> (job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    zhgeqz_c(fw_job, fw_compq, fw_compz, &n, &ilo, &ihi, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, t_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(t_), &ldt, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zhgeqz' wrapper.")
    return (fw_job, fw_compq, fw_compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info,)


cpdef api object zhsein(object side, object eigsrc, object initv, object select, fwi_integer_t n, object h, fwi_integer_t ldh, object w, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object rwork, object ifaill, object ifailr, fwi_integer_t info):
    """zhsein(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info[, side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info]) -> (side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info)

    Parameters
    ----------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    eigsrc : object_, intent inout
    initv : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    ifaill : fwi_integer, 1D array, dimension(*), intent inout
    ifailr : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_eigsrc = [0, 0]
    cdef char *fw_initv = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray ifaill_
    cdef fw_shape_t ifaill_shape_[1]
    cdef np.ndarray ifailr_
    cdef fw_shape_t ifailr_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    ifaill_, ifaill = fw_asfortranarray(ifaill, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifaill_shape_, np.PyArray_DIMS(ifaill_), 1)
    ifailr_, ifailr = fw_asfortranarray(ifailr, fwi_integer_t_enum, 1, False)
    fw_copyshape(ifailr_shape_, np.PyArray_DIMS(ifailr_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_eigsrc[0] = fw_aschar(eigsrc)
    if fw_eigsrc[0] == 0:
        raise ValueError("len(eigsrc) != 1")
    fw_initv[0] = fw_aschar(initv)
    if fw_initv[0] == 0:
        raise ValueError("len(initv) != 1")
    zhsein_c(fw_side, fw_eigsrc, fw_initv, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), ifaill_shape_, <fwi_integer_t*>np.PyArray_DATA(ifaill_), ifailr_shape_, <fwi_integer_t*>np.PyArray_DATA(ifailr_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zhsein' wrapper.")
    return (fw_side, fw_eigsrc, fw_initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info,)


cpdef api object zhseqr(object job, object compz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """zhseqr(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info[, job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info]) -> (job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compz : object_, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    zhseqr_c(fw_job, fw_compz, &n, &ilo, &ihi, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zhseqr' wrapper.")
    return (fw_job, fw_compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info,)


cpdef api object zlacn2(fwi_integer_t n, object v, object x, fwr_dbl_t est, fwi_integer_t kase, object isave):
    """zlacn2(n, v, x, est, kase, isave[, n, v, x, est, kase, isave]) -> (n, v, x, est, kase, isave)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwc_complex_x16, 1D array, dimension(*), intent inout
    x : fwc_complex_x16, 1D array, dimension(*), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwc_complex_x16, 1D array, dimension(*), intent inout
    x : fwc_complex_x16, 1D array, dimension(*), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout
    isave : fwi_integer, 1D array, dimension(3), intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef np.ndarray isave_
    cdef fw_shape_t isave_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    x_, x = fw_asfortranarray(x, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    isave_, isave = fw_asfortranarray(isave, fwi_integer_t_enum, 1, False)
    fw_copyshape(isave_shape_, np.PyArray_DIMS(isave_), 1)
    if not (0 <= 3 <= isave_shape_[0]):
        raise ValueError("(0 <= 3 <= isave.shape[0]) not satisifed")
    zlacn2_c(&n, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), x_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(x_), &est, &kase, isave_shape_, <fwi_integer_t*>np.PyArray_DATA(isave_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlacn2' wrapper.")
    return (n, v, x, est, kase, isave,)


cpdef api object zlacon(fwi_integer_t n, object v, object x, fwr_dbl_t est, fwi_integer_t kase):
    """zlacon(n, v, x, est, kase[, n, v, x, est, kase]) -> (n, v, x, est, kase)

    Parameters
    ----------
    n : fwi_integer, intent inout
    v : fwc_complex_x16, 1D array, dimension(n), intent inout
    x : fwc_complex_x16, 1D array, dimension(n), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    v : fwc_complex_x16, 1D array, dimension(n), intent inout
    x : fwc_complex_x16, 1D array, dimension(n), intent inout
    est : fwr_dbl, intent inout
    kase : fwi_integer, intent inout

    """
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    if not (0 <= n <= v_shape_[0]):
        raise ValueError("(0 <= n <= v.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 1)
    if not (0 <= n <= x_shape_[0]):
        raise ValueError("(0 <= n <= x.shape[0]) not satisifed")
    zlacon_c(&n, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), x_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(x_), &est, &kase, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlacon' wrapper.")
    return (n, v, x, est, kase,)


cpdef api object zladiv(fwc_complex_x16_t x, fwc_complex_x16_t y):
    """zladiv(x, y[, x, y]) -> (fw_ret_arg, x, y)

    Parameters
    ----------
    x : fwc_complex_x16, intent inout
    y : fwc_complex_x16, intent inout

    Returns
    -------
    fw_ret_arg : fwc_complex_x16, intent out
    x : fwc_complex_x16, intent inout
    y : fwc_complex_x16, intent inout

    """
    cdef fwi_integer_t fw_iserr__
    cdef fwc_complex_x16_t fw_ret_arg
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    zladiv_c(&fw_ret_arg, &x, &y, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zladiv' wrapper.")
    return (fw_ret_arg, x, y,)


cpdef api object zlaed0(fwi_integer_t qsiz, fwi_integer_t n, object d, object e, object q, fwi_integer_t ldq, object qstore, fwi_integer_t ldqs, object rwork, object iwork, fwi_integer_t info):
    """zlaed0(qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info[, qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info]) -> (qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info)

    Parameters
    ----------
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwc_complex_x16, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    qsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    qstore : fwc_complex_x16, 2D array, dimension(ldqs, *), intent inout
    ldqs : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[2]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    qstore_, qstore = fw_asfortranarray(qstore, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 2)
    if ldqs != qstore_shape_[0]:
        raise ValueError("(ldqs == qstore.shape[0]) not satisifed")
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    zlaed0_c(&qsiz, &n, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, qstore_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(qstore_), &ldqs, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaed0' wrapper.")
    return (qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info,)


cpdef api object zlaed7(fwi_integer_t n, fwi_integer_t cutpnt, fwi_integer_t qsiz, fwi_integer_t tlvls, fwi_integer_t curlvl, fwi_integer_t curpbm, object d, object q, fwi_integer_t ldq, fwr_dbl_t rho, object indxq, object qstore, object qptr, object prmptr, object perm, object givptr, object givcol, object givnum, object work, object rwork, object iwork, fwi_integer_t info):
    """zlaed7(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info[, n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info]) -> (n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info)

    Parameters
    ----------
    n : fwi_integer, intent inout
    cutpnt : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : fwr_dbl, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    qstore : fwr_dbl, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    cutpnt : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    tlvls : fwi_integer, intent inout
    curlvl : fwi_integer, intent inout
    curpbm : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    rho : fwr_dbl, intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    qstore : fwr_dbl, 1D array, dimension(*), intent inout
    qptr : fwi_integer, 1D array, dimension(*), intent inout
    prmptr : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, 1D array, dimension(*), intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray qstore_
    cdef fw_shape_t qstore_shape_[1]
    cdef np.ndarray qptr_
    cdef fw_shape_t qptr_shape_[1]
    cdef np.ndarray prmptr_
    cdef fw_shape_t prmptr_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givptr_
    cdef fw_shape_t givptr_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    qstore_, qstore = fw_asfortranarray(qstore, fwr_dbl_t_enum, 1, False)
    fw_copyshape(qstore_shape_, np.PyArray_DIMS(qstore_), 1)
    qptr_, qptr = fw_asfortranarray(qptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(qptr_shape_, np.PyArray_DIMS(qptr_), 1)
    prmptr_, prmptr = fw_asfortranarray(prmptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(prmptr_shape_, np.PyArray_DIMS(prmptr_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givptr_, givptr = fw_asfortranarray(givptr, fwi_integer_t_enum, 1, False)
    fw_copyshape(givptr_shape_, np.PyArray_DIMS(givptr_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_dbl_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    zlaed7_c(&n, &cutpnt, &qsiz, &tlvls, &curlvl, &curpbm, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, &rho, indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), qstore_shape_, <fwr_dbl_t*>np.PyArray_DATA(qstore_), qptr_shape_, <fwi_integer_t*>np.PyArray_DATA(qptr_), prmptr_shape_, <fwi_integer_t*>np.PyArray_DATA(prmptr_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), givptr_shape_, <fwi_integer_t*>np.PyArray_DATA(givptr_), givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_dbl_t*>np.PyArray_DATA(givnum_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaed7' wrapper.")
    return (n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info,)


cpdef api object zlaed8(fwi_integer_t k, fwi_integer_t n, fwi_integer_t qsiz, object q, fwi_integer_t ldq, object d, fwr_dbl_t rho, fwi_integer_t cutpnt, object z, object dlamda, object q2, fwi_integer_t ldq2, object w, object indxp, object indx, object indxq, object perm, fwi_integer_t givptr, object givcol, object givnum, fwi_integer_t info):
    """zlaed8(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info[, k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info]) -> (k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info)

    Parameters
    ----------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    rho : fwr_dbl, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_dbl, 1D array, dimension(*), intent inout
    dlamda : fwr_dbl, 1D array, dimension(*), intent inout
    q2 : fwc_complex_x16, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_dbl, 1D array, dimension(*), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    k : fwi_integer, intent inout
    n : fwi_integer, intent inout
    qsiz : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    rho : fwr_dbl, intent inout
    cutpnt : fwi_integer, intent inout
    z : fwr_dbl, 1D array, dimension(*), intent inout
    dlamda : fwr_dbl, 1D array, dimension(*), intent inout
    q2 : fwc_complex_x16, 2D array, dimension(ldq2, *), intent inout
    ldq2 : fwi_integer, intent inout
    w : fwr_dbl, 1D array, dimension(*), intent inout
    indxp : fwi_integer, 1D array, dimension(*), intent inout
    indx : fwi_integer, 1D array, dimension(*), intent inout
    indxq : fwi_integer, 1D array, dimension(*), intent inout
    perm : fwi_integer, 1D array, dimension(*), intent inout
    givptr : fwi_integer, intent inout
    givcol : fwi_integer, 2D array, dimension(2, *), intent inout
    givnum : fwr_dbl, 2D array, dimension(2, *), intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[1]
    cdef np.ndarray dlamda_
    cdef fw_shape_t dlamda_shape_[1]
    cdef np.ndarray q2_
    cdef fw_shape_t q2_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray indxp_
    cdef fw_shape_t indxp_shape_[1]
    cdef np.ndarray indx_
    cdef fw_shape_t indx_shape_[1]
    cdef np.ndarray indxq_
    cdef fw_shape_t indxq_shape_[1]
    cdef np.ndarray perm_
    cdef fw_shape_t perm_shape_[1]
    cdef np.ndarray givcol_
    cdef fw_shape_t givcol_shape_[2]
    cdef np.ndarray givnum_
    cdef fw_shape_t givnum_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    z_, z = fw_asfortranarray(z, fwr_dbl_t_enum, 1, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 1)
    dlamda_, dlamda = fw_asfortranarray(dlamda, fwr_dbl_t_enum, 1, False)
    fw_copyshape(dlamda_shape_, np.PyArray_DIMS(dlamda_), 1)
    q2_, q2 = fw_asfortranarray(q2, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q2_shape_, np.PyArray_DIMS(q2_), 2)
    if ldq2 != q2_shape_[0]:
        raise ValueError("(ldq2 == q2.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwr_dbl_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    indxp_, indxp = fw_asfortranarray(indxp, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxp_shape_, np.PyArray_DIMS(indxp_), 1)
    indx_, indx = fw_asfortranarray(indx, fwi_integer_t_enum, 1, False)
    fw_copyshape(indx_shape_, np.PyArray_DIMS(indx_), 1)
    indxq_, indxq = fw_asfortranarray(indxq, fwi_integer_t_enum, 1, False)
    fw_copyshape(indxq_shape_, np.PyArray_DIMS(indxq_), 1)
    perm_, perm = fw_asfortranarray(perm, fwi_integer_t_enum, 1, False)
    fw_copyshape(perm_shape_, np.PyArray_DIMS(perm_), 1)
    givcol_, givcol = fw_asfortranarray(givcol, fwi_integer_t_enum, 2, False)
    fw_copyshape(givcol_shape_, np.PyArray_DIMS(givcol_), 2)
    if 2 != givcol_shape_[0]:
        raise ValueError("(2 == givcol.shape[0]) not satisifed")
    givnum_, givnum = fw_asfortranarray(givnum, fwr_dbl_t_enum, 2, False)
    fw_copyshape(givnum_shape_, np.PyArray_DIMS(givnum_), 2)
    if 2 != givnum_shape_[0]:
        raise ValueError("(2 == givnum.shape[0]) not satisifed")
    zlaed8_c(&k, &n, &qsiz, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), &rho, &cutpnt, z_shape_, <fwr_dbl_t*>np.PyArray_DATA(z_), dlamda_shape_, <fwr_dbl_t*>np.PyArray_DATA(dlamda_), q2_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q2_), &ldq2, w_shape_, <fwr_dbl_t*>np.PyArray_DATA(w_), indxp_shape_, <fwi_integer_t*>np.PyArray_DATA(indxp_), indx_shape_, <fwi_integer_t*>np.PyArray_DATA(indx_), indxq_shape_, <fwi_integer_t*>np.PyArray_DATA(indxq_), perm_shape_, <fwi_integer_t*>np.PyArray_DATA(perm_), &givptr, givcol_shape_, <fwi_integer_t*>np.PyArray_DATA(givcol_), givnum_shape_, <fwr_dbl_t*>np.PyArray_DATA(givnum_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaed8' wrapper.")
    return (k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info,)


cpdef api object zlaein(bint rightv, bint noinit, fwi_integer_t n, object h, fwi_integer_t ldh, fwc_complex_x16_t w, object v, object b, fwi_integer_t ldb, object rwork, fwr_dbl_t eps3, fwr_dbl_t smlnum, fwi_integer_t info):
    """zlaein(rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info[, rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info]) -> (rightv_, noinit_, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info)

    Parameters
    ----------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, intent inout
    v : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    eps3 : fwr_dbl, intent inout
    smlnum : fwr_dbl, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    rightv : fwl_logical, intent inout
    noinit : fwl_logical, intent inout
    n : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, intent inout
    v : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    eps3 : fwr_dbl, intent inout
    smlnum : fwr_dbl, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t rightv_
    cdef fwl_logical_t noinit_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    rightv_ = 1 if rightv else 0
    noinit_ = 1 if noinit else 0
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    zlaein_c(&rightv_, &noinit_, &n, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, &w, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &eps3, &smlnum, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaein' wrapper.")
    return (rightv_, noinit_, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info,)


cpdef api object zlag2c(fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object sa, fwi_integer_t ldsa, fwi_integer_t info):
    """zlag2c(m, n, a, lda, sa, ldsa, info[, m, n, a, lda, sa, ldsa, info]) -> (m, n, a, lda, sa, ldsa, info)

    Parameters
    ----------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwc_complex, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwc_complex, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray sa_
    cdef fw_shape_t sa_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    sa_, sa = fw_asfortranarray(sa, fwc_complex_t_enum, 2, False)
    fw_copyshape(sa_shape_, np.PyArray_DIMS(sa_), 2)
    if ldsa != sa_shape_[0]:
        raise ValueError("(ldsa == sa.shape[0]) not satisifed")
    zlag2c_c(&m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, sa_shape_, <fwc_complex_t*>np.PyArray_DATA(sa_), &ldsa, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlag2c' wrapper.")
    return (m, n, a, lda, sa, ldsa, info,)


cpdef api object zlahqr(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t info):
    """zlahqr(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info[, wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    zlahqr_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), &iloz, &ihiz, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlahqr' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info,)


cpdef api object zlalsd(object uplo, fwi_integer_t smlsiz, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwr_dbl_t rcond, fwi_integer_t rank, object work, object rwork, object iwork, fwi_integer_t info):
    """zlalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info[, uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info]) -> (uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    smlsiz : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    rank : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zlalsd_c(fw_uplo, &smlsiz, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, &rcond, &rank, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlalsd' wrapper.")
    return (fw_uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info,)


cpdef api object zlaqr0(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """zlaqr0(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    zlaqr0_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), &iloz, &ihiz, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaqr0' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object zlaqr1(fwi_integer_t n, object h, fwi_integer_t ldh, fwc_complex_x16_t s1, fwc_complex_x16_t s2, object v):
    """zlaqr1(n, h, ldh, s1, s2, v[, n, h, ldh, s1, s2, v]) -> (n, h, ldh, s1, s2, v)

    Parameters
    ----------
    n : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    s1 : fwc_complex_x16, intent inout
    s2 : fwc_complex_x16, intent inout
    v : fwc_complex_x16, 1D array, dimension(*), intent inout

    Returns
    -------
    n : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    s1 : fwc_complex_x16, intent inout
    s2 : fwc_complex_x16, intent inout
    v : fwc_complex_x16, 1D array, dimension(*), intent inout

    """
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 1)
    zlaqr1_c(&n, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, &s1, &s2, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaqr1' wrapper.")
    return (n, h, ldh, s1, s2, v,)


cpdef api object zlaqr2(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sh, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """zlaqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex_x16, 1D array, dimension(*), intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex_x16, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex_x16, 1D array, dimension(*), intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex_x16, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sh_
    cdef fw_shape_t sh_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sh_, sh = fw_asfortranarray(sh, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(sh_shape_, np.PyArray_DIMS(sh_), 1)
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    zlaqr2_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sh_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(sh_), v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaqr2' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object zlaqr3(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nw, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, fwi_integer_t ns, fwi_integer_t nd, object sh, object v, fwi_integer_t ldv, fwi_integer_t nh, object t, fwi_integer_t ldt, fwi_integer_t nv, object wv, fwi_integer_t ldwv, object work, fwi_integer_t lwork):
    """zlaqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork[, wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork]) -> (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex_x16, 1D array, dimension(*), intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex_x16, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nw : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ns : fwi_integer, intent inout
    nd : fwi_integer, intent inout
    sh : fwc_complex_x16, 1D array, dimension(*), intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex_x16, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray sh_
    cdef fw_shape_t sh_shape_[1]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    sh_, sh = fw_asfortranarray(sh, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(sh_shape_, np.PyArray_DIMS(sh_), 1)
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    t_, t = fw_asfortranarray(t, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    zlaqr3_c(&wantt_, &wantz_, &n, &ktop, &kbot, &nw, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, &ns, &nd, sh_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(sh_), v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), &ldv, &nh, t_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(t_), &ldt, &nv, wv_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(wv_), &ldwv, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaqr3' wrapper.")
    return (wantt_, wantz_, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork,)


cpdef api object zlaqr4(bint wantt, bint wantz, fwi_integer_t n, fwi_integer_t ilo, fwi_integer_t ihi, object h, fwi_integer_t ldh, object w, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, fwi_integer_t info):
    """zlaqr4(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info[, wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info]) -> (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    ilo : fwi_integer, intent inout
    ihi : fwi_integer, intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    zlaqr4_c(&wantt_, &wantz_, &n, &ilo, &ihi, h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), &iloz, &ihiz, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaqr4' wrapper.")
    return (wantt_, wantz_, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info,)


cpdef api object zlaqr5(bint wantt, bint wantz, fwi_integer_t kacc22, fwi_integer_t n, fwi_integer_t ktop, fwi_integer_t kbot, fwi_integer_t nshfts, object s, object h, fwi_integer_t ldh, fwi_integer_t iloz, fwi_integer_t ihiz, object z, fwi_integer_t ldz, object v, fwi_integer_t ldv, object u, fwi_integer_t ldu, fwi_integer_t nv, object wv, fwi_integer_t ldwv, fwi_integer_t nh, object wh, fwi_integer_t ldwh):
    """zlaqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh[, wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh]) -> (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)

    Parameters
    ----------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    s : fwc_complex_x16, 1D array, dimension(*), intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex_x16, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwc_complex_x16, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    Returns
    -------
    wantt : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    kacc22 : fwi_integer, intent inout
    n : fwi_integer, intent inout
    ktop : fwi_integer, intent inout
    kbot : fwi_integer, intent inout
    nshfts : fwi_integer, intent inout
    s : fwc_complex_x16, 1D array, dimension(*), intent inout
    h : fwc_complex_x16, 2D array, dimension(ldh, *), intent inout
    ldh : fwi_integer, intent inout
    iloz : fwi_integer, intent inout
    ihiz : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    v : fwc_complex_x16, 2D array, dimension(ldv, *), intent inout
    ldv : fwi_integer, intent inout
    u : fwc_complex_x16, 2D array, dimension(ldu, *), intent inout
    ldu : fwi_integer, intent inout
    nv : fwi_integer, intent inout
    wv : fwc_complex_x16, 2D array, dimension(ldwv, *), intent inout
    ldwv : fwi_integer, intent inout
    nh : fwi_integer, intent inout
    wh : fwc_complex_x16, 2D array, dimension(ldwh, *), intent inout
    ldwh : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantt_
    cdef fwl_logical_t wantz_
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[1]
    cdef np.ndarray h_
    cdef fw_shape_t h_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray v_
    cdef fw_shape_t v_shape_[2]
    cdef np.ndarray u_
    cdef fw_shape_t u_shape_[2]
    cdef np.ndarray wv_
    cdef fw_shape_t wv_shape_[2]
    cdef np.ndarray wh_
    cdef fw_shape_t wh_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantt_ = 1 if wantt else 0
    wantz_ = 1 if wantz else 0
    s_, s = fw_asfortranarray(s, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 1)
    h_, h = fw_asfortranarray(h, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(h_shape_, np.PyArray_DIMS(h_), 2)
    if ldh != h_shape_[0]:
        raise ValueError("(ldh == h.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    v_, v = fw_asfortranarray(v, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(v_shape_, np.PyArray_DIMS(v_), 2)
    if ldv != v_shape_[0]:
        raise ValueError("(ldv == v.shape[0]) not satisifed")
    u_, u = fw_asfortranarray(u, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(u_shape_, np.PyArray_DIMS(u_), 2)
    if ldu != u_shape_[0]:
        raise ValueError("(ldu == u.shape[0]) not satisifed")
    wv_, wv = fw_asfortranarray(wv, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(wv_shape_, np.PyArray_DIMS(wv_), 2)
    if ldwv != wv_shape_[0]:
        raise ValueError("(ldwv == wv.shape[0]) not satisifed")
    wh_, wh = fw_asfortranarray(wh, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(wh_shape_, np.PyArray_DIMS(wh_), 2)
    if ldwh != wh_shape_[0]:
        raise ValueError("(ldwh == wh.shape[0]) not satisifed")
    zlaqr5_c(&wantt_, &wantz_, &kacc22, &n, &ktop, &kbot, &nshfts, s_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(s_), h_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(h_), &ldh, &iloz, &ihiz, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, v_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(v_), &ldv, u_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(u_), &ldu, &nv, wv_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(wv_), &ldwv, &nh, wh_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(wh_), &ldwh, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlaqr5' wrapper.")
    return (wantt_, wantz_, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh,)


cpdef api object zlat2c(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object sa, fwi_integer_t ldsa, fwi_integer_t info):
    """zlat2c(uplo, n, a, lda, sa, ldsa, info[, uplo, n, a, lda, sa, ldsa, info]) -> (uplo, n, a, lda, sa, ldsa, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwc_complex, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    sa : fwc_complex, 2D array, dimension(ldsa, *), intent inout
    ldsa : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray sa_
    cdef fw_shape_t sa_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    sa_, sa = fw_asfortranarray(sa, fwc_complex_t_enum, 2, False)
    fw_copyshape(sa_shape_, np.PyArray_DIMS(sa_), 2)
    if ldsa != sa_shape_[0]:
        raise ValueError("(ldsa == sa.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zlat2c_c(fw_uplo, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, sa_shape_, <fwc_complex_t*>np.PyArray_DATA(sa_), &ldsa, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zlat2c' wrapper.")
    return (fw_uplo, n, a, lda, sa, ldsa, info,)


cpdef api object zptrfs(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """zptrfs(uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info[, uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info]) -> (uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_dbl_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zptrfs_c(fw_uplo, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(e_), df_shape_, <fwr_dbl_t*>np.PyArray_DATA(df_), ef_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(ef_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(x_), &ldx, ferr_shape_, <fwr_dbl_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_dbl_t*>np.PyArray_DATA(berr_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zptrfs' wrapper.")
    return (fw_uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info,)


cpdef api object zptsvx(object fact, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object df, object ef, object b, fwi_integer_t ldb, object x, fwi_integer_t ldx, fwr_dbl_t rcond, object ferr, object berr, object work, object rwork, fwi_integer_t info):
    """zptsvx(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info[, fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info]) -> (fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)

    Parameters
    ----------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    fact : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    df : fwr_dbl, 1D array, dimension(*), intent inout
    ef : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    x : fwc_complex_x16, 2D array, dimension(ldx, *), intent inout
    ldx : fwi_integer, intent inout
    rcond : fwr_dbl, intent inout
    ferr : fwr_dbl, 1D array, dimension(*), intent inout
    berr : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_fact = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray df_
    cdef fw_shape_t df_shape_[1]
    cdef np.ndarray ef_
    cdef fw_shape_t ef_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray x_
    cdef fw_shape_t x_shape_[2]
    cdef np.ndarray ferr_
    cdef fw_shape_t ferr_shape_[1]
    cdef np.ndarray berr_
    cdef fw_shape_t berr_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    df_, df = fw_asfortranarray(df, fwr_dbl_t_enum, 1, False)
    fw_copyshape(df_shape_, np.PyArray_DIMS(df_), 1)
    ef_, ef = fw_asfortranarray(ef, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(ef_shape_, np.PyArray_DIMS(ef_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    x_, x = fw_asfortranarray(x, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(x_shape_, np.PyArray_DIMS(x_), 2)
    if ldx != x_shape_[0]:
        raise ValueError("(ldx == x.shape[0]) not satisifed")
    ferr_, ferr = fw_asfortranarray(ferr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(ferr_shape_, np.PyArray_DIMS(ferr_), 1)
    berr_, berr = fw_asfortranarray(berr, fwr_dbl_t_enum, 1, False)
    fw_copyshape(berr_shape_, np.PyArray_DIMS(berr_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_fact[0] = fw_aschar(fact)
    if fw_fact[0] == 0:
        raise ValueError("len(fact) != 1")
    zptsvx_c(fw_fact, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(e_), df_shape_, <fwr_dbl_t*>np.PyArray_DATA(df_), ef_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(ef_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, x_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(x_), &ldx, &rcond, ferr_shape_, <fwr_dbl_t*>np.PyArray_DATA(ferr_), berr_shape_, <fwr_dbl_t*>np.PyArray_DATA(berr_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zptsvx' wrapper.")
    return (fw_fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info,)


cpdef api object zpttrs(object uplo, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb, fwi_integer_t info):
    """zpttrs(uplo, n, nrhs, d, e, b, ldb, info[, uplo, n, nrhs, d, e, b, ldb, info]) -> (uplo, n, nrhs, d, e, b, ldb, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zpttrs_c(fw_uplo, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(e_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zpttrs' wrapper.")
    return (fw_uplo, n, nrhs, d, e, b, ldb, info,)


cpdef api object zptts2(fwi_integer_t iuplo, fwi_integer_t n, fwi_integer_t nrhs, object d, object e, object b, fwi_integer_t ldb):
    """zptts2(iuplo, n, nrhs, d, e, b, ldb[, iuplo, n, nrhs, d, e, b, ldb]) -> (iuplo, n, nrhs, d, e, b, ldb)

    Parameters
    ----------
    iuplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    Returns
    -------
    iuplo : fwi_integer, intent inout
    n : fwi_integer, intent inout
    nrhs : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwc_complex_x16, 1D array, dimension(*), intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout

    """
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    zptts2_c(&iuplo, &n, &nrhs, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(e_), b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zptts2' wrapper.")
    return (iuplo, n, nrhs, d, e, b, ldb,)


cpdef api object zspcon(object uplo, fwi_integer_t n, object ap, object ipiv, fwr_dbl_t anorm, fwr_dbl_t rcond, object work, fwi_integer_t info):
    """zspcon(uplo, n, ap, ipiv, anorm, rcond, work, info[, uplo, n, ap, ipiv, anorm, rcond, work, info]) -> (uplo, n, ap, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwc_complex_x16, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    ap : fwc_complex_x16, 1D array, dimension(*), intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray ap_
    cdef fw_shape_t ap_shape_[1]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    ap_, ap = fw_asfortranarray(ap, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(ap_shape_, np.PyArray_DIMS(ap_), 1)
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zspcon_c(fw_uplo, &n, ap_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(ap_), ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zspcon' wrapper.")
    return (fw_uplo, n, ap, ipiv, anorm, rcond, work, info,)


cpdef api object zstedc(object compz, fwi_integer_t n, object d, object e, object z, fwi_integer_t ldz, object work, fwi_integer_t lwork, object rwork, fwi_integer_t lrwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """zstedc(compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info[, compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info]) -> (compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)

    Parameters
    ----------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compz : object_, intent inout
    n : fwi_integer, intent inout
    d : fwr_dbl, 1D array, dimension(*), intent inout
    e : fwr_dbl, 1D array, dimension(*), intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    lrwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compz = [0, 0]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[1]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[1]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    d_, d = fw_asfortranarray(d, fwr_dbl_t_enum, 1, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 1)
    e_, e = fw_asfortranarray(e, fwr_dbl_t_enum, 1, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 1)
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    fw_compz[0] = fw_aschar(compz)
    if fw_compz[0] == 0:
        raise ValueError("len(compz) != 1")
    zstedc_c(fw_compz, &n, d_shape_, <fwr_dbl_t*>np.PyArray_DATA(d_), e_shape_, <fwr_dbl_t*>np.PyArray_DATA(e_), z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &lrwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zstedc' wrapper.")
    return (fw_compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,)


cpdef api object zsycon(object uplo, fwi_integer_t n, object a, fwi_integer_t lda, object ipiv, fwr_dbl_t anorm, fwr_dbl_t rcond, object work, fwi_integer_t info):
    """zsycon(uplo, n, a, lda, ipiv, anorm, rcond, work, info[, uplo, n, a, lda, ipiv, anorm, rcond, work, info]) -> (uplo, n, a, lda, ipiv, anorm, rcond, work, info)

    Parameters
    ----------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    uplo : object_, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    ipiv : fwi_integer, 1D array, dimension(*), intent inout
    anorm : fwr_dbl, intent inout
    rcond : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_uplo = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray ipiv_
    cdef fw_shape_t ipiv_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    ipiv_, ipiv = fw_asfortranarray(ipiv, fwi_integer_t_enum, 1, False)
    fw_copyshape(ipiv_shape_, np.PyArray_DIMS(ipiv_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_uplo[0] = fw_aschar(uplo)
    if fw_uplo[0] == 0:
        raise ValueError("len(uplo) != 1")
    zsycon_c(fw_uplo, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, ipiv_shape_, <fwi_integer_t*>np.PyArray_DATA(ipiv_), &anorm, &rcond, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'zsycon' wrapper.")
    return (fw_uplo, n, a, lda, ipiv, anorm, rcond, work, info,)


cpdef api object ztgevc(object side, object howmny, object select, fwi_integer_t n, object s, fwi_integer_t lds, object p, fwi_integer_t ldp, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object rwork, fwi_integer_t info):
    """ztgevc(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info[, side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info]) -> (side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwc_complex_x16, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwc_complex_x16, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    s : fwc_complex_x16, 2D array, dimension(lds, *), intent inout
    lds : fwi_integer, intent inout
    p : fwc_complex_x16, 2D array, dimension(ldp, *), intent inout
    ldp : fwi_integer, intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray s_
    cdef fw_shape_t s_shape_[2]
    cdef np.ndarray p_
    cdef fw_shape_t p_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    s_, s = fw_asfortranarray(s, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(s_shape_, np.PyArray_DIMS(s_), 2)
    if lds != s_shape_[0]:
        raise ValueError("(lds == s.shape[0]) not satisifed")
    p_, p = fw_asfortranarray(p, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(p_shape_, np.PyArray_DIMS(p_), 2)
    if ldp != p_shape_[0]:
        raise ValueError("(ldp == p.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    ztgevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, s_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(s_), &lds, p_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(p_), &ldp, vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztgevc' wrapper.")
    return (fw_side, fw_howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info,)


cpdef api object ztgex2(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t j1, fwi_integer_t info):
    """ztgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    j1 : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    ztgex2_c(&wantq_, &wantz_, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, &j1, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztgex2' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info,)


cpdef api object ztgexc(bint wantq, bint wantz, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t ifst, fwi_integer_t ilst, fwi_integer_t info):
    """ztgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info[, wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info]) -> (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info)

    Parameters
    ----------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    ztgexc_c(&wantq_, &wantz_, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, &ifst, &ilst, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztgexc' wrapper.")
    return (wantq_, wantz_, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info,)


cpdef api object ztgsen(fwi_integer_t ijob, bint wantq, bint wantz, object select, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object alpha, object beta, object q, fwi_integer_t ldq, object z, fwi_integer_t ldz, fwi_integer_t m, fwr_dbl_t pl, fwr_dbl_t pr, object dif, object work, fwi_integer_t lwork, object iwork, fwi_integer_t liwork, fwi_integer_t info):
    """ztgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info[, ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info]) -> (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)

    Parameters
    ----------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_dbl, intent inout
    pr : fwr_dbl, intent inout
    dif : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    ijob : fwi_integer, intent inout
    wantq : fwl_logical, intent inout
    wantz : fwl_logical, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    alpha : fwc_complex_x16, 1D array, dimension(*), intent inout
    beta : fwc_complex_x16, 1D array, dimension(*), intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    z : fwc_complex_x16, 2D array, dimension(ldz, *), intent inout
    ldz : fwi_integer, intent inout
    m : fwi_integer, intent inout
    pl : fwr_dbl, intent inout
    pr : fwr_dbl, intent inout
    dif : fwr_dbl, 1D array, dimension(*), intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    iwork : fwi_integer, 1D array, dimension(*), intent inout
    liwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef fwl_logical_t wantq_
    cdef fwl_logical_t wantz_
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray alpha_
    cdef fw_shape_t alpha_shape_[1]
    cdef np.ndarray beta_
    cdef fw_shape_t beta_shape_[1]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray z_
    cdef fw_shape_t z_shape_[2]
    cdef np.ndarray dif_
    cdef fw_shape_t dif_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray iwork_
    cdef fw_shape_t iwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    wantq_ = 1 if wantq else 0
    wantz_ = 1 if wantz else 0
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    alpha_, alpha = fw_asfortranarray(alpha, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(alpha_shape_, np.PyArray_DIMS(alpha_), 1)
    beta_, beta = fw_asfortranarray(beta, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(beta_shape_, np.PyArray_DIMS(beta_), 1)
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    z_, z = fw_asfortranarray(z, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(z_shape_, np.PyArray_DIMS(z_), 2)
    if ldz != z_shape_[0]:
        raise ValueError("(ldz == z.shape[0]) not satisifed")
    dif_, dif = fw_asfortranarray(dif, fwr_dbl_t_enum, 1, False)
    fw_copyshape(dif_shape_, np.PyArray_DIMS(dif_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    iwork_, iwork = fw_asfortranarray(iwork, fwi_integer_t_enum, 1, False)
    fw_copyshape(iwork_shape_, np.PyArray_DIMS(iwork_), 1)
    ztgsen_c(&ijob, &wantq_, &wantz_, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, alpha_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(alpha_), beta_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(beta_), q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, z_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(z_), &ldz, &m, &pl, &pr, dif_shape_, <fwr_dbl_t*>np.PyArray_DATA(dif_), work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, iwork_shape_, <fwi_integer_t*>np.PyArray_DATA(iwork_), &liwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztgsen' wrapper.")
    return (ijob, wantq_, wantz_, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info,)


cpdef api object ztgsy2(object trans, fwi_integer_t ijob, fwi_integer_t m, fwi_integer_t n, object a, fwi_integer_t lda, object b, fwi_integer_t ldb, object c, fwi_integer_t ldc, object d, fwi_integer_t ldd, object e, fwi_integer_t lde, object f, fwi_integer_t ldf, fwr_dbl_t scale, fwr_dbl_t rdsum, fwr_dbl_t rdscal, fwi_integer_t info):
    """ztgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info[, trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info]) -> (trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info)

    Parameters
    ----------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwc_complex_x16, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwc_complex_x16, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwc_complex_x16, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwc_complex_x16, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_dbl, intent inout
    rdsum : fwr_dbl, intent inout
    rdscal : fwr_dbl, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    trans : object_, intent inout
    ijob : fwi_integer, intent inout
    m : fwi_integer, intent inout
    n : fwi_integer, intent inout
    a : fwc_complex_x16, 2D array, dimension(lda, *), intent inout
    lda : fwi_integer, intent inout
    b : fwc_complex_x16, 2D array, dimension(ldb, *), intent inout
    ldb : fwi_integer, intent inout
    c : fwc_complex_x16, 2D array, dimension(ldc, *), intent inout
    ldc : fwi_integer, intent inout
    d : fwc_complex_x16, 2D array, dimension(ldd, *), intent inout
    ldd : fwi_integer, intent inout
    e : fwc_complex_x16, 2D array, dimension(lde, *), intent inout
    lde : fwi_integer, intent inout
    f : fwc_complex_x16, 2D array, dimension(ldf, *), intent inout
    ldf : fwi_integer, intent inout
    scale : fwr_dbl, intent inout
    rdsum : fwr_dbl, intent inout
    rdscal : fwr_dbl, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_trans = [0, 0]
    cdef np.ndarray a_
    cdef fw_shape_t a_shape_[2]
    cdef np.ndarray b_
    cdef fw_shape_t b_shape_[2]
    cdef np.ndarray c_
    cdef fw_shape_t c_shape_[2]
    cdef np.ndarray d_
    cdef fw_shape_t d_shape_[2]
    cdef np.ndarray e_
    cdef fw_shape_t e_shape_[2]
    cdef np.ndarray f_
    cdef fw_shape_t f_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    a_, a = fw_asfortranarray(a, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(a_shape_, np.PyArray_DIMS(a_), 2)
    if lda != a_shape_[0]:
        raise ValueError("(lda == a.shape[0]) not satisifed")
    b_, b = fw_asfortranarray(b, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(b_shape_, np.PyArray_DIMS(b_), 2)
    if ldb != b_shape_[0]:
        raise ValueError("(ldb == b.shape[0]) not satisifed")
    c_, c = fw_asfortranarray(c, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(c_shape_, np.PyArray_DIMS(c_), 2)
    if ldc != c_shape_[0]:
        raise ValueError("(ldc == c.shape[0]) not satisifed")
    d_, d = fw_asfortranarray(d, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(d_shape_, np.PyArray_DIMS(d_), 2)
    if ldd != d_shape_[0]:
        raise ValueError("(ldd == d.shape[0]) not satisifed")
    e_, e = fw_asfortranarray(e, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(e_shape_, np.PyArray_DIMS(e_), 2)
    if lde != e_shape_[0]:
        raise ValueError("(lde == e.shape[0]) not satisifed")
    f_, f = fw_asfortranarray(f, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(f_shape_, np.PyArray_DIMS(f_), 2)
    if ldf != f_shape_[0]:
        raise ValueError("(ldf == f.shape[0]) not satisifed")
    fw_trans[0] = fw_aschar(trans)
    if fw_trans[0] == 0:
        raise ValueError("len(trans) != 1")
    ztgsy2_c(fw_trans, &ijob, &m, &n, a_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(a_), &lda, b_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(b_), &ldb, c_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(c_), &ldc, d_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(d_), &ldd, e_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(e_), &lde, f_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(f_), &ldf, &scale, &rdsum, &rdscal, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztgsy2' wrapper.")
    return (fw_trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info,)


cpdef api object ztrevc(object side, object howmny, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object vl, fwi_integer_t ldvl, object vr, fwi_integer_t ldvr, fwi_integer_t mm, fwi_integer_t m, object work, object rwork, fwi_integer_t info):
    """ztrevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info[, side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info]) -> (side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)

    Parameters
    ----------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    side : object_, intent inout
    howmny : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    vl : fwc_complex_x16, 2D array, dimension(ldvl, *), intent inout
    ldvl : fwi_integer, intent inout
    vr : fwc_complex_x16, 2D array, dimension(ldvr, *), intent inout
    ldvr : fwi_integer, intent inout
    mm : fwi_integer, intent inout
    m : fwi_integer, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    rwork : fwr_dbl, 1D array, dimension(*), intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_side = [0, 0]
    cdef char *fw_howmny = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray vl_
    cdef fw_shape_t vl_shape_[2]
    cdef np.ndarray vr_
    cdef fw_shape_t vr_shape_[2]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef np.ndarray rwork_
    cdef fw_shape_t rwork_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    vl_, vl = fw_asfortranarray(vl, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vl_shape_, np.PyArray_DIMS(vl_), 2)
    if ldvl != vl_shape_[0]:
        raise ValueError("(ldvl == vl.shape[0]) not satisifed")
    vr_, vr = fw_asfortranarray(vr, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(vr_shape_, np.PyArray_DIMS(vr_), 2)
    if ldvr != vr_shape_[0]:
        raise ValueError("(ldvr == vr.shape[0]) not satisifed")
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    rwork_, rwork = fw_asfortranarray(rwork, fwr_dbl_t_enum, 1, False)
    fw_copyshape(rwork_shape_, np.PyArray_DIMS(rwork_), 1)
    fw_side[0] = fw_aschar(side)
    if fw_side[0] == 0:
        raise ValueError("len(side) != 1")
    fw_howmny[0] = fw_aschar(howmny)
    if fw_howmny[0] == 0:
        raise ValueError("len(howmny) != 1")
    ztrevc_c(fw_side, fw_howmny, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(t_), &ldt, vl_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vl_), &ldvl, vr_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(vr_), &ldvr, &mm, &m, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), rwork_shape_, <fwr_dbl_t*>np.PyArray_DATA(rwork_), &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztrevc' wrapper.")
    return (fw_side, fw_howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info,)


cpdef api object ztrexc(object compq, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, fwi_integer_t ifst, fwi_integer_t ilst, fwi_integer_t info):
    """ztrexc(compq, n, t, ldt, q, ldq, ifst, ilst, info[, compq, n, t, ldt, q, ldq, ifst, ilst, info]) -> (compq, n, t, ldt, q, ldq, ifst, ilst, info)

    Parameters
    ----------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    compq : object_, intent inout
    n : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    ifst : fwi_integer, intent inout
    ilst : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    t_, t = fw_asfortranarray(t, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    ztrexc_c(fw_compq, &n, t_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, &ifst, &ilst, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztrexc' wrapper.")
    return (fw_compq, n, t, ldt, q, ldq, ifst, ilst, info,)


cpdef api object ztrsen(object job, object compq, object select, fwi_integer_t n, object t, fwi_integer_t ldt, object q, fwi_integer_t ldq, object w, fwi_integer_t m, fwr_dbl_t s, fwr_dbl_t sep, object work, fwi_integer_t lwork, fwi_integer_t info):
    """ztrsen(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info[, job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info]) -> (job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info)

    Parameters
    ----------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_dbl, intent inout
    sep : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    Returns
    -------
    job : object_, intent inout
    compq : object_, intent inout
    select : fwl_logical, 1D array, dimension(*), intent inout
    n : fwi_integer, intent inout
    t : fwc_complex_x16, 2D array, dimension(ldt, *), intent inout
    ldt : fwi_integer, intent inout
    q : fwc_complex_x16, 2D array, dimension(ldq, *), intent inout
    ldq : fwi_integer, intent inout
    w : fwc_complex_x16, 1D array, dimension(*), intent inout
    m : fwi_integer, intent inout
    s : fwr_dbl, intent inout
    sep : fwr_dbl, intent inout
    work : fwc_complex_x16, 1D array, dimension(*), intent inout
    lwork : fwi_integer, intent inout
    info : fwi_integer, intent inout

    """
    cdef char *fw_job = [0, 0]
    cdef char *fw_compq = [0, 0]
    cdef np.ndarray select_
    cdef fw_shape_t select_shape_[1]
    cdef np.ndarray t_
    cdef fw_shape_t t_shape_[2]
    cdef np.ndarray q_
    cdef fw_shape_t q_shape_[2]
    cdef np.ndarray w_
    cdef fw_shape_t w_shape_[1]
    cdef np.ndarray work_
    cdef fw_shape_t work_shape_[1]
    cdef fwi_integer_t fw_iserr__
    cdef fw_character_t fw_errstr__[fw_errstr_len]
    select_, select = fw_asfortranarray(select, fwl_logical_t_enum, 1, False)
    fw_copyshape(select_shape_, np.PyArray_DIMS(select_), 1)
    t_, t = fw_asfortranarray(t, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(t_shape_, np.PyArray_DIMS(t_), 2)
    if ldt != t_shape_[0]:
        raise ValueError("(ldt == t.shape[0]) not satisifed")
    q_, q = fw_asfortranarray(q, fwc_complex_x16_t_enum, 2, False)
    fw_copyshape(q_shape_, np.PyArray_DIMS(q_), 2)
    if ldq != q_shape_[0]:
        raise ValueError("(ldq == q.shape[0]) not satisifed")
    w_, w = fw_asfortranarray(w, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(w_shape_, np.PyArray_DIMS(w_), 1)
    work_, work = fw_asfortranarray(work, fwc_complex_x16_t_enum, 1, False)
    fw_copyshape(work_shape_, np.PyArray_DIMS(work_), 1)
    fw_job[0] = fw_aschar(job)
    if fw_job[0] == 0:
        raise ValueError("len(job) != 1")
    fw_compq[0] = fw_aschar(compq)
    if fw_compq[0] == 0:
        raise ValueError("len(compq) != 1")
    ztrsen_c(fw_job, fw_compq, select_shape_, <fwl_logical_t*>np.PyArray_DATA(select_), &n, t_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(t_), &ldt, q_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(q_), &ldq, w_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(w_), &m, &s, &sep, work_shape_, <fwc_complex_x16_t*>np.PyArray_DATA(work_), &lwork, &info, &fw_iserr__, fw_errstr__)
    if fw_iserr__ != FW_NO_ERR__:
        raise RuntimeError("an error was encountered when calling the 'ztrsen' wrapper.")
    return (fw_job, fw_compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info,)



cdef void fw_copyshape(fw_shape_t *target, np.intp_t *source, int ndim):
    # In f77binding mode, we do not always have fw_shape_t and np.npy_intp
    # as the same type, so must make a copy
    cdef int i
    for i in range(ndim):
        target[i] = source[i]

cdef char fw_aschar(object s):
    cdef char* buf
    try:
        return <char>s # int
    except TypeError:
        pass
    try:
        buf = <char*>s # bytes
    except TypeError:
        s = s.encode('ASCII')
        buf = <char*>s # unicode
    if buf[0] == 0:
        return 0
    elif buf[1] != 0:
        return 0
    else:
        return buf[0]

cdef object fw_asfortranarray(object value, int typenum, int ndim, bint copy):
    cdef int flags = np.NPY_F_CONTIGUOUS | np.NPY_FORCECAST
    if ndim <= 1:
        # See http://projects.scipy.org/numpy/ticket/1691 for why this is needed
        flags |= np.NPY_C_CONTIGUOUS
    if copy:
        flags |= np.NPY_ENSURECOPY
    result = np.PyArray_FROMANY(value, typenum, 0, 0, flags)

    if ndim == result.ndim:
        return result, result
    else:
        to_shape = [None] * ndim
        fw_f2py_shape_coercion(ndim, to_shape, result.ndim, result.shape,
                               result.size)
        return result.reshape(to_shape, order='F'), result

cdef object fw_f2py_shape_coercion(int to_ndim, object to_shape,
                                   int from_ndim, object from_shape,
                                   Py_ssize_t from_size):
    # Logic ported from check_and_fix_dimensions in fortranobject.c
    # Todo: optimize
    if to_ndim > from_ndim:
        to_size = 1
        free_ax = -1
        for i in range(from_ndim):
            d = from_shape[i]
            if d == 0:
                d = 1
            to_shape[i] = d
            to_size *= d
        for i in range(from_ndim, to_ndim):
            if free_ax < 0:
                free_ax = i
            else:
                to_shape[i] = 1
        if free_ax >= 0:
            to_shape[free_ax] = from_size // to_size
    elif to_ndim < from_ndim:
        j = 0
        for i in range(from_ndim):
            while j < from_ndim and from_shape[j] < 2:
                j += 1
            if j >= from_ndim:
                d = 1
            else:
                d = from_shape[j]
                j += 1
            if i < to_ndim:
                to_shape[i] = d
            else:
                to_shape[to_ndim - 1] *= d

# Fwrap configuration:
# Fwrap: version 0.2.0dev_90fff3a
# Fwrap: self-sha1 57571a0e42332f3f0c9a5ea3b239886ae0942c94
# Fwrap: pyf-sha1 0000000000000000000000000000000000000000
# Fwrap: wraps $REFERENCE_LAPACK/*.f
# Fwrap:     sha1 06e293fd20e9b3eb70d4bf63898874dd720f21b0
# Fwrap: f77binding True
# Fwrap: detect-templates True
# Fwrap: emulate-f2py True
# Fwrap: auxiliary flapack.pxd
# Fwrap: auxiliary flapack.pyx.in
# Fwrap: auxiliary flapack_fc.f
# Fwrap: auxiliary flapack_fc.h
# Fwrap: auxiliary flapack_fc.pxd

